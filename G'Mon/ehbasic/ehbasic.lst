ca65 V2.16 - Git N/A
Main file   : min_mon.asm
Current file: min_mon.asm

000000r 1               
000000r 1               ; minimal monitor for EhBASIC and 6502 simulator V1.05
000000r 1               
000000r 1               ; To run EhBASIC on the simulator load and assemble [F7] this file, start the simulator
000000r 1               ; running [F6] then start the code with the RESET [CTRL][SHIFT]R. Just selecting RUN
000000r 1               ; will do nothing, you'll still have to do a reset to run the code.
000000r 1               
000000r 1               	.feature labels_without_colons
000000r 1               	.include "basic.asm"
000000r 2               
000000r 2               ; Enhanced BASIC to assemble under 6502 simulator, $ver 2.22
000000r 2               
000000r 2               ; $E7E1 $E7CF $E7C6 $E7D3 $E7D1 $E7D5 $E7CF $E81E $E825
000000r 2               
000000r 2               ; 2.00	new revision numbers start here
000000r 2               ; 2.01	fixed LCASE$() and UCASE$()
000000r 2               ; 2.02	new get value routine done
000000r 2               ; 2.03	changed RND() to galoise method
000000r 2               ; 2.04	fixed SPC()
000000r 2               ; 2.05	new get value routine fixed
000000r 2               ; 2.06	changed USR() code
000000r 2               ; 2.07	fixed STR$()
000000r 2               ; 2.08	changed INPUT and READ to remove need for $00 start to input buffer
000000r 2               ; 2.09	fixed RND()
000000r 2               ; 2.10	integrated missed changes from an earlier version
000000r 2               ; 2.20	added ELSE to IF .. THEN and fixed IF .. GOTO <statement> to cause error
000000r 2               ; 2.21	fixed IF .. THEN RETURN to not cause error
000000r 2               ; 2.22	fixed RND() breaking the get byte routine
000000r 2               
000000r 2               ; zero page use ..
000000r 2               
000000r 2               LAB_WARM 		= $00		; BASIC warm start entry point
000000r 2               Wrmjpl 		= LAB_WARM+1; BASIC warm start vector jump low byte
000000r 2               Wrmjph 		= LAB_WARM+2; BASIC warm start vector jump high byte
000000r 2               
000000r 2               Usrjmp		= $0A		; USR function JMP address
000000r 2               Usrjpl		= Usrjmp+1	; USR function JMP vector low byte
000000r 2               Usrjph		= Usrjmp+2	; USR function JMP vector high byte
000000r 2               Nullct		= $0D		; nulls output after each line
000000r 2               TPos			= $0E		; BASIC terminal position byte
000000r 2               TWidth		= $0F		; BASIC terminal width byte
000000r 2               Iclim			= $10		; input column limit
000000r 2               Itempl		= $11		; temporary integer low byte
000000r 2               Itemph		= Itempl+1	; temporary integer high byte
000000r 2               
000000r 2               nums_1		= Itempl	; number to bin/hex string convert MSB
000000r 2               nums_2		= nums_1+1	; number to bin/hex string convert
000000r 2               nums_3		= nums_1+2	; number to bin/hex string convert LSB
000000r 2               
000000r 2               Srchc			= $5B		; search character
000000r 2               Temp3			= Srchc	; temp byte used in number routines
000000r 2               Scnquo		= $5C		; scan-between-quotes flag
000000r 2               Asrch			= Scnquo	; alt search character
000000r 2               
000000r 2               XOAw_l		= Srchc	; eXclusive OR, OR and AND word low byte
000000r 2               XOAw_h		= Scnquo	; eXclusive OR, OR and AND word high byte
000000r 2               
000000r 2               Ibptr			= $5D		; input buffer pointer
000000r 2               Dimcnt		= Ibptr	; # of dimensions
000000r 2               Tindx			= Ibptr	; token index
000000r 2               
000000r 2               Defdim		= $5E		; default DIM flag
000000r 2               Dtypef		= $5F		; data type flag, $FF=string, $00=numeric
000000r 2               Oquote		= $60		; open quote flag (b7) (Flag: DATA scan; LIST quote; memory)
000000r 2               Gclctd		= $60		; garbage collected flag
000000r 2               Sufnxf		= $61		; subscript/FNX flag, 1xxx xxx = FN(0xxx xxx)
000000r 2               Imode			= $62		; input mode flag, $00=INPUT, $80=READ
000000r 2               
000000r 2               Cflag			= $63		; comparison evaluation flag
000000r 2               
000000r 2               TabSiz		= $64		; TAB step size (was input flag)
000000r 2               
000000r 2               next_s		= $65		; next descriptor stack address
000000r 2               
000000r 2               					; these two bytes form a word pointer to the item
000000r 2               					; currently on top of the descriptor stack
000000r 2               last_sl		= $66		; last descriptor stack address low byte
000000r 2               last_sh		= $67		; last descriptor stack address high byte (always $00)
000000r 2               
000000r 2               des_sk		= $68		; descriptor stack start address (temp strings)
000000r 2               
000000r 2               ;			= $70		; End of descriptor stack
000000r 2               
000000r 2               ut1_pl		= $71		; utility pointer 1 low byte
000000r 2               ut1_ph		= ut1_pl+1	; utility pointer 1 high byte
000000r 2               ut2_pl		= $73		; utility pointer 2 low byte
000000r 2               ut2_ph		= ut2_pl+1	; utility pointer 2 high byte
000000r 2               
000000r 2               Temp_2		= ut1_pl	; temp byte for block move
000000r 2               
000000r 2               FACt_1		= $75		; FAC temp mantissa1
000000r 2               FACt_2		= FACt_1+1	; FAC temp mantissa2
000000r 2               FACt_3		= FACt_2+1	; FAC temp mantissa3
000000r 2               
000000r 2               dims_l		= FACt_2	; array dimension size low byte
000000r 2               dims_h		= FACt_3	; array dimension size high byte
000000r 2               
000000r 2               TempB			= $78		; temp page 0 byte
000000r 2               
000000r 2               Smeml			= $79		; start of mem low byte		(Start-of-Basic)
000000r 2               Smemh			= Smeml+1	; start of mem high byte	(Start-of-Basic)
000000r 2               Svarl			= $7B		; start of vars low byte	(Start-of-Variables)
000000r 2               Svarh			= Svarl+1	; start of vars high byte	(Start-of-Variables)
000000r 2               Sarryl		= $7D		; var mem end low byte		(Start-of-Arrays)
000000r 2               Sarryh		= Sarryl+1	; var mem end high byte		(Start-of-Arrays)
000000r 2               Earryl		= $7F		; array mem end low byte	(End-of-Arrays)
000000r 2               Earryh		= Earryl+1	; array mem end high byte	(End-of-Arrays)
000000r 2               Sstorl		= $81		; string storage low byte	(String storage (moving down))
000000r 2               Sstorh		= Sstorl+1	; string storage high byte	(String storage (moving down))
000000r 2               Sutill		= $83		; string utility ptr low byte
000000r 2               Sutilh		= Sutill+1	; string utility ptr high byte
000000r 2               Ememl			= $85		; end of mem low byte		(Limit-of-memory)
000000r 2               Ememh			= Ememl+1	; end of mem high byte		(Limit-of-memory)
000000r 2               Clinel		= $87		; current line low byte		(Basic line number)
000000r 2               Clineh		= Clinel+1	; current line high byte	(Basic line number)
000000r 2               Blinel		= $89		; break line low byte		(Previous Basic line number)
000000r 2               Blineh		= Blinel+1	; break line high byte		(Previous Basic line number)
000000r 2               
000000r 2               Cpntrl		= $8B		; continue pointer low byte
000000r 2               Cpntrh		= Cpntrl+1	; continue pointer high byte
000000r 2               
000000r 2               Dlinel		= $8D		; current DATA line low byte
000000r 2               Dlineh		= Dlinel+1	; current DATA line high byte
000000r 2               
000000r 2               Dptrl			= $8F		; DATA pointer low byte
000000r 2               Dptrh			= Dptrl+1	; DATA pointer high byte
000000r 2               
000000r 2               Rdptrl		= $91		; read pointer low byte
000000r 2               Rdptrh		= Rdptrl+1	; read pointer high byte
000000r 2               
000000r 2               Varnm1		= $93		; current var name 1st byte
000000r 2               Varnm2		= Varnm1+1	; current var name 2nd byte
000000r 2               
000000r 2               Cvaral		= $95		; current var address low byte
000000r 2               Cvarah		= Cvaral+1	; current var address high byte
000000r 2               
000000r 2               Frnxtl		= $97		; var pointer for FOR/NEXT low byte
000000r 2               Frnxth		= Frnxtl+1	; var pointer for FOR/NEXT high byte
000000r 2               
000000r 2               Tidx1			= Frnxtl	; temp line index
000000r 2               
000000r 2               Lvarpl		= Frnxtl	; let var pointer low byte
000000r 2               Lvarph		= Frnxth	; let var pointer high byte
000000r 2               
000000r 2               prstk			= $99		; precedence stacked flag
000000r 2               
000000r 2               comp_f		= $9B		; compare function flag, bits 0,1 and 2 used
000000r 2               					; bit 2 set if >
000000r 2               					; bit 1 set if =
000000r 2               					; bit 0 set if <
000000r 2               
000000r 2               func_l		= $9C		; function pointer low byte
000000r 2               func_h		= func_l+1	; function pointer high byte
000000r 2               
000000r 2               garb_l		= func_l	; garbage collection working pointer low byte
000000r 2               garb_h		= func_h	; garbage collection working pointer high byte
000000r 2               
000000r 2               des_2l		= $9E		; string descriptor_2 pointer low byte
000000r 2               des_2h		= des_2l+1	; string descriptor_2 pointer high byte
000000r 2               
000000r 2               g_step		= $A0		; garbage collect step size
000000r 2               
000000r 2               Fnxjmp		= $A1		; jump vector for functions
000000r 2               Fnxjpl		= Fnxjmp+1	; functions jump vector low byte
000000r 2               Fnxjph		= Fnxjmp+2	; functions jump vector high byte
000000r 2               
000000r 2               g_indx		= Fnxjpl	; garbage collect temp index
000000r 2               
000000r 2               FAC2_r		= $A3		; FAC2 rounding byte
000000r 2               
000000r 2               Adatal		= $A4		; array data pointer low byte
000000r 2               Adatah		= Adatal+1	; array data pointer high  byte
000000r 2               
000000r 2               Nbendl		= Adatal	; new block end pointer low byte
000000r 2               Nbendh		= Adatah	; new block end pointer high  byte
000000r 2               
000000r 2               Obendl		= $A6		; old block end pointer low byte
000000r 2               Obendh		= Obendl+1	; old block end pointer high  byte
000000r 2               
000000r 2               numexp		= $A8		; string to float number exponent count
000000r 2               expcnt		= $A9		; string to float exponent count
000000r 2               
000000r 2               numbit		= numexp	; bit count for array element calculations
000000r 2               
000000r 2               numdpf		= $AA		; string to float decimal point flag
000000r 2               expneg		= $AB		; string to float eval exponent -ve flag
000000r 2               
000000r 2               Astrtl		= numdpf	; array start pointer low byte
000000r 2               Astrth		= expneg	; array start pointer high  byte
000000r 2               
000000r 2               Histrl		= numdpf	; highest string low byte
000000r 2               Histrh		= expneg	; highest string high  byte
000000r 2               
000000r 2               Baslnl		= numdpf	; BASIC search line pointer low byte
000000r 2               Baslnh		= expneg	; BASIC search line pointer high  byte
000000r 2               
000000r 2               Fvar_l		= numdpf	; find/found variable pointer low byte
000000r 2               Fvar_h		= expneg	; find/found variable pointer high  byte
000000r 2               
000000r 2               Ostrtl		= numdpf	; old block start pointer low byte
000000r 2               Ostrth		= expneg	; old block start pointer high  byte
000000r 2               
000000r 2               Vrschl		= numdpf	; variable search pointer low byte
000000r 2               Vrschh		= expneg	; variable search pointer high  byte
000000r 2               
000000r 2               FAC1_e		= $AC		; FAC1 exponent
000000r 2               FAC1_1		= FAC1_e+1	; FAC1 mantissa1
000000r 2               FAC1_2		= FAC1_e+2	; FAC1 mantissa2
000000r 2               FAC1_3		= FAC1_e+3	; FAC1 mantissa3
000000r 2               FAC1_s		= FAC1_e+4	; FAC1 sign (b7)
000000r 2               
000000r 2               str_ln		= FAC1_e	; string length
000000r 2               str_pl		= FAC1_1	; string pointer low byte
000000r 2               str_ph		= FAC1_2	; string pointer high byte
000000r 2               
000000r 2               des_pl		= FAC1_2	; string descriptor pointer low byte
000000r 2               des_ph		= FAC1_3	; string descriptor pointer high byte
000000r 2               
000000r 2               mids_l		= FAC1_3	; MID$ string temp length byte
000000r 2               
000000r 2               negnum		= $B1		; string to float eval -ve flag
000000r 2               numcon		= $B1		; series evaluation constant count
000000r 2               
000000r 2               FAC1_o		= $B2		; FAC1 overflow byte
000000r 2               
000000r 2               FAC2_e		= $B3		; FAC2 exponent
000000r 2               FAC2_1		= FAC2_e+1	; FAC2 mantissa1
000000r 2               FAC2_2		= FAC2_e+2	; FAC2 mantissa2
000000r 2               FAC2_3		= FAC2_e+3	; FAC2 mantissa3
000000r 2               FAC2_s		= FAC2_e+4	; FAC2 sign (b7)
000000r 2               
000000r 2               FAC_sc		= $B8		; FAC sign comparison, Acc#1 vs #2
000000r 2               FAC1_r		= $B9		; FAC1 rounding byte
000000r 2               
000000r 2               ssptr_l		= FAC_sc	; string start pointer low byte
000000r 2               ssptr_h		= FAC1_r	; string start pointer high byte
000000r 2               
000000r 2               sdescr		= FAC_sc	; string descriptor pointer
000000r 2               
000000r 2               csidx			= $BA		; line crunch save index
000000r 2               Asptl			= csidx	; array size/pointer low byte
000000r 2               Aspth			= $BB		; array size/pointer high byte
000000r 2               
000000r 2               Btmpl			= Asptl	; BASIC pointer temp low byte
000000r 2               Btmph			= Aspth	; BASIC pointer temp low byte
000000r 2               
000000r 2               Cptrl			= Asptl	; BASIC pointer temp low byte
000000r 2               Cptrh			= Aspth	; BASIC pointer temp low byte
000000r 2               
000000r 2               Sendl			= Asptl	; BASIC pointer temp low byte
000000r 2               Sendh			= Aspth	; BASIC pointer temp low byte
000000r 2               
000000r 2               LAB_IGBY		= $BC		; get next BASIC byte subroutine
000000r 2               
000000r 2               LAB_GBYT		= $C2		; get current BASIC byte subroutine
000000r 2               Bpntrl		= $C3		; BASIC execute (get byte) pointer low byte
000000r 2               Bpntrh		= Bpntrl+1	; BASIC execute (get byte) pointer high byte
000000r 2               
000000r 2               ;			= $D7		; end of get BASIC char subroutine
000000r 2               
000000r 2               Rbyte4		= $D8		; extra PRNG byte
000000r 2               Rbyte1		= Rbyte4+1	; most significant PRNG byte
000000r 2               Rbyte2		= Rbyte4+2	; middle PRNG byte
000000r 2               Rbyte3		= Rbyte4+3	; least significant PRNG byte
000000r 2               
000000r 2               NmiBase		= $DC		; NMI handler enabled/setup/triggered flags
000000r 2               					; bit	function
000000r 2               					; ===	========
000000r 2               					; 7	interrupt enabled
000000r 2               					; 6	interrupt setup
000000r 2               					; 5	interrupt happened
000000r 2               ;			= $DD		; NMI handler addr low byte
000000r 2               ;			= $DE		; NMI handler addr high byte
000000r 2               IrqBase		= $DF		; IRQ handler enabled/setup/triggered flags
000000r 2               ;			= $E0		; IRQ handler addr low byte
000000r 2               ;			= $E1		; IRQ handler addr high byte
000000r 2               
000000r 2               ;			= $DE		; unused
000000r 2               ;			= $DF		; unused
000000r 2               ;			= $E0		; unused
000000r 2               ;			= $E1		; unused
000000r 2               ;			= $E2		; unused
000000r 2               ;			= $E3		; unused
000000r 2               ;			= $E4		; unused
000000r 2               ;			= $E5		; unused
000000r 2               ;			= $E6		; unused
000000r 2               ;			= $E7		; unused
000000r 2               ;			= $E8		; unused
000000r 2               ;			= $E9		; unused
000000r 2               ;			= $EA		; unused
000000r 2               ;			= $EB		; unused
000000r 2               ;			= $EC		; unused
000000r 2               ;			= $ED		; unused
000000r 2               ;			= $EE		; unused
000000r 2               
000000r 2               Decss			= $EF		; number to decimal string start
000000r 2               Decssp1		= Decss+1	; number to decimal string start
000000r 2               
000000r 2               ;			= $FF		; decimal string end
000000r 2               
000000r 2               ; token values needed for BASIC
000000r 2               
000000r 2               ; primary command tokens (can start a statement)
000000r 2               
000000r 2               TK_END		= $80			; END token
000000r 2               TK_FOR		= TK_END+1		; FOR token
000000r 2               TK_NEXT		= TK_FOR+1		; NEXT token
000000r 2               TK_DATA		= TK_NEXT+1		; DATA token
000000r 2               TK_INPUT		= TK_DATA+1		; INPUT token
000000r 2               TK_DIM		= TK_INPUT+1	; DIM token
000000r 2               TK_READ		= TK_DIM+1		; READ token
000000r 2               TK_LET		= TK_READ+1		; LET token
000000r 2               TK_DEC		= TK_LET+1		; DEC token
000000r 2               TK_GOTO		= TK_DEC+1		; GOTO token
000000r 2               TK_RUN		= TK_GOTO+1		; RUN token
000000r 2               TK_IF			= TK_RUN+1		; IF token
000000r 2               TK_RESTORE		= TK_IF+1		; RESTORE token
000000r 2               TK_GOSUB		= TK_RESTORE+1	; GOSUB token
000000r 2               TK_RETIRQ		= TK_GOSUB+1	; RETIRQ token
000000r 2               TK_RETNMI		= TK_RETIRQ+1	; RETNMI token
000000r 2               TK_RETURN		= TK_RETNMI+1	; RETURN token
000000r 2               TK_REM		= TK_RETURN+1	; REM token
000000r 2               TK_STOP		= TK_REM+1		; STOP token
000000r 2               TK_ON			= TK_STOP+1		; ON token
000000r 2               TK_NULL		= TK_ON+1		; NULL token
000000r 2               TK_INC		= TK_NULL+1		; INC token
000000r 2               TK_WAIT		= TK_INC+1		; WAIT token
000000r 2               TK_LOAD		= TK_WAIT+1		; LOAD token
000000r 2               TK_SAVE		= TK_LOAD+1		; SAVE token
000000r 2               TK_DEF		= TK_SAVE+1		; DEF token
000000r 2               TK_POKE		= TK_DEF+1		; POKE token
000000r 2               TK_DOKE		= TK_POKE+1		; DOKE token
000000r 2               TK_CALL		= TK_DOKE+1		; CALL token
000000r 2               TK_DO			= TK_CALL+1		; DO token
000000r 2               TK_LOOP		= TK_DO+1		; LOOP token
000000r 2               TK_PRINT		= TK_LOOP+1		; PRINT token
000000r 2               TK_CONT		= TK_PRINT+1	; CONT token
000000r 2               TK_LIST		= TK_CONT+1		; LIST token
000000r 2               TK_CLEAR		= TK_LIST+1		; CLEAR token
000000r 2               TK_NEW		= TK_CLEAR+1	; NEW token
000000r 2               TK_WIDTH		= TK_NEW+1		; WIDTH token
000000r 2               TK_GET		= TK_WIDTH+1	; GET token
000000r 2               TK_SWAP		= TK_GET+1		; SWAP token
000000r 2               TK_BITSET		= TK_SWAP+1		; BITSET token
000000r 2               TK_BITCLR		= TK_BITSET+1	; BITCLR token
000000r 2               TK_IRQ		= TK_BITCLR+1	; IRQ token
000000r 2               TK_NMI		= TK_IRQ+1		; NMI token
000000r 2               
000000r 2               ; secondary command tokens, can't start a statement
000000r 2               
000000r 2               TK_TAB		= TK_NMI+1		; TAB token
000000r 2               TK_ELSE		= TK_TAB+1		; ELSE token
000000r 2               TK_TO			= TK_ELSE+1		; TO token
000000r 2               TK_FN			= TK_TO+1		; FN token
000000r 2               TK_SPC		= TK_FN+1		; SPC token
000000r 2               TK_THEN		= TK_SPC+1		; THEN token
000000r 2               TK_NOT		= TK_THEN+1		; NOT token
000000r 2               TK_STEP		= TK_NOT+1		; STEP token
000000r 2               TK_UNTIL		= TK_STEP+1		; UNTIL token
000000r 2               TK_WHILE		= TK_UNTIL+1	; WHILE token
000000r 2               TK_OFF		= TK_WHILE+1	; OFF token
000000r 2               
000000r 2               ; opperator tokens
000000r 2               
000000r 2               TK_PLUS		= TK_OFF+1		; + token
000000r 2               TK_MINUS		= TK_PLUS+1		; - token
000000r 2               TK_MUL		= TK_MINUS+1	; * token
000000r 2               TK_DIV		= TK_MUL+1		; / token
000000r 2               TK_POWER		= TK_DIV+1		; ^ token
000000r 2               TK_AND		= TK_POWER+1	; AND token
000000r 2               TK_EOR		= TK_AND+1		; EOR token
000000r 2               TK_OR			= TK_EOR+1		; OR token
000000r 2               TK_RSHIFT		= TK_OR+1		; RSHIFT token
000000r 2               TK_LSHIFT		= TK_RSHIFT+1	; LSHIFT token
000000r 2               TK_GT			= TK_LSHIFT+1	; > token
000000r 2               TK_EQUAL		= TK_GT+1		; = token
000000r 2               TK_LT			= TK_EQUAL+1	; < token
000000r 2               
000000r 2               ; functions tokens
000000r 2               
000000r 2               TK_SGN		= TK_LT+1		; SGN token
000000r 2               TK_INT		= TK_SGN+1		; INT token
000000r 2               TK_ABS		= TK_INT+1		; ABS token
000000r 2               TK_USR		= TK_ABS+1		; USR token
000000r 2               TK_FRE		= TK_USR+1		; FRE token
000000r 2               TK_POS		= TK_FRE+1		; POS token
000000r 2               TK_SQR		= TK_POS+1		; SQR token
000000r 2               TK_RND		= TK_SQR+1		; RND token
000000r 2               TK_LOG		= TK_RND+1		; LOG token
000000r 2               TK_EXP		= TK_LOG+1		; EXP token
000000r 2               TK_COS		= TK_EXP+1		; COS token
000000r 2               TK_SIN		= TK_COS+1		; SIN token
000000r 2               TK_TAN		= TK_SIN+1		; TAN token
000000r 2               TK_ATN		= TK_TAN+1		; ATN token
000000r 2               TK_PEEK		= TK_ATN+1		; PEEK token
000000r 2               TK_DEEK		= TK_PEEK+1		; DEEK token
000000r 2               TK_SADD		= TK_DEEK+1		; SADD token
000000r 2               TK_LEN		= TK_SADD+1		; LEN token
000000r 2               TK_STRS		= TK_LEN+1		; STR$ token
000000r 2               TK_VAL		= TK_STRS+1		; VAL token
000000r 2               TK_ASC		= TK_VAL+1		; ASC token
000000r 2               TK_UCASES		= TK_ASC+1		; UCASE$ token
000000r 2               TK_LCASES		= TK_UCASES+1	; LCASE$ token
000000r 2               TK_CHRS		= TK_LCASES+1	; CHR$ token
000000r 2               TK_HEXS		= TK_CHRS+1		; HEX$ token
000000r 2               TK_BINS		= TK_HEXS+1		; BIN$ token
000000r 2               TK_BITTST		= TK_BINS+1		; BITTST token
000000r 2               TK_MAX		= TK_BITTST+1	; MAX token
000000r 2               TK_MIN		= TK_MAX+1		; MIN token
000000r 2               TK_PI			= TK_MIN+1		; PI token
000000r 2               TK_TWOPI		= TK_PI+1		; TWOPI token
000000r 2               TK_VPTR		= TK_TWOPI+1	; VARPTR token
000000r 2               TK_LEFTS		= TK_VPTR+1		; LEFT$ token
000000r 2               TK_RIGHTS		= TK_LEFTS+1	; RIGHT$ token
000000r 2               TK_MIDS		= TK_RIGHTS+1	; MID$ token
000000r 2               
000000r 2               ; offsets from a base of X or Y
000000r 2               
000000r 2               PLUS_0		= $00		; X or Y plus 0
000000r 2               PLUS_1		= $01		; X or Y plus 1
000000r 2               PLUS_2		= $02		; X or Y plus 2
000000r 2               PLUS_3		= $03		; X or Y plus 3
000000r 2               
000000r 2               LAB_STAK		= $0100	; stack bottom, no offset
000000r 2               
000000r 2               LAB_SKFE		= LAB_STAK+$FE
000000r 2               					; flushed stack address
000000r 2               LAB_SKFF		= LAB_STAK+$FF
000000r 2               					; flushed stack address
000000r 2               
000000r 2               ccflag		= $0300	; BASIC CTRL-C flag, 00 = enabled, 01 = dis
000000r 2               ccbyte		= ccflag+1	; BASIC CTRL-C byte
000000r 2               ccnull		= ccbyte+1	; BASIC CTRL-C byte timeout
000000r 2               
000000r 2               VEC_CC		= ccnull+1	; ctrl c check vector
000000r 2               
000000r 2               VEC_IN		= VEC_CC+2	; input vector
000000r 2               VEC_OUT		= VEC_IN+2	; output vector
000000r 2               VEC_LD		= VEC_OUT+2	; load vector
000000r 2               VEC_SV		= VEC_LD+2	; save vector
000000r 2               
000000r 2               ; Ibuffs can now be anywhere in RAM, ensure that the max length is < $80
000000r 2               
000000r 2               Ibuffs		= IRQ_vec+$14
000000r 2               					; start of input buffer after IRQ/NMI code
000000r 2               Ibuffe		= Ibuffs+$47; end of input buffer
000000r 2               
000000r 2               Ram_base		= $0400	; start of user RAM (set as needed, should be page aligned)
000000r 2               Ram_top		= $8000	; end of user RAM+1 (set as needed, should be page aligned)
000000r 2               
000000r 2               ; This start can be changed to suit your system
000000r 2               
000000r 2               	;.org	$C03C
000000r 2               
000000r 2               ; BASIC cold start entry point
000000r 2               
000000r 2               ; new page 2 initialisation, copy block to ccflag on
000000r 2  4C rr rr     	JMP BOOT
000003r 2               LAB_COLD
000003r 2  A0 04        	LDY	#PG2_TABE-PG2_TABS-1
000005r 2               					; byte count-1
000005r 2               LAB_2D13
000005r 2  B9 rr rr     	LDA	PG2_TABS,Y		; get byte
000008r 2  99 00 03     	STA	ccflag,Y		; store in page 2
00000Br 2  88           	DEY				; decrement count
00000Cr 2  10 F7        	BPL	LAB_2D13		; loop if not done
00000Er 2               
00000Er 2  A2 FF        	LDX	#$FF			; set byte
000010r 2  86 88        	STX	Clineh		; set current line high byte (set immediate mode)
000012r 2  9A           	TXS				; reset stack pointer
000013r 2               
000013r 2  A9 4C        	LDA	#$4C			; code for JMP
000015r 2  85 A1        	STA	Fnxjmp		; save for jump vector for functions
000017r 2               
000017r 2               ; copy block from LAB_2CEE to $00BC - $00D3
000017r 2               
000017r 2  A2 1C        	LDX	#StrTab-LAB_2CEE	; set byte count
000019r 2               LAB_2D4E
000019r 2  BD rr rr     	LDA	LAB_2CEE-1,X	; get byte from table
00001Cr 2  95 BB        	STA	LAB_IGBY-1,X	; save byte in page zero
00001Er 2  CA           	DEX				; decrement count
00001Fr 2  D0 F8        	BNE	LAB_2D4E		; loop if not all done
000021r 2               
000021r 2               ; copy block from StrTab to $0000 - $0012
000021r 2               
000021r 2               LAB_GMEM
000021r 2  A2 12        	LDX	#EndTab-StrTab-1	; set byte count-1
000023r 2               TabLoop
000023r 2  BD rr rr     	LDA	StrTab,X		; get byte from table
000026r 2  95 00        	STA	PLUS_0,X		; save byte in page zero
000028r 2  CA           	DEX				; decrement count
000029r 2  10 F8        	BPL	TabLoop		; loop if not all done
00002Br 2               
00002Br 2               ; set-up start values
00002Br 2               
00002Br 2  A9 00        	LDA	#$00			; clear A
00002Dr 2  85 DC        	STA	NmiBase		; clear NMI handler enabled flag
00002Fr 2  85 DF        	STA	IrqBase		; clear IRQ handler enabled flag
000031r 2  85 B2        	STA	FAC1_o		; clear FAC1 overflow byte
000033r 2  85 67        	STA	last_sh		; clear descriptor stack top item pointer high byte
000035r 2               
000035r 2  A9 0E        	LDA	#$0E			; set default tab size
000037r 2  85 64        	STA	TabSiz		; save it
000039r 2  A9 03        	LDA	#$03			; set garbage collect step size for descriptor stack
00003Br 2  85 A0        	STA	g_step		; save it
00003Dr 2  A2 68        	LDX	#des_sk		; descriptor stack start
00003Fr 2  86 65        	STX	next_s		; set descriptor stack pointer
000041r 2  A0 00        	LDY	#$00			; else clear Y
000043r 2               					; character was null so get memory size the hard way
000043r 2               					; we get here with Y=0 and Itempl/h = Ram_base
000043r 2               LAB_2D93
000043r 2  E6 11        	INC	Itempl		; increment temporary integer low byte
000045r 2  D0 08        	BNE	LAB_2D99		; branch if no overflow
000047r 2               
000047r 2  E6 12        	INC	Itemph		; increment temporary integer high byte
000049r 2  A5 12        	LDA	Itemph		; get high byte
00004Br 2  C9 80        	CMP	#>Ram_top		; compare with top of RAM+1
00004Dr 2  F0 1D        	BEQ	LAB_2DB6		; branch if match (end of user RAM)
00004Fr 2               
00004Fr 2               LAB_2D99
00004Fr 2  A9 55        	LDA	#$55			; set test byte
000051r 2  91 11        	STA	(Itempl),Y		; save via temporary integer
000053r 2  D1 11        	CMP	(Itempl),Y		; compare via temporary integer
000055r 2  D0 15        	BNE	LAB_2DB6		; branch if fail
000057r 2               
000057r 2  0A           	ASL				; shift test byte left (now $AA)
000058r 2  91 11        	STA	(Itempl),Y		; save via temporary integer
00005Ar 2  D1 11        	CMP	(Itempl),Y		; compare via temporary integer
00005Cr 2  F0 E5        	BEQ	LAB_2D93		; if ok go do next byte
00005Er 2               
00005Er 2  D0 0C        	BNE	LAB_2DB6		; branch if fail
000060r 2               
000060r 2               LAB_2DAA
000060r 2  20 rr rr     	JSR	LAB_2887		; get FAC1 from string
000063r 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
000065r 2  C9 98        	CMP	#$98			; compare with exponent = 2^24
000067r 2  B0 B8        	BCS	LAB_GMEM		; if too large go try again
000069r 2               
000069r 2  20 rr rr     	JSR	LAB_F2FU		; save integer part of FAC1 in temporary integer
00006Cr 2               					; (no range check)
00006Cr 2               
00006Cr 2               LAB_2DB6
00006Cr 2  A5 11        	LDA	Itempl		; get temporary integer low byte
00006Er 2  A4 12        	LDY	Itemph		; get temporary integer high byte
000070r 2  C0 01        	CPY	#<Ram_base+1	; compare with start of RAM+$100 high byte
000072r 2  90 AD        	BCC	LAB_GMEM		; if too small go try again
000074r 2               
000074r 2               
000074r 2               ; uncomment these lines if you want to check on the high limit of memory. Note if
000074r 2               ; Ram_top is set too low then this will fail. default is ignore it and assume the
000074r 2               ; users know what they're doing!
000074r 2               
000074r 2               ;	CPY	#>Ram_top		; compare with top of RAM high byte
000074r 2               ;	BCC	MEM_OK		; branch if < RAM top
000074r 2               
000074r 2               ;	BNE	LAB_GMEM		; if too large go try again
000074r 2               					; else was = so compare low bytes
000074r 2               ;	CMP	#<Ram_top		; compare with top of RAM low byte
000074r 2               ;	BEQ	MEM_OK		; branch if = RAM top
000074r 2               
000074r 2               ;	BCS	LAB_GMEM		; if too large go try again
000074r 2               
000074r 2               ;MEM_OK
000074r 2  85 85        	STA	Ememl			; set end of mem low byte
000076r 2  84 86        	STY	Ememh			; set end of mem high byte
000078r 2  85 81        	STA	Sstorl		; set bottom of string space low byte
00007Ar 2  84 82        	STY	Sstorh		; set bottom of string space high byte
00007Cr 2               
00007Cr 2  A0 00        	LDY	#<Ram_base		; set start addr low byte
00007Er 2  A2 04        	LDX	#>Ram_base		; set start addr high byte
000080r 2  84 79        	STY	Smeml			; save start of mem low byte
000082r 2  86 7A        	STX	Smemh			; save start of mem high byte
000084r 2               
000084r 2               ; this line is only needed if Ram_base is not $xx00
000084r 2               
000084r 2               ;	LDY	#$00			; clear Y
000084r 2  98           	TYA				; clear A
000085r 2  91 79        	STA	(Smeml),Y		; clear first byte
000087r 2  E6 79        	INC	Smeml			; increment start of mem low byte
000089r 2               
000089r 2               ; these two lines are only needed if Ram_base is $xxFF
000089r 2               
000089r 2               ;	BNE	LAB_2E05		; branch if no rollover
000089r 2               
000089r 2               ;	INC	Smemh			; increment start of mem high byte
000089r 2               LAB_2E05
000089r 2  20 rr rr     	JSR	LAB_CRLF		; print CR/LF
00008Cr 2  20 rr rr     	JSR	LAB_1463		; do "NEW" and "CLEAR"
00008Fr 2  A5 85        	LDA	Ememl			; get end of mem low byte
000091r 2  38           	SEC				; set carry for subtract
000092r 2  E5 79        	SBC	Smeml			; subtract start of mem low byte
000094r 2  AA           	TAX				; copy to X
000095r 2  A5 86        	LDA	Ememh			; get end of mem high byte
000097r 2  E5 7A        	SBC	Smemh			; subtract start of mem high byte
000099r 2  20 rr rr     	JSR	LAB_295E		; print XA as unsigned integer (bytes free)
00009Cr 2  A9 rr        	LDA	#<LAB_SMSG		; point to sign-on message (low addr)
00009Er 2  A0 rr        	LDY	#>LAB_SMSG		; point to sign-on message (high addr)
0000A0r 2  20 rr rr     	JSR	LAB_18C3		; print null terminated string from memory
0000A3r 2  A9 rr        	LDA	#<LAB_1274		; warm start vector low byte
0000A5r 2  A0 rr        	LDY	#>LAB_1274		; warm start vector high byte
0000A7r 2  85 01        	STA	Wrmjpl		; save warm start vector low byte
0000A9r 2  84 02        	STY	Wrmjph		; save warm start vector high byte
0000ABr 2  6C 01 00     	JMP	(Wrmjpl)		; go do warm start
0000AEr 2               
0000AEr 2               ; open up space in memory
0000AEr 2               ; move (Ostrtl)-(Obendl) to new block ending at (Nbendl)
0000AEr 2               
0000AEr 2               ; Nbendl,Nbendh - new block end address (A/Y)
0000AEr 2               ; Obendl,Obendh - old block end address
0000AEr 2               ; Ostrtl,Ostrth - old block start address
0000AEr 2               
0000AEr 2               ; returns with ..
0000AEr 2               
0000AEr 2               ; Nbendl,Nbendh - new block start address (high byte - $100)
0000AEr 2               ; Obendl,Obendh - old block start address (high byte - $100)
0000AEr 2               ; Ostrtl,Ostrth - old block start address (unchanged)
0000AEr 2               
0000AEr 2               LAB_11CF
0000AEr 2  20 rr rr     	JSR	LAB_121F		; check available memory, "Out of memory" error if no room
0000B1r 2               					; addr to check is in AY (low/high)
0000B1r 2  85 7F        	STA	Earryl		; save new array mem end low byte
0000B3r 2  84 80        	STY	Earryh		; save new array mem end high byte
0000B5r 2               
0000B5r 2               ; open up space in memory
0000B5r 2               ; move (Ostrtl)-(Obendl) to new block ending at (Nbendl)
0000B5r 2               ; don't set array end
0000B5r 2               
0000B5r 2               LAB_11D6
0000B5r 2  38           	SEC				; set carry for subtract
0000B6r 2  A5 A6        	LDA	Obendl		; get block end low byte
0000B8r 2  E5 AA        	SBC	Ostrtl		; subtract block start low byte
0000BAr 2  A8           	TAY				; copy MOD(block length/$100) byte to Y
0000BBr 2  A5 A7        	LDA	Obendh		; get block end high byte
0000BDr 2  E5 AB        	SBC	Ostrth		; subtract block start high byte
0000BFr 2  AA           	TAX				; copy block length high byte to X
0000C0r 2  E8           	INX				; +1 to allow for count=0 exit
0000C1r 2  98           	TYA				; copy block length low byte to A
0000C2r 2  F0 24        	BEQ	LAB_120A		; branch if length low byte=0
0000C4r 2               
0000C4r 2               					; block is (X-1)*256+Y bytes, do the Y bytes first
0000C4r 2               
0000C4r 2  38           	SEC				; set carry for add + 1, two's complement
0000C5r 2  49 FF        	EOR	#$FF			; invert low byte for subtract
0000C7r 2  65 A6        	ADC	Obendl		; add block end low byte
0000C9r 2               
0000C9r 2  85 A6        	STA	Obendl		; save corrected old block end low byte
0000CBr 2  B0 03        	BCS	LAB_11F3		; branch if no underflow
0000CDr 2               
0000CDr 2  C6 A7        	DEC	Obendh		; else decrement block end high byte
0000CFr 2  38           	SEC				; set carry for add + 1, two's complement
0000D0r 2               LAB_11F3
0000D0r 2  98           	TYA				; get MOD(block length/$100) byte
0000D1r 2  49 FF        	EOR	#$FF			; invert low byte for subtract
0000D3r 2  65 A4        	ADC	Nbendl		; add destination end low byte
0000D5r 2  85 A4        	STA	Nbendl		; save modified new block end low byte
0000D7r 2  B0 08        	BCS	LAB_1203		; branch if no underflow
0000D9r 2               
0000D9r 2  C6 A5        	DEC	Nbendh		; else decrement block end high byte
0000DBr 2  90 04        	BCC	LAB_1203		; branch always
0000DDr 2               
0000DDr 2               LAB_11FF
0000DDr 2  B1 A6        	LDA	(Obendl),Y		; get byte from source
0000DFr 2  91 A4        	STA	(Nbendl),Y		; copy byte to destination
0000E1r 2               LAB_1203
0000E1r 2  88           	DEY				; decrement index
0000E2r 2  D0 F9        	BNE	LAB_11FF		; loop until Y=0
0000E4r 2               
0000E4r 2               					; now do Y=0 indexed byte
0000E4r 2  B1 A6        	LDA	(Obendl),Y		; get byte from source
0000E6r 2  91 A4        	STA	(Nbendl),Y		; save byte to destination
0000E8r 2               LAB_120A
0000E8r 2  C6 A7        	DEC	Obendh		; decrement source pointer high byte
0000EAr 2  C6 A5        	DEC	Nbendh		; decrement destination pointer high byte
0000ECr 2  CA           	DEX				; decrement block count
0000EDr 2  D0 F2        	BNE	LAB_1203		; loop until count = $0
0000EFr 2               
0000EFr 2  60           	RTS
0000F0r 2               
0000F0r 2               ; check room on stack for A bytes
0000F0r 2               ; stack too deep? do OM error
0000F0r 2               
0000F0r 2               LAB_1212
0000F0r 2  85 78        	STA	TempB			; save result in temp byte
0000F2r 2  BA           	TSX				; copy stack
0000F3r 2  E4 78        	CPX	TempB			; compare new "limit" with stack
0000F5r 2  90 30        	BCC	LAB_OMER		; if stack < limit do "Out of memory" error then warm start
0000F7r 2               
0000F7r 2  60           	RTS
0000F8r 2               
0000F8r 2               ; check available memory, "Out of memory" error if no room
0000F8r 2               ; addr to check is in AY (low/high)
0000F8r 2               
0000F8r 2               LAB_121F
0000F8r 2  C4 82        	CPY	Sstorh		; compare bottom of string mem high byte
0000FAr 2  90 2A        	BCC	LAB_124B		; if less then exit (is ok)
0000FCr 2               
0000FCr 2  D0 04        	BNE	LAB_1229		; skip next test if greater (tested <)
0000FEr 2               
0000FEr 2               					; high byte was =, now do low byte
0000FEr 2  C5 81        	CMP	Sstorl		; compare with bottom of string mem low byte
000100r 2  90 24        	BCC	LAB_124B		; if less then exit (is ok)
000102r 2               
000102r 2               					; addr is > string storage ptr (oops!)
000102r 2               LAB_1229
000102r 2  48           	PHA				; push addr low byte
000103r 2  A2 08        	LDX	#$08			; set index to save Adatal to expneg inclusive
000105r 2  98           	TYA				; copy addr high byte (to push on stack)
000106r 2               
000106r 2               					; save misc numeric work area
000106r 2               LAB_122D
000106r 2  48           	PHA				; push byte
000107r 2  B5 A3        	LDA	Adatal-1,X		; get byte from Adatal to expneg ( ,$00 not pushed)
000109r 2  CA           	DEX				; decrement index
00010Ar 2  10 FA        	BPL	LAB_122D		; loop until all done
00010Cr 2               
00010Cr 2  20 rr rr     	JSR	LAB_GARB		; garbage collection routine
00010Fr 2               
00010Fr 2               					; restore misc numeric work area
00010Fr 2  A2 00        	LDX	#$00			; clear the index to restore bytes
000111r 2               LAB_1238
000111r 2  68           	PLA				; pop byte
000112r 2  95 A4        	STA	Adatal,X		; save byte to Adatal to expneg
000114r 2  E8           	INX				; increment index
000115r 2  E0 08        	CPX	#$08			; compare with end + 1
000117r 2  30 F8        	BMI	LAB_1238		; loop if more to do
000119r 2               
000119r 2  68           	PLA				; pop addr high byte
00011Ar 2  A8           	TAY				; copy back to Y
00011Br 2  68           	PLA				; pop addr low byte
00011Cr 2  C4 82        	CPY	Sstorh		; compare bottom of string mem high byte
00011Er 2  90 06        	BCC	LAB_124B		; if less then exit (is ok)
000120r 2               
000120r 2  D0 05        	BNE	LAB_OMER		; if greater do "Out of memory" error then warm start
000122r 2               
000122r 2               					; high byte was =, now do low byte
000122r 2  C5 81        	CMP	Sstorl		; compare with bottom of string mem low byte
000124r 2  B0 01        	BCS	LAB_OMER		; if >= do "Out of memory" error then warm start
000126r 2               
000126r 2               					; ok exit, carry clear
000126r 2               LAB_124B
000126r 2  60           	RTS
000127r 2               
000127r 2               ; do "Out of memory" error then warm start
000127r 2               
000127r 2               LAB_OMER
000127r 2  A2 0C        	LDX	#$0C			; error code $0C ("Out of memory" error)
000129r 2               
000129r 2               ; do error #X, then warm start
000129r 2               
000129r 2               LAB_XERR
000129r 2  20 rr rr     	JSR	LAB_CRLF		; print CR/LF
00012Cr 2               
00012Cr 2  BD rr rr     	LDA	LAB_BAER,X		; get error message pointer low byte
00012Fr 2  BC rr rr     	LDY	LAB_BAER+1,X	; get error message pointer high byte
000132r 2  20 rr rr     	JSR	LAB_18C3		; print null terminated string from memory
000135r 2               
000135r 2  20 rr rr     	JSR	LAB_1491		; flush stack and clear continue flag
000138r 2  A9 rr        	LDA	#<LAB_EMSG		; point to " Error" low addr
00013Ar 2  A0 rr        	LDY	#>LAB_EMSG		; point to " Error" high addr
00013Cr 2               LAB_1269
00013Cr 2  20 rr rr     	JSR	LAB_18C3		; print null terminated string from memory
00013Fr 2  A4 88        	LDY	Clineh		; get current line high byte
000141r 2  C8           	INY				; increment it
000142r 2  F0 03        	BEQ	LAB_1274		; go do warm start (was immediate mode)
000144r 2               
000144r 2               					; else print line number
000144r 2  20 rr rr     	JSR	LAB_2953		; print " in line [LINE #]"
000147r 2               
000147r 2               ; BASIC warm start entry point
000147r 2               ; wait for Basic command
000147r 2               
000147r 2               LAB_1274
000147r 2               					; clear ON IRQ/NMI bytes
000147r 2  A9 00        	LDA	#$00			; clear A
000149r 2  85 DF        	STA	IrqBase		; clear enabled byte
00014Br 2  85 DC        	STA	NmiBase		; clear enabled byte
00014Dr 2  A9 rr        	LDA	#<LAB_RMSG		; point to "Ready" message low byte
00014Fr 2  A0 rr        	LDY	#>LAB_RMSG		; point to "Ready" message high byte
000151r 2               
000151r 2  20 rr rr     	JSR	LAB_18C3		; go do print string
000154r 2               
000154r 2               ; wait for Basic command (no "Ready")
000154r 2               
000154r 2               LAB_127D
000154r 2  20 rr rr     	JSR	LAB_1357		; call for BASIC input
000157r 2               LAB_1280
000157r 2  86 C3        	STX	Bpntrl		; set BASIC execute pointer low byte
000159r 2  84 C4        	STY	Bpntrh		; set BASIC execute pointer high byte
00015Br 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
00015Er 2  F0 F4        	BEQ	LAB_127D		; loop while null
000160r 2               
000160r 2               ; got to interpret input line now ..
000160r 2               
000160r 2  A2 FF        	LDX	#$FF			; current line to null value
000162r 2  86 88        	STX	Clineh		; set current line high byte
000164r 2  90 06        	BCC	LAB_1295		; branch if numeric character (handle new BASIC line)
000166r 2               
000166r 2               					; no line number .. immediate mode
000166r 2  20 rr rr     	JSR	LAB_13A6		; crunch keywords into Basic tokens
000169r 2  4C rr rr     	JMP	LAB_15F6		; go scan and interpret code
00016Cr 2               
00016Cr 2               ; handle new BASIC line
00016Cr 2               
00016Cr 2               LAB_1295
00016Cr 2  20 rr rr     	JSR	LAB_GFPN		; get fixed-point number into temp integer
00016Fr 2  20 rr rr     	JSR	LAB_13A6		; crunch keywords into Basic tokens
000172r 2  84 5D        	STY	Ibptr			; save index pointer to end of crunched line
000174r 2  20 rr rr     	JSR	LAB_SSLN		; search BASIC for temp integer line number
000177r 2  90 44        	BCC	LAB_12E6		; branch if not found
000179r 2               
000179r 2               					; aroooogah! line # already exists! delete it
000179r 2  A0 01        	LDY	#$01			; set index to next line pointer high byte
00017Br 2  B1 AA        	LDA	(Baslnl),Y		; get next line pointer high byte
00017Dr 2  85 72        	STA	ut1_ph		; save it
00017Fr 2  A5 7B        	LDA	Svarl			; get start of vars low byte
000181r 2  85 71        	STA	ut1_pl		; save it
000183r 2  A5 AB        	LDA	Baslnh		; get found line pointer high byte
000185r 2  85 74        	STA	ut2_ph		; save it
000187r 2  A5 AA        	LDA	Baslnl		; get found line pointer low byte
000189r 2  88           	DEY				; decrement index
00018Ar 2  F1 AA        	SBC	(Baslnl),Y		; subtract next line pointer low byte
00018Cr 2  18           	CLC				; clear carry for add
00018Dr 2  65 7B        	ADC	Svarl			; add start of vars low byte
00018Fr 2  85 7B        	STA	Svarl			; save new start of vars low byte
000191r 2  85 73        	STA	ut2_pl		; save destination pointer low byte
000193r 2  A5 7C        	LDA	Svarh			; get start of vars high byte
000195r 2  69 FF        	ADC	#$FF			; -1 + carry
000197r 2  85 7C        	STA	Svarh			; save start of vars high byte
000199r 2  E5 AB        	SBC	Baslnh		; subtract found line pointer high byte
00019Br 2  AA           	TAX				; copy to block count
00019Cr 2  38           	SEC				; set carry for subtract
00019Dr 2  A5 AA        	LDA	Baslnl		; get found line pointer low byte
00019Fr 2  E5 7B        	SBC	Svarl			; subtract start of vars low byte
0001A1r 2  A8           	TAY				; copy to bytes in first block count
0001A2r 2  B0 03        	BCS	LAB_12D0		; branch if overflow
0001A4r 2               
0001A4r 2  E8           	INX				; increment block count (correct for =0 loop exit)
0001A5r 2  C6 74        	DEC	ut2_ph		; decrement destination high byte
0001A7r 2               LAB_12D0
0001A7r 2  18           	CLC				; clear carry for add
0001A8r 2  65 71        	ADC	ut1_pl		; add source pointer low byte
0001AAr 2  90 03        	BCC	LAB_12D8		; branch if no overflow
0001ACr 2               
0001ACr 2  C6 72        	DEC	ut1_ph		; else decrement source pointer high byte
0001AEr 2  18           	CLC				; clear carry
0001AFr 2               
0001AFr 2               					; close up memory to delete old line
0001AFr 2               LAB_12D8
0001AFr 2  B1 71        	LDA	(ut1_pl),Y		; get byte from source
0001B1r 2  91 73        	STA	(ut2_pl),Y		; copy to destination
0001B3r 2  C8           	INY				; increment index
0001B4r 2  D0 F9        	BNE	LAB_12D8		; while <> 0 do this block
0001B6r 2               
0001B6r 2  E6 72        	INC	ut1_ph		; increment source pointer high byte
0001B8r 2  E6 74        	INC	ut2_ph		; increment destination pointer high byte
0001BAr 2  CA           	DEX				; decrement block count
0001BBr 2  D0 F2        	BNE	LAB_12D8		; loop until all done
0001BDr 2               
0001BDr 2               					; got new line in buffer and no existing same #
0001BDr 2               LAB_12E6
0001BDr 2  AD 21 03     	LDA	Ibuffs		; get byte from start of input buffer
0001C0r 2  F0 3F        	BEQ	LAB_1319		; if null line just go flush stack/vars and exit
0001C2r 2               
0001C2r 2               					; got new line and it isn't empty line
0001C2r 2  A5 85        	LDA	Ememl			; get end of mem low byte
0001C4r 2  A4 86        	LDY	Ememh			; get end of mem high byte
0001C6r 2  85 81        	STA	Sstorl		; set bottom of string space low byte
0001C8r 2  84 82        	STY	Sstorh		; set bottom of string space high byte
0001CAr 2  A5 7B        	LDA	Svarl			; get start of vars low byte	(end of BASIC)
0001CCr 2  85 A6        	STA	Obendl		; save old block end low byte
0001CEr 2  A4 7C        	LDY	Svarh			; get start of vars high byte	(end of BASIC)
0001D0r 2  84 A7        	STY	Obendh		; save old block end high byte
0001D2r 2  65 5D        	ADC	Ibptr			; add input buffer pointer	(also buffer length)
0001D4r 2  90 01        	BCC	LAB_1301		; branch if no overflow from add
0001D6r 2               
0001D6r 2  C8           	INY				; else increment high byte
0001D7r 2               LAB_1301
0001D7r 2  85 A4        	STA	Nbendl		; save new block end low byte	(move to, low byte)
0001D9r 2  84 A5        	STY	Nbendh		; save new block end high byte
0001DBr 2  20 rr rr     	JSR	LAB_11CF		; open up space in memory
0001DEr 2               					; old start pointer Ostrtl,Ostrth set by the find line call
0001DEr 2  A5 7F        	LDA	Earryl		; get array mem end low byte
0001E0r 2  A4 80        	LDY	Earryh		; get array mem end high byte
0001E2r 2  85 7B        	STA	Svarl			; save start of vars low byte
0001E4r 2  84 7C        	STY	Svarh			; save start of vars high byte
0001E6r 2  A4 5D        	LDY	Ibptr			; get input buffer pointer	(also buffer length)
0001E8r 2  88           	DEY				; adjust for loop type
0001E9r 2               LAB_1311
0001E9r 2  B9 1D 03     	LDA	Ibuffs-4,Y		; get byte from crunched line
0001ECr 2  91 AA        	STA	(Baslnl),Y		; save it to program memory
0001EEr 2  88           	DEY				; decrement count
0001EFr 2  C0 03        	CPY	#$03			; compare with first byte-1
0001F1r 2  D0 F6        	BNE	LAB_1311		; continue while count <> 3
0001F3r 2               
0001F3r 2  A5 12        	LDA	Itemph		; get line # high byte
0001F5r 2  91 AA        	STA	(Baslnl),Y		; save it to program memory
0001F7r 2  88           	DEY				; decrement count
0001F8r 2  A5 11        	LDA	Itempl		; get line # low byte
0001FAr 2  91 AA        	STA	(Baslnl),Y		; save it to program memory
0001FCr 2  88           	DEY				; decrement count
0001FDr 2  A9 FF        	LDA	#$FF			; set byte to allow chain rebuild. if you didn't set this
0001FFr 2               					; byte then a zero already here would stop the chain rebuild
0001FFr 2               					; as it would think it was the [EOT] marker.
0001FFr 2  91 AA        	STA	(Baslnl),Y		; save it to program memory
000201r 2               
000201r 2               LAB_1319
000201r 2  20 rr rr     	JSR	LAB_1477		; reset execution to start, clear vars and flush stack
000204r 2  A6 79        	LDX	Smeml			; get start of mem low byte
000206r 2  A5 7A        	LDA	Smemh			; get start of mem high byte
000208r 2  A0 01        	LDY	#$01			; index to high byte of next line pointer
00020Ar 2               LAB_1325
00020Ar 2  86 71        	STX	ut1_pl		; set line start pointer low byte
00020Cr 2  85 72        	STA	ut1_ph		; set line start pointer high byte
00020Er 2  B1 71        	LDA	(ut1_pl),Y		; get it
000210r 2  F0 18        	BEQ	LAB_133E		; exit if end of program
000212r 2               
000212r 2               ; rebuild chaining of Basic lines
000212r 2               
000212r 2  A0 04        	LDY	#$04			; point to first code byte of line
000214r 2               					; there is always 1 byte + [EOL] as null entries are deleted
000214r 2               LAB_1330
000214r 2  C8           	INY				; next code byte
000215r 2  B1 71        	LDA	(ut1_pl),Y		; get byte
000217r 2  D0 FB        	BNE	LAB_1330		; loop if not [EOL]
000219r 2               
000219r 2  38           	SEC				; set carry for add + 1
00021Ar 2  98           	TYA				; copy end index
00021Br 2  65 71        	ADC	ut1_pl		; add to line start pointer low byte
00021Dr 2  AA           	TAX				; copy to X
00021Er 2  A0 00        	LDY	#$00			; clear index, point to this line's next line pointer
000220r 2  91 71        	STA	(ut1_pl),Y		; set next line pointer low byte
000222r 2  98           	TYA				; clear A
000223r 2  65 72        	ADC	ut1_ph		; add line start pointer high byte + carry
000225r 2  C8           	INY				; increment index to high byte
000226r 2  91 71        	STA	(ut1_pl),Y		; save next line pointer low byte
000228r 2  90 E0        	BCC	LAB_1325		; go do next line, branch always, carry clear
00022Ar 2               
00022Ar 2               
00022Ar 2               LAB_133E
00022Ar 2  4C rr rr     	JMP	LAB_127D		; else we just wait for Basic command, no "Ready"
00022Dr 2               
00022Dr 2               ; print "? " and get BASIC input
00022Dr 2               
00022Dr 2               LAB_INLN
00022Dr 2  20 rr rr     	JSR	LAB_18E3		; print "?" character
000230r 2  20 rr rr     	JSR	LAB_18E0		; print " "
000233r 2  D0 15        	BNE	LAB_1357		; call for BASIC input and return
000235r 2               
000235r 2               ; receive line from keyboard
000235r 2               
000235r 2               					; $08 as delete key (BACKSPACE on standard keyboard)
000235r 2               LAB_134B
000235r 2  C6 30        	DEC $30
000237r 2  A5 30        	LDA $30
000239r 2  20 1B C0     	JSR $C01B
00023Cr 2  A9 20        	LDA #$20
00023Er 2  20 rr rr     	JSR V_OUTP
000241r 2  C6 30        	DEC $30
000243r 2  A5 30        	LDA $30
000245r 2  20 1B C0     	JSR $C01B
000248r 2  CA           	DEX				; decrement the buffer counter (delete)
000249r 2  2C           	.byte	$2C			; make LDX into BIT abs
00024Ar 2               
00024Ar 2               ; call for BASIC input (main entry point)
00024Ar 2               
00024Ar 2               LAB_1357
00024Ar 2  A2 00        	LDX	#$00			; clear BASIC line buffer pointer
00024Cr 2               LAB_1359
00024Cr 2  20 rr rr     	JSR	V_INPT		; call scan input device
00024Fr 2  90 FB        	BCC	LAB_1359		; loop if no byte
000251r 2               
000251r 2  F0 F9        	BEQ	LAB_1359		; loop until valid input (ignore NULLs)
000253r 2               
000253r 2  C9 07        	CMP	#$07			; compare with [BELL]
000255r 2  F0 10        	BEQ	LAB_1378		; branch if [BELL]
000257r 2               
000257r 2  C9 0D        	CMP	#$0D			; compare with [CR]
000259r 2  F0 19        	BEQ	LAB_1384		; do CR/LF exit if [CR]
00025Br 2               
00025Br 2  E0 00        	CPX	#$00			; compare pointer with $00
00025Dr 2  D0 04        	BNE	LAB_1374		; branch if not empty
00025Fr 2               
00025Fr 2               ; next two lines ignore any non print character and [SPACE] if input buffer empty
00025Fr 2               
00025Fr 2  C9 21        	CMP	#$21			; compare with [SP]+1
000261r 2  90 E9        	BCC	LAB_1359		; if < ignore character
000263r 2               
000263r 2               LAB_1374
000263r 2  C9 08        	CMP	#$08			; compare with [BACKSPACE] (delete last character)
000265r 2  F0 CE        	BEQ	LAB_134B		; go delete last character
000267r 2               
000267r 2               LAB_1378
000267r 2  E0 47        	CPX	#Ibuffe-Ibuffs	; compare character count with max
000269r 2  B0 0C        	BCS	LAB_138E		; skip store and do [BELL] if buffer full
00026Br 2               
00026Br 2  9D 21 03     	STA	Ibuffs,X		; else store in buffer
00026Er 2  E8           	INX				; increment pointer
00026Fr 2               LAB_137F
00026Fr 2  20 rr rr     	JSR	LAB_PRNA		; go print the character
000272r 2  D0 D8        	BNE	LAB_1359		; always loop for next character
000274r 2               
000274r 2               LAB_1384
000274r 2  4C rr rr     	JMP	LAB_1866		; do CR/LF exit to BASIC
000277r 2               
000277r 2               ; announce buffer full
000277r 2               
000277r 2               LAB_138E
000277r 2  A9 07        	LDA	#$07			; [BELL] character into A
000279r 2  D0 F4        	BNE	LAB_137F		; go print the [BELL] but ignore input character
00027Br 2               					; branch always
00027Br 2               
00027Br 2               ; crunch keywords into Basic tokens
00027Br 2               ; position independent buffer version ..
00027Br 2               ; faster, dictionary search version ....
00027Br 2               
00027Br 2               LAB_13A6
00027Br 2  A0 FF        	LDY	#$FF			; set save index (makes for easy math later)
00027Dr 2               
00027Dr 2  38           	SEC				; set carry for subtract
00027Er 2  A5 C3        	LDA	Bpntrl		; get basic execute pointer low byte
000280r 2  E9 21        	SBC	#<Ibuffs		; subtract input buffer start pointer
000282r 2  AA           	TAX				; copy result to X (index past line # if any)
000283r 2               
000283r 2  86 60        	STX	Oquote		; clear open quote/DATA flag
000285r 2               LAB_13AC
000285r 2  BD 21 03     	LDA	Ibuffs,X		; get byte from input buffer
000288r 2  F0 51        	BEQ	LAB_13EC		; if null save byte then exit
00028Ar 2               
00028Ar 2  C9 5F        	CMP	#'_'			; compare with "_"
00028Cr 2  B0 4D        	BCS	LAB_13EC		; if >= go save byte then continue crunching
00028Er 2               
00028Er 2  C9 3C        	CMP	#'<'			; compare with "<"
000290r 2  B0 0E        	BCS	LAB_13CC		; if >= go crunch now
000292r 2               
000292r 2  C9 30        	CMP	#'0'			; compare with "0"
000294r 2  B0 45        	BCS	LAB_13EC		; if >= go save byte then continue crunching
000296r 2               
000296r 2  85 5C        	STA	Scnquo		; save buffer byte as search character
000298r 2  C9 22        	CMP	#$22			; is it quote character?
00029Ar 2  F0 61        	BEQ	LAB_1410		; branch if so (copy quoted string)
00029Cr 2               
00029Cr 2  C9 2A        	CMP	#'*'			; compare with "*"
00029Er 2  90 3B        	BCC	LAB_13EC		; if < go save byte then continue crunching
0002A0r 2               
0002A0r 2               					; else crunch now
0002A0r 2               LAB_13CC
0002A0r 2  24 60        	BIT	Oquote		; get open quote/DATA token flag
0002A2r 2  70 37        	BVS	LAB_13EC		; branch if b6 of Oquote set (was DATA)
0002A4r 2               					; go save byte then continue crunching
0002A4r 2               
0002A4r 2  86 78        	STX	TempB			; save buffer read index
0002A6r 2  84 BA        	STY	csidx			; copy buffer save index
0002A8r 2  A0 rr        	LDY	#<TAB_1STC		; get keyword first character table low address
0002AAr 2  84 73        	STY	ut2_pl		; save pointer low byte
0002ACr 2  A0 rr        	LDY	#>TAB_1STC		; get keyword first character table high address
0002AEr 2  84 74        	STY	ut2_ph		; save pointer high byte
0002B0r 2  A0 00        	LDY	#$00			; clear table pointer
0002B2r 2               
0002B2r 2               LAB_13D0
0002B2r 2  D1 73        	CMP	(ut2_pl),Y		; compare with keyword first character table byte
0002B4r 2  F0 05        	BEQ	LAB_13D1		; go do word_table_chr if match
0002B6r 2               
0002B6r 2  90 21        	BCC	LAB_13EA		; if < keyword first character table byte go restore
0002B8r 2               					; Y and save to crunched
0002B8r 2               
0002B8r 2  C8           	INY				; else increment pointer
0002B9r 2  D0 F7        	BNE	LAB_13D0		; and loop (branch always)
0002BBr 2               
0002BBr 2               ; have matched first character of some keyword
0002BBr 2               
0002BBr 2               LAB_13D1
0002BBr 2  98           	TYA				; copy matching index
0002BCr 2  0A           	ASL				; *2 (bytes per pointer)
0002BDr 2  AA           	TAX				; copy to new index
0002BEr 2  BD rr rr     	LDA	TAB_CHRT,X		; get keyword table pointer low byte
0002C1r 2  85 73        	STA	ut2_pl		; save pointer low byte
0002C3r 2  BD rr rr     	LDA	TAB_CHRT+1,X	; get keyword table pointer high byte
0002C6r 2  85 74        	STA	ut2_ph		; save pointer high byte
0002C8r 2               
0002C8r 2  A0 FF        	LDY	#$FF			; clear table pointer (make -1 for start)
0002CAr 2               
0002CAr 2  A6 78        	LDX	TempB			; restore buffer read index
0002CCr 2               
0002CCr 2               LAB_13D6
0002CCr 2  C8           	INY				; next table byte
0002CDr 2  B1 73        	LDA	(ut2_pl),Y		; get byte from table
0002CFr 2               LAB_13D8
0002CFr 2  30 08        	BMI	LAB_13EA		; all bytes matched so go save token
0002D1r 2               
0002D1r 2  E8           	INX				; next buffer byte
0002D2r 2  DD 21 03     	CMP	Ibuffs,X		; compare with byte from input buffer
0002D5r 2  F0 F5        	BEQ	LAB_13D6		; go compare next if match
0002D7r 2               
0002D7r 2  D0 2B        	BNE	LAB_1417		; branch if >< (not found keyword)
0002D9r 2               
0002D9r 2               LAB_13EA
0002D9r 2  A4 BA        	LDY	csidx			; restore save index
0002DBr 2               
0002DBr 2               					; save crunched to output
0002DBr 2               LAB_13EC
0002DBr 2  E8           	INX				; increment buffer index (to next input byte)
0002DCr 2  C8           	INY				; increment save index (to next output byte)
0002DDr 2  99 21 03     	STA	Ibuffs,Y		; save byte to output
0002E0r 2  C9 00        	CMP	#$00			; set the flags, set carry
0002E2r 2  F0 32        	BEQ	LAB_142A		; do exit if was null [EOL]
0002E4r 2               
0002E4r 2               					; A holds token or byte here
0002E4r 2  E9 3A        	SBC	#':'			; subtract ":" (carry set by CMP #00)
0002E6r 2  F0 04        	BEQ	LAB_13FF		; branch if it was ":" (is now $00)
0002E8r 2               
0002E8r 2               					; A now holds token-$3A
0002E8r 2  C9 49        	CMP	#TK_DATA-$3A	; compare with DATA token - $3A
0002EAr 2  D0 02        	BNE	LAB_1401		; branch if not DATA
0002ECr 2               
0002ECr 2               					; token was : or DATA
0002ECr 2               LAB_13FF
0002ECr 2  85 60        	STA	Oquote		; save token-$3A (clear for ":", TK_DATA-$3A for DATA)
0002EEr 2               LAB_1401
0002EEr 2  49 57        	EOR	#TK_REM-$3A		; effectively subtract REM token offset
0002F0r 2  D0 93        	BNE	LAB_13AC		; If wasn't REM then go crunch rest of line
0002F2r 2               
0002F2r 2  85 5C        	STA	Asrch			; else was REM so set search for [EOL]
0002F4r 2               
0002F4r 2               					; loop for REM, "..." etc.
0002F4r 2               LAB_1408
0002F4r 2  BD 21 03     	LDA	Ibuffs,X		; get byte from input buffer
0002F7r 2  F0 E2        	BEQ	LAB_13EC		; branch if null [EOL]
0002F9r 2               
0002F9r 2  C5 5C        	CMP	Asrch			; compare with stored character
0002FBr 2  F0 DE        	BEQ	LAB_13EC		; branch if match (end quote)
0002FDr 2               
0002FDr 2               					; entry for copy string in quotes, don't crunch
0002FDr 2               LAB_1410
0002FDr 2  C8           	INY				; increment buffer save index
0002FEr 2  99 21 03     	STA	Ibuffs,Y		; save byte to output
000301r 2  E8           	INX				; increment buffer read index
000302r 2  D0 F0        	BNE	LAB_1408		; loop while <> 0 (should never be 0!)
000304r 2               
000304r 2               					; not found keyword this go
000304r 2               LAB_1417
000304r 2  A6 78        	LDX	TempB			; compare has failed, restore buffer index (start byte!)
000306r 2               
000306r 2               					; now find the end of this word in the table
000306r 2               LAB_141B
000306r 2  B1 73        	LDA	(ut2_pl),Y		; get table byte
000308r 2  08           	PHP				; save status
000309r 2  C8           	INY				; increment table index
00030Ar 2  28           	PLP				; restore byte status
00030Br 2  10 F9        	BPL	LAB_141B		; if not end of keyword go do next
00030Dr 2               
00030Dr 2  B1 73        	LDA	(ut2_pl),Y		; get byte from keyword table
00030Fr 2  D0 BE        	BNE	LAB_13D8		; go test next word if not zero byte (end of table)
000311r 2               
000311r 2               					; reached end of table with no match
000311r 2  BD 21 03     	LDA	Ibuffs,X		; restore byte from input buffer
000314r 2  10 C3        	BPL	LAB_13EA		; branch always (all bytes in buffer are $00-$7F)
000316r 2               					; go save byte in output and continue crunching
000316r 2               
000316r 2               					; reached [EOL]
000316r 2               LAB_142A
000316r 2  C8           	INY				; increment pointer
000317r 2  C8           	INY				; increment pointer (makes it next line pointer high byte)
000318r 2  99 21 03     	STA	Ibuffs,Y		; save [EOL] (marks [EOT] in immediate mode)
00031Br 2  C8           	INY				; adjust for line copy
00031Cr 2  C8           	INY				; adjust for line copy
00031Dr 2  C8           	INY				; adjust for line copy
00031Er 2  C6 C3        	DEC	Bpntrl		; allow for increment (change if buffer starts at $xxFF)
000320r 2  60           	RTS
000321r 2               
000321r 2               ; search Basic for temp integer line number from start of mem
000321r 2               
000321r 2               LAB_SSLN
000321r 2  A5 79        	LDA	Smeml			; get start of mem low byte
000323r 2  A6 7A        	LDX	Smemh			; get start of mem high byte
000325r 2               
000325r 2               ; search Basic for temp integer line number from AX
000325r 2               ; returns carry set if found
000325r 2               ; returns Baslnl/Baslnh pointer to found or next higher (not found) line
000325r 2               
000325r 2               ; old 541 new 507
000325r 2               
000325r 2               LAB_SHLN
000325r 2  A0 01        	LDY	#$01			; set index
000327r 2  85 AA        	STA	Baslnl		; save low byte as current
000329r 2  86 AB        	STX	Baslnh		; save high byte as current
00032Br 2  B1 AA        	LDA	(Baslnl),Y		; get pointer high byte from addr
00032Dr 2  F0 1A        	BEQ	LAB_145F		; pointer was zero so we're done, do 'not found' exit
00032Fr 2               
00032Fr 2  A0 03        	LDY	#$03			; set index to line # high byte
000331r 2  B1 AA        	LDA	(Baslnl),Y		; get line # high byte
000333r 2  88           	DEY				; decrement index (point to low byte)
000334r 2  C5 12        	CMP	Itemph		; compare with temporary integer high byte
000336r 2  D0 04        	BNE	LAB_1455		; if <> skip low byte check
000338r 2               
000338r 2  B1 AA        	LDA	(Baslnl),Y		; get line # low byte
00033Ar 2  C5 11        	CMP	Itempl		; compare with temporary integer low byte
00033Cr 2               LAB_1455
00033Cr 2  B0 09        	BCS	LAB_145E		; else if temp < this line, exit (passed line#)
00033Er 2               
00033Er 2               LAB_1456
00033Er 2  88           	DEY				; decrement index to next line ptr high byte
00033Fr 2  B1 AA        	LDA	(Baslnl),Y		; get next line pointer high byte
000341r 2  AA           	TAX				; copy to X
000342r 2  88           	DEY				; decrement index to next line ptr low byte
000343r 2  B1 AA        	LDA	(Baslnl),Y		; get next line pointer low byte
000345r 2  90 DE        	BCC	LAB_SHLN		; go search for line # in temp (Itempl/Itemph) from AX
000347r 2               					; (carry always clear)
000347r 2               
000347r 2               LAB_145E
000347r 2  F0 01        	BEQ	LAB_1460		; exit if temp = found line #, carry is set
000349r 2               
000349r 2               LAB_145F
000349r 2  18           	CLC				; clear found flag
00034Ar 2               LAB_1460
00034Ar 2  60           	RTS
00034Br 2               
00034Br 2               ; perform NEW
00034Br 2               
00034Br 2               LAB_NEW
00034Br 2  D0 FD        	BNE	LAB_1460		; exit if not end of statement (to do syntax error)
00034Dr 2               
00034Dr 2               LAB_1463
00034Dr 2  A9 00        	LDA	#$00			; clear A
00034Fr 2  A8           	TAY				; clear Y
000350r 2  91 79        	STA	(Smeml),Y		; clear first line, next line pointer, low byte
000352r 2  C8           	INY				; increment index
000353r 2  91 79        	STA	(Smeml),Y		; clear first line, next line pointer, high byte
000355r 2  18           	CLC				; clear carry
000356r 2  A5 79        	LDA	Smeml			; get start of mem low byte
000358r 2  69 02        	ADC	#$02			; calculate end of BASIC low byte
00035Ar 2  85 7B        	STA	Svarl			; save start of vars low byte
00035Cr 2  A5 7A        	LDA	Smemh			; get start of mem high byte
00035Er 2  69 00        	ADC	#$00			; add any carry
000360r 2  85 7C        	STA	Svarh			; save start of vars high byte
000362r 2               
000362r 2               ; reset execution to start, clear vars and flush stack
000362r 2               
000362r 2               LAB_1477
000362r 2  18           	CLC				; clear carry
000363r 2  A5 79        	LDA	Smeml			; get start of mem low byte
000365r 2  69 FF        	ADC	#$FF			; -1
000367r 2  85 C3        	STA	Bpntrl		; save BASIC execute pointer low byte
000369r 2  A5 7A        	LDA	Smemh			; get start of mem high byte
00036Br 2  69 FF        	ADC	#$FF			; -1+carry
00036Dr 2  85 C4        	STA	Bpntrh		; save BASIC execute pointer high byte
00036Fr 2               
00036Fr 2               ; "CLEAR" command gets here
00036Fr 2               
00036Fr 2               LAB_147A
00036Fr 2  A5 85        	LDA	Ememl			; get end of mem low byte
000371r 2  A4 86        	LDY	Ememh			; get end of mem high byte
000373r 2  85 81        	STA	Sstorl		; set bottom of string space low byte
000375r 2  84 82        	STY	Sstorh		; set bottom of string space high byte
000377r 2  A5 7B        	LDA	Svarl			; get start of vars low byte
000379r 2  A4 7C        	LDY	Svarh			; get start of vars high byte
00037Br 2  85 7D        	STA	Sarryl		; save var mem end low byte
00037Dr 2  84 7E        	STY	Sarryh		; save var mem end high byte
00037Fr 2  85 7F        	STA	Earryl		; save array mem end low byte
000381r 2  84 80        	STY	Earryh		; save array mem end high byte
000383r 2  20 rr rr     	JSR	LAB_161A		; perform RESTORE command
000386r 2               
000386r 2               ; flush stack and clear continue flag
000386r 2               
000386r 2               LAB_1491
000386r 2  A2 68        	LDX	#des_sk		; set descriptor stack pointer
000388r 2  86 65        	STX	next_s		; save descriptor stack pointer
00038Ar 2  68           	PLA				; pull return address low byte
00038Br 2  AA           	TAX				; copy return address low byte
00038Cr 2  68           	PLA				; pull return address high byte
00038Dr 2  8E FE 01     	STX	LAB_SKFE		; save to cleared stack
000390r 2  8D FF 01     	STA	LAB_SKFF		; save to cleared stack
000393r 2  A2 FD        	LDX	#$FD			; new stack pointer
000395r 2  9A           	TXS				; reset stack
000396r 2  A9 00        	LDA	#$00			; clear byte
000398r 2  85 8C        	STA	Cpntrh		; clear continue pointer high byte
00039Ar 2  85 61        	STA	Sufnxf		; clear subscript/FNX flag
00039Cr 2               LAB_14A6
00039Cr 2  60           	RTS
00039Dr 2               
00039Dr 2               ; perform CLEAR
00039Dr 2               
00039Dr 2               LAB_CLEAR
00039Dr 2  F0 D0        	BEQ	LAB_147A		; if no following token go do "CLEAR"
00039Fr 2               
00039Fr 2               					; else there was a following token (go do syntax error)
00039Fr 2  60           	RTS
0003A0r 2               
0003A0r 2               ; perform LIST [n][-m]
0003A0r 2               ; bigger, faster version (a _lot_ faster)
0003A0r 2               
0003A0r 2               LAB_LIST
0003A0r 2  90 06        	BCC	LAB_14BD		; branch if next character numeric (LIST n..)
0003A2r 2               
0003A2r 2  F0 04        	BEQ	LAB_14BD		; branch if next character [NULL] (LIST)
0003A4r 2               
0003A4r 2  C9 B7        	CMP	#TK_MINUS		; compare with token for -
0003A6r 2  D0 F4        	BNE	LAB_14A6		; exit if not - (LIST -m)
0003A8r 2               
0003A8r 2               					; LIST [[n][-m]]
0003A8r 2               					; this bit sets the n , if present, as the start and end
0003A8r 2               LAB_14BD
0003A8r 2  20 rr rr     	JSR	LAB_GFPN		; get fixed-point number into temp integer
0003ABr 2  20 rr rr     	JSR	LAB_SSLN		; search BASIC for temp integer line number
0003AEr 2               					; (pointer in Baslnl/Baslnh)
0003AEr 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
0003B1r 2  F0 0C        	BEQ	LAB_14D4		; branch if no more characters
0003B3r 2               
0003B3r 2               					; this bit checks the - is present
0003B3r 2  C9 B7        	CMP	#TK_MINUS		; compare with token for -
0003B5r 2  D0 93        	BNE	LAB_1460		; return if not "-" (will be Syntax error)
0003B7r 2               
0003B7r 2               					; LIST [n]-m
0003B7r 2               					; the - was there so set m as the end value
0003B7r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
0003BAr 2  20 rr rr     	JSR	LAB_GFPN		; get fixed-point number into temp integer
0003BDr 2  D0 8B        	BNE	LAB_1460		; exit if not ok
0003BFr 2               
0003BFr 2               LAB_14D4
0003BFr 2  A5 11        	LDA	Itempl		; get temporary integer low byte
0003C1r 2  05 12        	ORA	Itemph		; OR temporary integer high byte
0003C3r 2  D0 06        	BNE	LAB_14E2		; branch if start set
0003C5r 2               
0003C5r 2  A9 FF        	LDA	#$FF			; set for -1
0003C7r 2  85 11        	STA	Itempl		; set temporary integer low byte
0003C9r 2  85 12        	STA	Itemph		; set temporary integer high byte
0003CBr 2               LAB_14E2
0003CBr 2  A0 01        	LDY	#$01			; set index for line
0003CDr 2  84 60        	STY	Oquote		; clear open quote flag
0003CFr 2  20 rr rr     	JSR	LAB_CRLF		; print CR/LF
0003D2r 2  B1 AA        	LDA	(Baslnl),Y		; get next line pointer high byte
0003D4r 2               					; pointer initially set by search at LAB_14BD
0003D4r 2  F0 3E        	BEQ	LAB_152B		; if null all done so exit
0003D6r 2  20 rr rr     	JSR	LAB_1629		; do CRTL-C check vector
0003D9r 2               
0003D9r 2  C8           	INY				; increment index for line
0003DAr 2  B1 AA        	LDA	(Baslnl),Y		; get line # low byte
0003DCr 2  AA           	TAX				; copy to X
0003DDr 2  C8           	INY				; increment index
0003DEr 2  B1 AA        	LDA	(Baslnl),Y		; get line # high byte
0003E0r 2  C5 12        	CMP	Itemph		; compare with temporary integer high byte
0003E2r 2  D0 04        	BNE	LAB_14FF		; branch if no high byte match
0003E4r 2               
0003E4r 2  E4 11        	CPX	Itempl		; compare with temporary integer low byte
0003E6r 2  F0 02        	BEQ	LAB_1501		; branch if = last line to do (< will pass next branch)
0003E8r 2               
0003E8r 2               LAB_14FF				; else ..
0003E8r 2  B0 2A        	BCS	LAB_152B		; if greater all done so exit
0003EAr 2               
0003EAr 2               LAB_1501
0003EAr 2  84 97        	STY	Tidx1			; save index for line
0003ECr 2  20 rr rr     	JSR	LAB_295E		; print XA as unsigned integer
0003EFr 2  A9 20        	LDA	#$20			; space is the next character
0003F1r 2               LAB_1508
0003F1r 2  A4 97        	LDY	Tidx1			; get index for line
0003F3r 2  29 7F        	AND	#$7F			; mask top out bit of character
0003F5r 2               LAB_150C
0003F5r 2  20 rr rr     	JSR	LAB_PRNA		; go print the character
0003F8r 2  C9 22        	CMP	#$22			; was it " character
0003FAr 2  D0 06        	BNE	LAB_1519		; branch if not
0003FCr 2               
0003FCr 2               					; we are either entering or leaving a pair of quotes
0003FCr 2  A5 60        	LDA	Oquote		; get open quote flag
0003FEr 2  49 FF        	EOR	#$FF			; toggle it
000400r 2  85 60        	STA	Oquote		; save it back
000402r 2               LAB_1519
000402r 2  C8           	INY				; increment index
000403r 2  B1 AA        	LDA	(Baslnl),Y		; get next byte
000405r 2  D0 0E        	BNE	LAB_152E		; branch if not [EOL] (go print character)
000407r 2  A8           	TAY				; else clear index
000408r 2  B1 AA        	LDA	(Baslnl),Y		; get next line pointer low byte
00040Ar 2  AA           	TAX				; copy to X
00040Br 2  C8           	INY				; increment index
00040Cr 2  B1 AA        	LDA	(Baslnl),Y		; get next line pointer high byte
00040Er 2  86 AA        	STX	Baslnl		; set pointer to line low byte
000410r 2  85 AB        	STA	Baslnh		; set pointer to line high byte
000412r 2  D0 B7        	BNE	LAB_14E2		; go do next line if not [EOT]
000414r 2               					; else ..
000414r 2               LAB_152B
000414r 2  60           	RTS
000415r 2               
000415r 2               LAB_152E
000415r 2  10 DE        	BPL	LAB_150C		; just go print it if not token byte
000417r 2               
000417r 2               					; else was token byte so uncrunch it (maybe)
000417r 2  24 60        	BIT	Oquote		; test the open quote flag
000419r 2  30 DA        	BMI	LAB_150C		; just go print character if open quote set
00041Br 2               
00041Br 2  A2 rr        	LDX	#>LAB_KEYT		; get table address high byte
00041Dr 2  0A           	ASL				; *2
00041Er 2  0A           	ASL				; *4
00041Fr 2  90 02        	BCC	LAB_152F		; branch if no carry
000421r 2               
000421r 2  E8           	INX				; else increment high byte
000422r 2  18           	CLC				; clear carry for add
000423r 2               LAB_152F
000423r 2  69 rr        	ADC	#<LAB_KEYT		; add low byte
000425r 2  90 01        	BCC	LAB_1530		; branch if no carry
000427r 2               
000427r 2  E8           	INX				; else increment high byte
000428r 2               LAB_1530
000428r 2  85 73        	STA	ut2_pl		; save table pointer low byte
00042Ar 2  86 74        	STX	ut2_ph		; save table pointer high byte
00042Cr 2  84 97        	STY	Tidx1			; save index for line
00042Er 2  A0 00        	LDY	#$00			; clear index
000430r 2  B1 73        	LDA	(ut2_pl),Y		; get length
000432r 2  AA           	TAX				; copy length
000433r 2  C8           	INY				; increment index
000434r 2  B1 73        	LDA	(ut2_pl),Y		; get 1st character
000436r 2  CA           	DEX				; decrement length
000437r 2  F0 B8        	BEQ	LAB_1508		; if no more characters exit and print
000439r 2               
000439r 2  20 rr rr     	JSR	LAB_PRNA		; go print the character
00043Cr 2  C8           	INY				; increment index
00043Dr 2  B1 73        	LDA	(ut2_pl),Y		; get keyword address low byte
00043Fr 2  48           	PHA				; save it for now
000440r 2  C8           	INY				; increment index
000441r 2  B1 73        	LDA	(ut2_pl),Y		; get keyword address high byte
000443r 2  A0 00        	LDY	#$00
000445r 2  85 74        	STA	ut2_ph		; save keyword pointer high byte
000447r 2  68           	PLA				; pull low byte
000448r 2  85 73        	STA	ut2_pl		; save keyword pointer low byte
00044Ar 2               LAB_1540
00044Ar 2  B1 73        	LDA	(ut2_pl),Y		; get character
00044Cr 2  CA           	DEX				; decrement character count
00044Dr 2  F0 A2        	BEQ	LAB_1508		; if last character exit and print
00044Fr 2               
00044Fr 2  20 rr rr     	JSR	LAB_PRNA		; go print the character
000452r 2  C8           	INY				; increment index
000453r 2  D0 F5        	BNE	LAB_1540		; loop for next character
000455r 2               
000455r 2               ; perform FOR
000455r 2               
000455r 2               LAB_FOR
000455r 2  A9 80        	LDA	#$80			; set FNX
000457r 2  85 61        	STA	Sufnxf		; set subscript/FNX flag
000459r 2  20 rr rr     	JSR	LAB_LET		; go do LET
00045Cr 2  68           	PLA				; pull return address
00045Dr 2  68           	PLA				; pull return address
00045Er 2  A9 10        	LDA	#$10			; we need 16d bytes !
000460r 2  20 rr rr     	JSR	LAB_1212		; check room on stack for A bytes
000463r 2  20 rr rr     	JSR	LAB_SNBS		; scan for next BASIC statement ([:] or [EOL])
000466r 2  18           	CLC				; clear carry for add
000467r 2  98           	TYA				; copy index to A
000468r 2  65 C3        	ADC	Bpntrl		; add BASIC execute pointer low byte
00046Ar 2  48           	PHA				; push onto stack
00046Br 2  A5 C4        	LDA	Bpntrh		; get BASIC execute pointer high byte
00046Dr 2  69 00        	ADC	#$00			; add carry
00046Fr 2  48           	PHA				; push onto stack
000470r 2  A5 88        	LDA	Clineh		; get current line high byte
000472r 2  48           	PHA				; push onto stack
000473r 2  A5 87        	LDA	Clinel		; get current line low byte
000475r 2  48           	PHA				; push onto stack
000476r 2  A9 AD        	LDA	#TK_TO		; get "TO" token
000478r 2  20 rr rr     	JSR	LAB_SCCA		; scan for CHR$(A) , else do syntax error then warm start
00047Br 2  20 rr rr     	JSR	LAB_CTNM		; check if source is numeric, else do type mismatch
00047Er 2  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
000481r 2               					; else do type mismatch
000481r 2  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
000483r 2  09 7F        	ORA	#$7F			; set all non sign bits
000485r 2  25 AD        	AND	FAC1_1		; and FAC1 mantissa1
000487r 2  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
000489r 2  A9 rr        	LDA	#<LAB_159F		; set return address low byte
00048Br 2  A0 rr        	LDY	#>LAB_159F		; set return address high byte
00048Dr 2  85 71        	STA	ut1_pl		; save return address low byte
00048Fr 2  84 72        	STY	ut1_ph		; save return address high byte
000491r 2  4C rr rr     	JMP	LAB_1B66		; round FAC1 and put on stack (returns to next instruction)
000494r 2               
000494r 2               LAB_159F
000494r 2  A9 rr        	LDA	#<LAB_259C		; set 1 pointer low addr (default step size)
000496r 2  A0 rr        	LDY	#>LAB_259C		; set 1 pointer high addr
000498r 2  20 rr rr     	JSR	LAB_UFAC		; unpack memory (AY) into FAC1
00049Br 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
00049Er 2  C9 B2        	CMP	#TK_STEP		; compare with STEP token
0004A0r 2  D0 06        	BNE	LAB_15B3		; jump if not "STEP"
0004A2r 2               
0004A2r 2               					;.was step so ..
0004A2r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
0004A5r 2  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
0004A8r 2               					; else do type mismatch
0004A8r 2               LAB_15B3
0004A8r 2  20 rr rr     	JSR	LAB_27CA		; return A=FF,C=1/-ve A=01,C=0/+ve
0004ABr 2  85 B0        	STA	FAC1_s		; set FAC1 sign (b7)
0004ADr 2               					; this is +1 for +ve step and -1 for -ve step, in NEXT we
0004ADr 2               					; compare the FOR value and the TO value and return +1 if
0004ADr 2               					; FOR > TO, 0 if FOR = TO and -1 if FOR < TO. the value
0004ADr 2               					; here (+/-1) is then compared to that result and if they
0004ADr 2               					; are the same (+ve and FOR > TO or -ve and FOR < TO) then
0004ADr 2               					; the loop is done
0004ADr 2  20 rr rr     	JSR	LAB_1B5B		; push sign, round FAC1 and put on stack
0004B0r 2  A5 98        	LDA	Frnxth		; get var pointer for FOR/NEXT high byte
0004B2r 2  48           	PHA				; push on stack
0004B3r 2  A5 97        	LDA	Frnxtl		; get var pointer for FOR/NEXT low byte
0004B5r 2  48           	PHA				; push on stack
0004B6r 2  A9 81        	LDA	#TK_FOR		; get FOR token
0004B8r 2  48           	PHA				; push on stack
0004B9r 2               
0004B9r 2               ; interpreter inner loop
0004B9r 2               
0004B9r 2               LAB_15C2
0004B9r 2  20 rr rr     	JSR	LAB_1629		; do CRTL-C check vector
0004BCr 2  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte
0004BEr 2  A4 C4        	LDY	Bpntrh		; get BASIC execute pointer high byte
0004C0r 2               
0004C0r 2  A6 88        	LDX	Clineh		; continue line is $FFxx for immediate mode
0004C2r 2               					; ($00xx for RUN from immediate mode)
0004C2r 2  E8           	INX				; increment it (now $00 if immediate mode)
0004C3r 2  F0 04        	BEQ	LAB_15D1		; branch if null (immediate mode)
0004C5r 2               
0004C5r 2  85 8B        	STA	Cpntrl		; save continue pointer low byte
0004C7r 2  84 8C        	STY	Cpntrh		; save continue pointer high byte
0004C9r 2               LAB_15D1
0004C9r 2  A0 00        	LDY	#$00			; clear index
0004CBr 2  B1 C3        	LDA	(Bpntrl),Y		; get next byte
0004CDr 2  F0 07        	BEQ	LAB_15DC		; branch if null [EOL]
0004CFr 2               
0004CFr 2  C9 3A        	CMP	#':'			; compare with ":"
0004D1r 2  F0 1D        	BEQ	LAB_15F6		; branch if = (statement separator)
0004D3r 2               
0004D3r 2               LAB_15D9
0004D3r 2  4C rr rr     	JMP	LAB_SNER		; else syntax error then warm start
0004D6r 2               
0004D6r 2               					; have reached [EOL]
0004D6r 2               LAB_15DC
0004D6r 2  A0 02        	LDY	#$02			; set index
0004D8r 2  B1 C3        	LDA	(Bpntrl),Y		; get next line pointer high byte
0004DAr 2  18           	CLC				; clear carry for no "BREAK" message
0004DBr 2  F0 56        	BEQ	LAB_1651		; if null go to immediate mode (was immediate or [EOT]
0004DDr 2               					; marker)
0004DDr 2               
0004DDr 2  C8           	INY				; increment index
0004DEr 2  B1 C3        	LDA	(Bpntrl),Y		; get line # low byte
0004E0r 2  85 87        	STA	Clinel		; save current line low byte
0004E2r 2  C8           	INY				; increment index
0004E3r 2  B1 C3        	LDA	(Bpntrl),Y		; get line # high byte
0004E5r 2  85 88        	STA	Clineh		; save current line high byte
0004E7r 2  98           	TYA				; A now = 4
0004E8r 2  65 C3        	ADC	Bpntrl		; add BASIC execute pointer low byte
0004EAr 2  85 C3        	STA	Bpntrl		; save BASIC execute pointer low byte
0004ECr 2  90 02        	BCC	LAB_15F6		; branch if no overflow
0004EEr 2               
0004EEr 2  E6 C4        	INC	Bpntrh		; else increment BASIC execute pointer high byte
0004F0r 2               LAB_15F6
0004F0r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
0004F3r 2               
0004F3r 2               LAB_15F9
0004F3r 2  20 rr rr     	JSR	LAB_15FF		; go interpret BASIC code from (Bpntrl)
0004F6r 2               
0004F6r 2               LAB_15FC
0004F6r 2  4C rr rr     	JMP	LAB_15C2		; loop
0004F9r 2               
0004F9r 2               ; interpret BASIC code from (Bpntrl)
0004F9r 2               
0004F9r 2               LAB_15FF
0004F9r 2  F0 54        	BEQ	LAB_1628		; exit if zero [EOL]
0004FBr 2               
0004FBr 2               LAB_1602
0004FBr 2  0A           	ASL				; *2 bytes per vector and normalise token
0004FCr 2  B0 03        	BCS	LAB_1609		; branch if was token
0004FEr 2               
0004FEr 2  4C rr rr     	JMP	LAB_LET		; else go do implied LET
000501r 2               
000501r 2               LAB_1609
000501r 2  C9 56        	CMP	#(TK_TAB-$80)*2	; compare normalised token * 2 with TAB
000503r 2  B0 CE        	BCS	LAB_15D9		; branch if A>=TAB (do syntax error then warm start)
000505r 2               					; only tokens before TAB can start a line
000505r 2  A8           	TAY				; copy to index
000506r 2  B9 rr rr     	LDA	LAB_CTBL+1,Y	; get vector high byte
000509r 2  48           	PHA				; onto stack
00050Ar 2  B9 rr rr     	LDA	LAB_CTBL,Y		; get vector low byte
00050Dr 2  48           	PHA				; onto stack
00050Er 2  4C BC 00     	JMP	LAB_IGBY		; jump to increment and scan memory
000511r 2               					; then "return" to vector
000511r 2               
000511r 2               ; CTRL-C check jump. this is called as a subroutine but exits back via a jump if a
000511r 2               ; key press is detected.
000511r 2               
000511r 2               LAB_1629
000511r 2  6C 03 03     	JMP	(VEC_CC)		; ctrl c check vector
000514r 2               
000514r 2               ; if there was a key press it gets back here ..
000514r 2               
000514r 2               LAB_1636
000514r 2  C9 03        	CMP	#$03			; compare with CTRL-C
000516r 2               
000516r 2               ; perform STOP
000516r 2               
000516r 2               LAB_STOP
000516r 2  B0 01        	BCS	LAB_163B		; branch if token follows STOP
000518r 2               					; else just END
000518r 2               ; END
000518r 2               
000518r 2               LAB_END
000518r 2  18           	CLC				; clear the carry, indicate a normal program end
000519r 2               LAB_163B
000519r 2  D0 67        	BNE	LAB_167A		; if wasn't CTRL-C or there is a following byte return
00051Br 2               
00051Br 2  A5 C4        	LDA	Bpntrh		; get the BASIC execute pointer high byte
00051Dr 2  49 03        	EOR	#>Ibuffs		; compare with buffer address high byte (Cb unchanged)
00051Fr 2  F0 10        	BEQ	LAB_164F		; branch if the BASIC pointer is in the input buffer
000521r 2               					; (can't continue in immediate mode)
000521r 2               
000521r 2               					; else ..
000521r 2  49 03        	EOR	#>Ibuffs		; correct the bits
000523r 2  A4 C3        	LDY	Bpntrl		; get BASIC execute pointer low byte
000525r 2  84 8B        	STY	Cpntrl		; save continue pointer low byte
000527r 2  85 8C        	STA	Cpntrh		; save continue pointer high byte
000529r 2               LAB_1647
000529r 2  A5 87        	LDA	Clinel		; get current line low byte
00052Br 2  A4 88        	LDY	Clineh		; get current line high byte
00052Dr 2  85 89        	STA	Blinel		; save break line low byte
00052Fr 2  84 8A        	STY	Blineh		; save break line high byte
000531r 2               LAB_164F
000531r 2  68           	PLA				; pull return address low
000532r 2  68           	PLA				; pull return address high
000533r 2               LAB_1651
000533r 2  90 07        	BCC	LAB_165E		; if was program end just do warm start
000535r 2               
000535r 2               					; else ..
000535r 2  A9 rr        	LDA	#<LAB_BMSG		; point to "Break" low byte
000537r 2  A0 rr        	LDY	#>LAB_BMSG		; point to "Break" high byte
000539r 2  4C rr rr     	JMP	LAB_1269		; print "Break" and do warm start
00053Cr 2               
00053Cr 2               LAB_165E
00053Cr 2  4C rr rr     	JMP	LAB_1274		; go do warm start
00053Fr 2               
00053Fr 2               ; perform RESTORE
00053Fr 2               
00053Fr 2               LAB_RESTORE
00053Fr 2  D0 0F        	BNE	LAB_RESTOREn	; branch if next character not null (RESTORE n)
000541r 2               
000541r 2               LAB_161A
000541r 2  38           	SEC				; set carry for subtract
000542r 2  A5 79        	LDA	Smeml			; get start of mem low byte
000544r 2  E9 01        	SBC	#$01			; -1
000546r 2  A4 7A        	LDY	Smemh			; get start of mem high byte
000548r 2  B0 01        	BCS	LAB_1624		; branch if no underflow
00054Ar 2               
00054Ar 2               LAB_uflow
00054Ar 2  88           	DEY				; else decrement high byte
00054Br 2               LAB_1624
00054Br 2  85 8F        	STA	Dptrl			; save DATA pointer low byte
00054Dr 2  84 90        	STY	Dptrh			; save DATA pointer high byte
00054Fr 2               LAB_1628
00054Fr 2  60           	RTS
000550r 2               
000550r 2               					; is RESTORE n
000550r 2               LAB_RESTOREn
000550r 2  20 rr rr     	JSR	LAB_GFPN		; get fixed-point number into temp integer
000553r 2  20 rr rr     	JSR	LAB_SNBL		; scan for next BASIC line
000556r 2  A5 88        	LDA	Clineh		; get current line high byte
000558r 2  C5 12        	CMP	Itemph		; compare with temporary integer high byte
00055Ar 2  B0 0B        	BCS	LAB_reset_search	; branch if >= (start search from beginning)
00055Cr 2               
00055Cr 2  98           	TYA				; else copy line index to A
00055Dr 2  38           	SEC				; set carry (+1)
00055Er 2  65 C3        	ADC	Bpntrl		; add BASIC execute pointer low byte
000560r 2  A6 C4        	LDX	Bpntrh		; get BASIC execute pointer high byte
000562r 2  90 07        	BCC	LAB_go_search	; branch if no overflow to high byte
000564r 2               
000564r 2  E8           	INX				; increment high byte
000565r 2  B0 04        	BCS	LAB_go_search	; branch always (can never be carry clear)
000567r 2               
000567r 2               ; search for line # in temp (Itempl/Itemph) from start of mem pointer (Smeml)
000567r 2               
000567r 2               LAB_reset_search
000567r 2  A5 79        	LDA	Smeml			; get start of mem low byte
000569r 2  A6 7A        	LDX	Smemh			; get start of mem high byte
00056Br 2               
00056Br 2               ; search for line # in temp (Itempl/Itemph) from (AX)
00056Br 2               
00056Br 2               LAB_go_search
00056Br 2               
00056Br 2  20 rr rr     	JSR	LAB_SHLN		; search Basic for temp integer line number from AX
00056Er 2  B0 03        	BCS	LAB_line_found	; if carry set go set pointer
000570r 2               
000570r 2  4C rr rr     	JMP	LAB_16F7		; else go do "Undefined statement" error
000573r 2               
000573r 2               LAB_line_found
000573r 2               					; carry already set for subtract
000573r 2  A5 AA        	LDA	Baslnl		; get pointer low byte
000575r 2  E9 01        	SBC	#$01			; -1
000577r 2  A4 AB        	LDY	Baslnh		; get pointer high byte
000579r 2  B0 D0        	BCS	LAB_1624		; branch if no underflow (save DATA pointer and return)
00057Br 2               
00057Br 2  90 CD        	BCC	LAB_uflow		; else decrement high byte then save DATA pointer and
00057Dr 2               					; return (branch always)
00057Dr 2               
00057Dr 2               ; perform NULL
00057Dr 2               
00057Dr 2               LAB_NULL
00057Dr 2  20 rr rr     	JSR	LAB_GTBY		; get byte parameter
000580r 2  86 0D        	STX	Nullct		; save new NULL count
000582r 2               LAB_167A
000582r 2  60           	RTS
000583r 2               
000583r 2               ; perform CONT
000583r 2               
000583r 2               LAB_CONT
000583r 2  D0 FD        	BNE	LAB_167A		; if following byte exit to do syntax error
000585r 2               
000585r 2  A4 8C        	LDY	Cpntrh		; get continue pointer high byte
000587r 2  D0 05        	BNE	LAB_166C		; go do continue if we can
000589r 2               
000589r 2  A2 1E        	LDX	#$1E			; error code $1E ("Can't continue" error)
00058Br 2  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
00058Er 2               
00058Er 2               					; we can continue so ..
00058Er 2               LAB_166C
00058Er 2  A9 93        	LDA	#TK_ON		; set token for ON
000590r 2  20 rr rr     	JSR	LAB_IRQ		; set IRQ flags
000593r 2  A9 93        	LDA	#TK_ON		; set token for ON
000595r 2  20 rr rr     	JSR	LAB_NMI		; set NMI flags
000598r 2               
000598r 2  84 C4        	STY	Bpntrh		; save BASIC execute pointer high byte
00059Ar 2  A5 8B        	LDA	Cpntrl		; get continue pointer low byte
00059Cr 2  85 C3        	STA	Bpntrl		; save BASIC execute pointer low byte
00059Er 2  A5 89        	LDA	Blinel		; get break line low byte
0005A0r 2  A4 8A        	LDY	Blineh		; get break line high byte
0005A2r 2  85 87        	STA	Clinel		; set current line low byte
0005A4r 2  84 88        	STY	Clineh		; set current line high byte
0005A6r 2  60           	RTS
0005A7r 2               
0005A7r 2               ; perform RUN
0005A7r 2               
0005A7r 2               LAB_RUN
0005A7r 2  D0 03        	BNE	LAB_1696		; branch if RUN n
0005A9r 2  4C rr rr     	JMP	LAB_1477		; reset execution to start, clear variables, flush stack and
0005ACr 2               					; return
0005ACr 2               
0005ACr 2               ; does RUN n
0005ACr 2               
0005ACr 2               LAB_1696
0005ACr 2  20 rr rr     	JSR	LAB_147A		; go do "CLEAR"
0005AFr 2  F0 2E        	BEQ	LAB_16B0		; get n and do GOTO n (branch always as CLEAR sets Z=1)
0005B1r 2               
0005B1r 2               ; perform DO
0005B1r 2               
0005B1r 2               LAB_DO
0005B1r 2  A9 05        	LDA	#$05			; need 5 bytes for DO
0005B3r 2  20 rr rr     	JSR	LAB_1212		; check room on stack for A bytes
0005B6r 2  A5 C4        	LDA	Bpntrh		; get BASIC execute pointer high byte
0005B8r 2  48           	PHA				; push on stack
0005B9r 2  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte
0005BBr 2  48           	PHA				; push on stack
0005BCr 2  A5 88        	LDA	Clineh		; get current line high byte
0005BEr 2  48           	PHA				; push on stack
0005BFr 2  A5 87        	LDA	Clinel		; get current line low byte
0005C1r 2  48           	PHA				; push on stack
0005C2r 2  A9 9D        	LDA	#TK_DO		; token for DO
0005C4r 2  48           	PHA				; push on stack
0005C5r 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
0005C8r 2  4C rr rr     	JMP	LAB_15C2		; go do interpreter inner loop
0005CBr 2               
0005CBr 2               ; perform GOSUB
0005CBr 2               
0005CBr 2               LAB_GOSUB
0005CBr 2  A9 05        	LDA	#$05			; need 5 bytes for GOSUB
0005CDr 2  20 rr rr     	JSR	LAB_1212		; check room on stack for A bytes
0005D0r 2  A5 C4        	LDA	Bpntrh		; get BASIC execute pointer high byte
0005D2r 2  48           	PHA				; push on stack
0005D3r 2  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte
0005D5r 2  48           	PHA				; push on stack
0005D6r 2  A5 88        	LDA	Clineh		; get current line high byte
0005D8r 2  48           	PHA				; push on stack
0005D9r 2  A5 87        	LDA	Clinel		; get current line low byte
0005DBr 2  48           	PHA				; push on stack
0005DCr 2  A9 8D        	LDA	#TK_GOSUB		; token for GOSUB
0005DEr 2  48           	PHA				; push on stack
0005DFr 2               LAB_16B0
0005DFr 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
0005E2r 2  20 rr rr     	JSR	LAB_GOTO		; perform GOTO n
0005E5r 2  4C rr rr     	JMP	LAB_15C2		; go do interpreter inner loop
0005E8r 2               					; (can't RTS, we used the stack!)
0005E8r 2               
0005E8r 2               ; perform GOTO
0005E8r 2               
0005E8r 2               LAB_GOTO
0005E8r 2  20 rr rr     	JSR	LAB_GFPN		; get fixed-point number into temp integer
0005EBr 2  20 rr rr     	JSR	LAB_SNBL		; scan for next BASIC line
0005EEr 2  A5 88        	LDA	Clineh		; get current line high byte
0005F0r 2  C5 12        	CMP	Itemph		; compare with temporary integer high byte
0005F2r 2  B0 0B        	BCS	LAB_16D0		; branch if >= (start search from beginning)
0005F4r 2               
0005F4r 2  98           	TYA				; else copy line index to A
0005F5r 2  38           	SEC				; set carry (+1)
0005F6r 2  65 C3        	ADC	Bpntrl		; add BASIC execute pointer low byte
0005F8r 2  A6 C4        	LDX	Bpntrh		; get BASIC execute pointer high byte
0005FAr 2  90 07        	BCC	LAB_16D4		; branch if no overflow to high byte
0005FCr 2               
0005FCr 2  E8           	INX				; increment high byte
0005FDr 2  B0 04        	BCS	LAB_16D4		; branch always (can never be carry)
0005FFr 2               
0005FFr 2               ; search for line # in temp (Itempl/Itemph) from start of mem pointer (Smeml)
0005FFr 2               
0005FFr 2               LAB_16D0
0005FFr 2  A5 79        	LDA	Smeml			; get start of mem low byte
000601r 2  A6 7A        	LDX	Smemh			; get start of mem high byte
000603r 2               
000603r 2               ; search for line # in temp (Itempl/Itemph) from (AX)
000603r 2               
000603r 2               LAB_16D4
000603r 2  20 rr rr     	JSR	LAB_SHLN		; search Basic for temp integer line number from AX
000606r 2  90 67        	BCC	LAB_16F7		; if carry clear go do "Undefined statement" error
000608r 2               					; (unspecified statement)
000608r 2               
000608r 2               					; carry already set for subtract
000608r 2  A5 AA        	LDA	Baslnl		; get pointer low byte
00060Ar 2  E9 01        	SBC	#$01			; -1
00060Cr 2  85 C3        	STA	Bpntrl		; save BASIC execute pointer low byte
00060Er 2  A5 AB        	LDA	Baslnh		; get pointer high byte
000610r 2  E9 00        	SBC	#$00			; subtract carry
000612r 2  85 C4        	STA	Bpntrh		; save BASIC execute pointer high byte
000614r 2               LAB_16E5
000614r 2  60           	RTS
000615r 2               
000615r 2               LAB_DONOK
000615r 2  A2 22        	LDX	#$22			; error code $22 ("LOOP without DO" error)
000617r 2  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
00061Ar 2               
00061Ar 2               ; perform LOOP
00061Ar 2               
00061Ar 2               LAB_LOOP
00061Ar 2  A8           	TAY				; save following token
00061Br 2  BA           	TSX				; copy stack pointer
00061Cr 2  BD 03 01     	LDA	LAB_STAK+3,X	; get token byte from stack
00061Fr 2  C9 9D        	CMP	#TK_DO		; compare with DO token
000621r 2  D0 F2        	BNE	LAB_DONOK		; branch if no matching DO
000623r 2               
000623r 2  E8           	INX				; dump calling routine return address
000624r 2  E8           	INX				; dump calling routine return address
000625r 2  9A           	TXS				; correct stack
000626r 2  98           	TYA				; get saved following token back
000627r 2  F0 20        	BEQ	LoopAlways		; if no following token loop forever
000629r 2               					; (stack pointer in X)
000629r 2               
000629r 2  C9 3A        	CMP	#':'			; could be ':'
00062Br 2  F0 1C        	BEQ	LoopAlways		; if :... loop forever
00062Dr 2               
00062Dr 2  E9 B3        	SBC	#TK_UNTIL		; subtract token for UNTIL, we know carry is set here
00062Fr 2  AA           	TAX				; copy to X (if it was UNTIL then Y will be correct)
000630r 2  F0 04        	BEQ	DoRest		; branch if was UNTIL
000632r 2               
000632r 2  CA           	DEX				; decrement result
000633r 2  D0 62        	BNE	LAB_16FC		; if not WHILE go do syntax error and warm start
000635r 2               					; only if the token was WHILE will this fail
000635r 2               
000635r 2  CA           	DEX				; set invert result byte
000636r 2               DoRest
000636r 2  86 98        	STX	Frnxth		; save invert result byte
000638r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
00063Br 2  20 rr rr     	JSR	LAB_EVEX		; evaluate expression
00063Er 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
000640r 2  F0 02        	BEQ	DoCmp			; if =0 go do straight compare
000642r 2               
000642r 2  A9 FF        	LDA	#$FF			; else set all bits
000644r 2               DoCmp
000644r 2  BA           	TSX				; copy stack pointer
000645r 2  45 98        	EOR	Frnxth		; EOR with invert byte
000647r 2  D0 1A        	BNE	LoopDone		; if <> 0 clear stack and back to interpreter loop
000649r 2               
000649r 2               					; loop condition wasn't met so do it again
000649r 2               LoopAlways
000649r 2  BD 02 01     	LDA	LAB_STAK+2,X	; get current line low byte
00064Cr 2  85 87        	STA	Clinel		; save current line low byte
00064Er 2  BD 03 01     	LDA	LAB_STAK+3,X	; get current line high byte
000651r 2  85 88        	STA	Clineh		; save current line high byte
000653r 2  BD 04 01     	LDA	LAB_STAK+4,X	; get BASIC execute pointer low byte
000656r 2  85 C3        	STA	Bpntrl		; save BASIC execute pointer low byte
000658r 2  BD 05 01     	LDA	LAB_STAK+5,X	; get BASIC execute pointer high byte
00065Br 2  85 C4        	STA	Bpntrh		; save BASIC execute pointer high byte
00065Dr 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
000660r 2  4C rr rr     	JMP	LAB_15C2		; go do interpreter inner loop
000663r 2               
000663r 2               					; clear stack and back to interpreter loop
000663r 2               LoopDone
000663r 2  E8           	INX				; dump DO token
000664r 2  E8           	INX				; dump current line low byte
000665r 2  E8           	INX				; dump current line high byte
000666r 2  E8           	INX				; dump BASIC execute pointer low byte
000667r 2  E8           	INX				; dump BASIC execute pointer high byte
000668r 2  9A           	TXS				; correct stack
000669r 2  4C rr rr     	JMP	LAB_DATA		; go perform DATA (find : or [EOL])
00066Cr 2               
00066Cr 2               ; do the return without gosub error
00066Cr 2               
00066Cr 2               LAB_16F4
00066Cr 2  A2 04        	LDX	#$04			; error code $04 ("RETURN without GOSUB" error)
00066Er 2  2C           	.byte	$2C			; makes next line BIT LAB_0EA2
00066Fr 2               
00066Fr 2               LAB_16F7				; do undefined statement error
00066Fr 2  A2 0E        	LDX	#$0E			; error code $0E ("Undefined statement" error)
000671r 2  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
000674r 2               
000674r 2               ; perform RETURN
000674r 2               
000674r 2               LAB_RETURN
000674r 2  D0 9E        	BNE	LAB_16E5		; exit if following token (to allow syntax error)
000676r 2               
000676r 2               LAB_16E8
000676r 2  68           	PLA				; dump calling routine return address
000677r 2  68           	PLA				; dump calling routine return address
000678r 2  68           	PLA				; pull token
000679r 2  C9 8D        	CMP	#TK_GOSUB		; compare with GOSUB token
00067Br 2  D0 EF        	BNE	LAB_16F4		; branch if no matching GOSUB
00067Dr 2               
00067Dr 2               LAB_16FF
00067Dr 2  68           	PLA				; pull current line low byte
00067Er 2  85 87        	STA	Clinel		; save current line low byte
000680r 2  68           	PLA				; pull current line high byte
000681r 2  85 88        	STA	Clineh		; save current line high byte
000683r 2  68           	PLA				; pull BASIC execute pointer low byte
000684r 2  85 C3        	STA	Bpntrl		; save BASIC execute pointer low byte
000686r 2  68           	PLA				; pull BASIC execute pointer high byte
000687r 2  85 C4        	STA	Bpntrh		; save BASIC execute pointer high byte
000689r 2               
000689r 2               					; now do the DATA statement as we could be returning into
000689r 2               					; the middle of an ON <var> GOSUB n,m,p,q line
000689r 2               					; (the return address used by the DATA statement is the one
000689r 2               					; pushed before the GOSUB was executed!)
000689r 2               
000689r 2               ; perform DATA
000689r 2               
000689r 2               LAB_DATA
000689r 2  20 rr rr     	JSR	LAB_SNBS		; scan for next BASIC statement ([:] or [EOL])
00068Cr 2               
00068Cr 2               					; set BASIC execute pointer
00068Cr 2               LAB_170F
00068Cr 2  98           	TYA				; copy index to A
00068Dr 2  18           	CLC				; clear carry for add
00068Er 2  65 C3        	ADC	Bpntrl		; add BASIC execute pointer low byte
000690r 2  85 C3        	STA	Bpntrl		; save BASIC execute pointer low byte
000692r 2  90 02        	BCC	LAB_1719		; skip next if no carry
000694r 2               
000694r 2  E6 C4        	INC	Bpntrh		; else increment BASIC execute pointer high byte
000696r 2               LAB_1719
000696r 2  60           	RTS
000697r 2               
000697r 2               LAB_16FC
000697r 2  4C rr rr     	JMP	LAB_SNER		; do syntax error then warm start
00069Ar 2               
00069Ar 2               ; scan for next BASIC statement ([:] or [EOL])
00069Ar 2               ; returns Y as index to [:] or [EOL]
00069Ar 2               
00069Ar 2               LAB_SNBS
00069Ar 2  A2 3A        	LDX	#':'			; set look for character = ":"
00069Cr 2  2C           	.byte	$2C			; makes next line BIT $00A2
00069Dr 2               
00069Dr 2               ; scan for next BASIC line
00069Dr 2               ; returns Y as index to [EOL]
00069Dr 2               
00069Dr 2               LAB_SNBL
00069Dr 2  A2 00        	LDX	#$00			; set alt search character = [EOL]
00069Fr 2  A0 00        	LDY	#$00			; set search character = [EOL]
0006A1r 2  84 5C        	STY	Asrch			; store search character
0006A3r 2               LAB_1725
0006A3r 2  8A           	TXA				; get alt search character
0006A4r 2  45 5C        	EOR	Asrch			; toggle search character, effectively swap with $00
0006A6r 2  85 5C        	STA	Asrch			; save swapped search character
0006A8r 2               LAB_172D
0006A8r 2  B1 C3        	LDA	(Bpntrl),Y		; get next byte
0006AAr 2  F0 EA        	BEQ	LAB_1719		; exit if null [EOL]
0006ACr 2               
0006ACr 2  C5 5C        	CMP	Asrch			; compare with search character
0006AEr 2  F0 E6        	BEQ	LAB_1719		; exit if found
0006B0r 2               
0006B0r 2  C8           	INY				; increment index
0006B1r 2  C9 22        	CMP	#$22			; compare current character with open quote
0006B3r 2  D0 F3        	BNE	LAB_172D		; if not open quote go get next character
0006B5r 2               
0006B5r 2  F0 EC        	BEQ	LAB_1725		; if found go swap search character for alt search character
0006B7r 2               
0006B7r 2               ; perform IF
0006B7r 2               
0006B7r 2               LAB_IF
0006B7r 2  20 rr rr     	JSR	LAB_EVEX		; evaluate the expression
0006BAr 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
0006BDr 2  C9 B0        	CMP	#TK_THEN		; compare with THEN token
0006BFr 2  F0 11        	BEQ	LAB_174B		; if it was THEN go do IF
0006C1r 2               
0006C1r 2               					; wasn't IF .. THEN so must be IF .. GOTO
0006C1r 2  C9 89        	CMP	#TK_GOTO		; compare with GOTO token
0006C3r 2  D0 D2        	BNE	LAB_16FC		; if it wasn't GOTO go do syntax error
0006C5r 2               
0006C5r 2  A6 C3        	LDX	Bpntrl		; save the basic pointer low byte
0006C7r 2  A4 C4        	LDY	Bpntrh		; save the basic pointer high byte
0006C9r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
0006CCr 2  B0 C9        	BCS	LAB_16FC		; if not numeric go do syntax error
0006CEr 2               
0006CEr 2  86 C3        	STX	Bpntrl		; restore the basic pointer low byte
0006D0r 2  84 C4        	STY	Bpntrh		; restore the basic pointer high byte
0006D2r 2               LAB_174B
0006D2r 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
0006D4r 2  F0 1B        	BEQ	LAB_174E		; if the result was zero go look for an ELSE
0006D6r 2               
0006D6r 2  20 BC 00     	JSR	LAB_IGBY		; else increment and scan memory
0006D9r 2  B0 03        	BCS	LAB_174D		; if not numeric go do var or keyword
0006DBr 2               
0006DBr 2               LAB_174C
0006DBr 2  4C rr rr     	JMP	LAB_GOTO		; else was numeric so do GOTO n
0006DEr 2               
0006DEr 2               					; is var or keyword
0006DEr 2               LAB_174D
0006DEr 2  C9 90        	CMP	#TK_RETURN		; compare the byte with the token for RETURN
0006E0r 2  D0 03        	BNE	LAB_174G		; if it wasn't RETURN go interpret BASIC code from (Bpntrl)
0006E2r 2               					; and return to this code to process any following code
0006E2r 2               
0006E2r 2  4C rr rr     	JMP	LAB_1602		; else it was RETURN so interpret BASIC code from (Bpntrl)
0006E5r 2               					; but don't return here
0006E5r 2               
0006E5r 2               LAB_174G
0006E5r 2  20 rr rr     	JSR	LAB_15FF		; interpret BASIC code from (Bpntrl)
0006E8r 2               
0006E8r 2               ; the IF was executed and there may be a following ELSE so the code needs to return
0006E8r 2               ; here to check and ignore the ELSE if present
0006E8r 2               
0006E8r 2  A0 00        	LDY	#$00			; clear the index
0006EAr 2  B1 C3        	LDA	(Bpntrl),Y		; get the next BASIC byte
0006ECr 2  C9 AC        	CMP	#TK_ELSE		; compare it with the token for ELSE
0006EEr 2  F0 99        	BEQ	LAB_DATA		; if ELSE ignore the following statement
0006F0r 2               
0006F0r 2               ; there was no ELSE so continue execution of IF <expr> THEN <stat> [: <stat>]. any
0006F0r 2               ; following ELSE will, correctly, cause a syntax error
0006F0r 2               
0006F0r 2  60           	RTS				; else return to the interpreter inner loop
0006F1r 2               
0006F1r 2               ; perform ELSE after IF
0006F1r 2               
0006F1r 2               LAB_174E
0006F1r 2  A0 00        	LDY	#$00			; clear the BASIC byte index
0006F3r 2  A2 01        	LDX	#$01			; clear the nesting depth
0006F5r 2               LAB_1750
0006F5r 2  C8           	INY				; increment the BASIC byte index
0006F6r 2  B1 C3        	LDA	(Bpntrl),Y		; get the next BASIC byte
0006F8r 2  F0 0F        	BEQ	LAB_1753		; if EOL go add the pointer and return
0006FAr 2               
0006FAr 2  C9 8B        	CMP	#TK_IF		; compare the byte with the token for IF
0006FCr 2  D0 03        	BNE	LAB_1752		; if not IF token skip the depth increment
0006FEr 2               
0006FEr 2  E8           	INX				; else increment the nesting depth ..
0006FFr 2  D0 F4        	BNE	LAB_1750		; .. and continue looking
000701r 2               
000701r 2               LAB_1752
000701r 2  C9 AC        	CMP	#TK_ELSE		; compare the byte with the token for ELSE
000703r 2  D0 F0        	BNE	LAB_1750		; if not ELSE token continue looking
000705r 2               
000705r 2  CA           	DEX				; was ELSE so decrement the nesting depth
000706r 2  D0 ED        	BNE	LAB_1750		; loop if still nested
000708r 2               
000708r 2  C8           	INY				; increment the BASIC byte index past the ELSE
000709r 2               
000709r 2               ; found the matching ELSE, now do <{n|statement}>
000709r 2               
000709r 2               LAB_1753
000709r 2  98           	TYA				; else copy line index to A
00070Ar 2  18           	CLC				; clear carry for add
00070Br 2  65 C3        	ADC	Bpntrl		; add the BASIC execute pointer low byte
00070Dr 2  85 C3        	STA	Bpntrl		; save the BASIC execute pointer low byte
00070Fr 2  90 02        	BCC	LAB_1754		; branch if no overflow to high byte
000711r 2               
000711r 2  E6 C4        	INC	Bpntrh		; else increment the BASIC execute pointer high byte
000713r 2               LAB_1754
000713r 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
000716r 2  90 C3        	BCC	LAB_174C		; if numeric do GOTO n
000718r 2               					; the code will return to the interpreter loop at the
000718r 2               					; tail end of the GOTO <n>
000718r 2               
000718r 2  4C rr rr     	JMP	LAB_15FF		; interpret BASIC code from (Bpntrl)
00071Br 2               					; the code will return to the interpreter loop at the
00071Br 2               					; tail end of the <statement>
00071Br 2               
00071Br 2               ; perform REM, skip (rest of) line
00071Br 2               
00071Br 2               LAB_REM
00071Br 2  20 rr rr     	JSR	LAB_SNBL		; scan for next BASIC line
00071Er 2  4C rr rr     	JMP	LAB_170F		; go set BASIC execute pointer and return, branch always
000721r 2               
000721r 2               LAB_16FD
000721r 2  4C rr rr     	JMP	LAB_SNER		; do syntax error then warm start
000724r 2               
000724r 2               ; perform ON
000724r 2               
000724r 2               LAB_ON
000724r 2  C9 A9        	CMP	#TK_IRQ		; was it IRQ token ?
000726r 2  D0 03        	BNE	LAB_NOIN		; if not go check NMI
000728r 2               
000728r 2  4C rr rr     	JMP	LAB_SIRQ		; else go set-up IRQ
00072Br 2               
00072Br 2               LAB_NOIN
00072Br 2  C9 AA        	CMP	#TK_NMI		; was it NMI token ?
00072Dr 2  D0 03        	BNE	LAB_NONM		; if not go do normal ON command
00072Fr 2               
00072Fr 2  4C rr rr     	JMP	LAB_SNMI		; else go set-up NMI
000732r 2               
000732r 2               LAB_NONM
000732r 2  20 rr rr     	JSR	LAB_GTBY		; get byte parameter
000735r 2  48           	PHA				; push GOTO/GOSUB token
000736r 2  C9 8D        	CMP	#TK_GOSUB		; compare with GOSUB token
000738r 2  F0 04        	BEQ	LAB_176B		; branch if GOSUB
00073Ar 2               
00073Ar 2  C9 89        	CMP	#TK_GOTO		; compare with GOTO token
00073Cr 2               LAB_1767
00073Cr 2  D0 E3        	BNE	LAB_16FD		; if not GOTO do syntax error then warm start
00073Er 2               
00073Er 2               
00073Er 2               ; next character was GOTO or GOSUB
00073Er 2               
00073Er 2               LAB_176B
00073Er 2  C6 AF        	DEC	FAC1_3		; decrement index (byte value)
000740r 2  D0 04        	BNE	LAB_1773		; branch if not zero
000742r 2               
000742r 2  68           	PLA				; pull GOTO/GOSUB token
000743r 2  4C rr rr     	JMP	LAB_1602		; go execute it
000746r 2               
000746r 2               LAB_1773
000746r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
000749r 2  20 rr rr     	JSR	LAB_GFPN		; get fixed-point number into temp integer (skip this n)
00074Cr 2               					; (we could LDX #',' and JSR LAB_SNBL+2, then we
00074Cr 2               					; just BNE LAB_176B for the loop. should be quicker ..
00074Cr 2               					; no we can't, what if we meet a colon or [EOL]?)
00074Cr 2  C9 2C        	CMP	#$2C			; compare next character with ","
00074Er 2  F0 EE        	BEQ	LAB_176B		; loop if ","
000750r 2               
000750r 2               LAB_177E
000750r 2  68           	PLA				; else pull keyword token (run out of options)
000751r 2               					; also dump +/-1 pointer low byte and exit
000751r 2               LAB_177F
000751r 2  60           	RTS
000752r 2               
000752r 2               ; takes n * 106 + 11 cycles where n is the number of digits
000752r 2               
000752r 2               ; get fixed-point number into temp integer
000752r 2               
000752r 2               LAB_GFPN
000752r 2  A2 00        	LDX	#$00			; clear reg
000754r 2  86 11        	STX	Itempl		; clear temporary integer low byte
000756r 2               LAB_1785
000756r 2  86 12        	STX	Itemph		; save temporary integer high byte
000758r 2  B0 F7        	BCS	LAB_177F		; return if carry set, end of scan, character was
00075Ar 2               					; not 0-9
00075Ar 2               
00075Ar 2  E0 19        	CPX	#$19			; compare high byte with $19
00075Cr 2  A8           	TAY				; ensure Zb = 0 if the branch is taken
00075Dr 2  B0 DD        	BCS	LAB_1767		; branch if >=, makes max line # 63999 because next
00075Fr 2               					; bit does *$0A, = 64000, compare at target will fail
00075Fr 2               					; and do syntax error
00075Fr 2               
00075Fr 2  E9 2F        	SBC	#'0'-1		; subtract "0", $2F + carry, from byte
000761r 2  A8           	TAY				; copy binary digit
000762r 2  A5 11        	LDA	Itempl		; get temporary integer low byte
000764r 2  0A           	ASL				; *2 low byte
000765r 2  26 12        	ROL	Itemph		; *2 high byte
000767r 2  0A           	ASL				; *2 low byte
000768r 2  26 12        	ROL	Itemph		; *2 high byte, *4
00076Ar 2  65 11        	ADC	Itempl		; + low byte, *5
00076Cr 2  85 11        	STA	Itempl		; save it
00076Er 2  8A           	TXA				; get high byte copy to A
00076Fr 2  65 12        	ADC	Itemph		; + high byte, *5
000771r 2  06 11        	ASL	Itempl		; *2 low byte, *10d
000773r 2  2A           	ROL				; *2 high byte, *10d
000774r 2  AA           	TAX				; copy high byte back to X
000775r 2  98           	TYA				; get binary digit back
000776r 2  65 11        	ADC	Itempl		; add number low byte
000778r 2  85 11        	STA	Itempl		; save number low byte
00077Ar 2  90 01        	BCC	LAB_17B3		; if no overflow to high byte get next character
00077Cr 2               
00077Cr 2  E8           	INX				; else increment high byte
00077Dr 2               LAB_17B3
00077Dr 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
000780r 2  4C rr rr     	JMP	LAB_1785		; loop for next character
000783r 2               
000783r 2               ; perform DEC
000783r 2               
000783r 2               LAB_DEC
000783r 2  A9 rr        	LDA	#<LAB_2AFD		; set -1 pointer low byte
000785r 2  2C           	.byte	$2C			; BIT abs to skip the LDA below
000786r 2               
000786r 2               ; perform INC
000786r 2               
000786r 2               LAB_INC
000786r 2  A9 rr        	LDA	#<LAB_259C		; set 1 pointer low byte
000788r 2               LAB_17B5
000788r 2  48           	PHA				; save +/-1 pointer low byte
000789r 2               LAB_17B7
000789r 2  20 rr rr     	JSR	LAB_GVAR		; get var address
00078Cr 2  A6 5F        	LDX	Dtypef		; get data type flag, $FF=string, $00=numeric
00078Er 2  30 1E        	BMI	IncrErr		; exit if string
000790r 2               
000790r 2  85 97        	STA	Lvarpl		; save var address low byte
000792r 2  84 98        	STY	Lvarph		; save var address high byte
000794r 2  20 rr rr     	JSR	LAB_UFAC		; unpack memory (AY) into FAC1
000797r 2  68           	PLA				; get +/-1 pointer low byte
000798r 2  48           	PHA				; save +/-1 pointer low byte
000799r 2  A0 rr        	LDY	#>LAB_259C		; set +/-1 pointer high byte (both the same)
00079Br 2  20 rr rr     	JSR	LAB_246C		; add (AY) to FAC1
00079Er 2  20 rr rr     	JSR	LAB_PFAC		; pack FAC1 into variable (Lvarpl)
0007A1r 2               
0007A1r 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
0007A4r 2  C9 2C        	CMP	#','			; compare with ","
0007A6r 2  D0 A8        	BNE	LAB_177E		; exit if not "," (either end or error)
0007A8r 2               
0007A8r 2               					; was "," so another INCR variable to do
0007A8r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
0007ABr 2  4C rr rr     	JMP	LAB_17B7		; go do next var
0007AEr 2               
0007AEr 2               IncrErr
0007AEr 2  4C rr rr     	JMP	LAB_1ABC		; do "Type mismatch" error then warm start
0007B1r 2               
0007B1r 2               ; perform LET
0007B1r 2               
0007B1r 2               LAB_LET
0007B1r 2  20 rr rr     	JSR	LAB_GVAR		; get var address
0007B4r 2  85 97        	STA	Lvarpl		; save var address low byte
0007B6r 2  84 98        	STY	Lvarph		; save var address high byte
0007B8r 2  A9 C1        	LDA	#TK_EQUAL		; get = token
0007BAr 2  20 rr rr     	JSR	LAB_SCCA		; scan for CHR$(A), else do syntax error then warm start
0007BDr 2  A5 5F        	LDA	Dtypef		; get data type flag, $FF=string, $00=numeric
0007BFr 2  48           	PHA				; push data type flag
0007C0r 2  20 rr rr     	JSR	LAB_EVEX		; evaluate expression
0007C3r 2  68           	PLA				; pop data type flag
0007C4r 2  2A           	ROL				; set carry if type = string
0007C5r 2  20 rr rr     	JSR	LAB_CKTM		; type match check, set C for string
0007C8r 2  D0 03        	BNE	LAB_17D5		; branch if string
0007CAr 2               
0007CAr 2  4C rr rr     	JMP	LAB_PFAC		; pack FAC1 into variable (Lvarpl) and return
0007CDr 2               
0007CDr 2               ; string LET
0007CDr 2               
0007CDr 2               LAB_17D5
0007CDr 2  A0 02        	LDY	#$02			; set index to pointer high byte
0007CFr 2  B1 AE        	LDA	(des_pl),Y		; get string pointer high byte
0007D1r 2  C5 82        	CMP	Sstorh		; compare bottom of string space high byte
0007D3r 2  90 17        	BCC	LAB_17F4		; if less assign value and exit (was in program memory)
0007D5r 2               
0007D5r 2  D0 07        	BNE	LAB_17E6		; branch if >
0007D7r 2               					; else was equal so compare low bytes
0007D7r 2  88           	DEY				; decrement index
0007D8r 2  B1 AE        	LDA	(des_pl),Y		; get pointer low byte
0007DAr 2  C5 81        	CMP	Sstorl		; compare bottom of string space low byte
0007DCr 2  90 0E        	BCC	LAB_17F4		; if less assign value and exit (was in program memory)
0007DEr 2               
0007DEr 2               					; pointer was >= to bottom of string space pointer
0007DEr 2               LAB_17E6
0007DEr 2  A4 AF        	LDY	des_ph		; get descriptor pointer high byte
0007E0r 2  C4 7C        	CPY	Svarh			; compare start of vars high byte
0007E2r 2  90 08        	BCC	LAB_17F4		; branch if less (descriptor is on stack)
0007E4r 2               
0007E4r 2  D0 0D        	BNE	LAB_17FB		; branch if greater (descriptor is not on stack)
0007E6r 2               
0007E6r 2               					; else high bytes were equal so ..
0007E6r 2  A5 AE        	LDA	des_pl		; get descriptor pointer low byte
0007E8r 2  C5 7B        	CMP	Svarl			; compare start of vars low byte
0007EAr 2  B0 07        	BCS	LAB_17FB		; branch if >= (descriptor is not on stack)
0007ECr 2               
0007ECr 2               LAB_17F4
0007ECr 2  A5 AE        	LDA	des_pl		; get descriptor pointer low byte
0007EEr 2  A4 AF        	LDY	des_ph		; get descriptor pointer high byte
0007F0r 2  4C rr rr     	JMP	LAB_1811		; clean stack, copy descriptor to variable and return
0007F3r 2               
0007F3r 2               					; make space and copy string
0007F3r 2               LAB_17FB
0007F3r 2  A0 00        	LDY	#$00			; index to length
0007F5r 2  B1 AE        	LDA	(des_pl),Y		; get string length
0007F7r 2  20 rr rr     	JSR	LAB_209C		; copy string
0007FAr 2  A5 9E        	LDA	des_2l		; get descriptor pointer low byte
0007FCr 2  A4 9F        	LDY	des_2h		; get descriptor pointer high byte
0007FEr 2  85 B8        	STA	ssptr_l		; save descriptor pointer low byte
000800r 2  84 B9        	STY	ssptr_h		; save descriptor pointer high byte
000802r 2  20 rr rr     	JSR	LAB_228A		; copy string from descriptor (sdescr) to (Sutill)
000805r 2  A9 AC        	LDA	#<FAC1_e		; set descriptor pointer low byte
000807r 2  A0 00        	LDY	#>FAC1_e		; get descriptor pointer high byte
000809r 2               
000809r 2               					; clean stack and assign value to string variable
000809r 2               LAB_1811
000809r 2  85 9E        	STA	des_2l		; save descriptor_2 pointer low byte
00080Br 2  84 9F        	STY	des_2h		; save descriptor_2 pointer high byte
00080Dr 2  20 rr rr     	JSR	LAB_22EB		; clean descriptor stack, YA = pointer
000810r 2  A0 00        	LDY	#$00			; index to length
000812r 2  B1 9E        	LDA	(des_2l),Y		; get string length
000814r 2  91 97        	STA	(Lvarpl),Y		; copy to let string variable
000816r 2  C8           	INY				; index to string pointer low byte
000817r 2  B1 9E        	LDA	(des_2l),Y		; get string pointer low byte
000819r 2  91 97        	STA	(Lvarpl),Y		; copy to let string variable
00081Br 2  C8           	INY				; index to string pointer high byte
00081Cr 2  B1 9E        	LDA	(des_2l),Y		; get string pointer high byte
00081Er 2  91 97        	STA	(Lvarpl),Y		; copy to let string variable
000820r 2  60           	RTS
000821r 2               
000821r 2               ; perform GET
000821r 2               
000821r 2               LAB_GET
000821r 2  20 rr rr     	JSR	LAB_GVAR		; get var address
000824r 2  85 97        	STA	Lvarpl		; save var address low byte
000826r 2  84 98        	STY	Lvarph		; save var address high byte
000828r 2  20 rr rr     	JSR	INGET			; get input byte
00082Br 2  A6 5F        	LDX	Dtypef		; get data type flag, $FF=string, $00=numeric
00082Dr 2  30 07        	BMI	LAB_GETS		; go get string character
00082Fr 2               
00082Fr 2               					; was numeric get
00082Fr 2  A8           	TAY				; copy character to Y
000830r 2  20 rr rr     	JSR	LAB_1FD0		; convert Y to byte in FAC1
000833r 2  4C rr rr     	JMP	LAB_PFAC		; pack FAC1 into variable (Lvarpl) and return
000836r 2               
000836r 2               LAB_GETS
000836r 2  48           	PHA				; save character
000837r 2  A9 01        	LDA	#$01			; string is single byte
000839r 2  B0 01        	BCS	LAB_IsByte		; branch if byte received
00083Br 2               
00083Br 2  68           	PLA				; string is null
00083Cr 2               LAB_IsByte
00083Cr 2  20 rr rr     	JSR	LAB_MSSP		; make string space A bytes long A=$AC=length,
00083Fr 2               					; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
00083Fr 2  F0 05        	BEQ	LAB_NoSt		; skip store if null string
000841r 2               
000841r 2  68           	PLA				; get character back
000842r 2  A0 00        	LDY	#$00			; clear index
000844r 2  91 AD        	STA	(str_pl),Y		; save byte in string (byte IS string!)
000846r 2               LAB_NoSt
000846r 2  20 rr rr     	JSR	LAB_RTST		; check for space on descriptor stack then put address
000849r 2               					; and length on descriptor stack and update stack pointers
000849r 2               
000849r 2  4C rr rr     	JMP	LAB_17D5		; do string LET and return
00084Cr 2               
00084Cr 2               ; perform PRINT
00084Cr 2               
00084Cr 2               LAB_1829
00084Cr 2  20 rr rr     	JSR	LAB_18C6		; print string from Sutill/Sutilh
00084Fr 2               LAB_182C
00084Fr 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
000852r 2               
000852r 2               ; PRINT
000852r 2               
000852r 2               LAB_PRINT
000852r 2  F0 2D        	BEQ	LAB_CRLF		; if nothing following just print CR/LF
000854r 2               
000854r 2               LAB_1831
000854r 2  C9 AB        	CMP	#TK_TAB		; compare with TAB( token
000856r 2  F0 42        	BEQ	LAB_18A2		; go do TAB/SPC
000858r 2               
000858r 2  C9 AF        	CMP	#TK_SPC		; compare with SPC( token
00085Ar 2  F0 3E        	BEQ	LAB_18A2		; go do TAB/SPC
00085Cr 2               
00085Cr 2  C9 2C        	CMP	#','			; compare with ","
00085Er 2  F0 2A        	BEQ	LAB_188B		; go do move to next TAB mark
000860r 2               
000860r 2  C9 3B        	CMP	#';'			; compare with ";"
000862r 2  F0 52        	BEQ	LAB_18BD		; if ";" continue with PRINT processing
000864r 2               
000864r 2  20 rr rr     	JSR	LAB_EVEX		; evaluate expression
000867r 2  24 5F        	BIT	Dtypef		; test data type flag, $FF=string, $00=numeric
000869r 2  30 E1        	BMI	LAB_1829		; branch if string
00086Br 2               
00086Br 2  20 rr rr     	JSR	LAB_296E		; convert FAC1 to string
00086Er 2  20 rr rr     	JSR	LAB_20AE		; print " terminated string to Sutill/Sutilh
000871r 2  A0 00        	LDY	#$00			; clear index
000873r 2               
000873r 2               
000873r 2  20 rr rr     	JSR	LAB_18C6		; print string from Sutill/Sutilh
000876r 2  F0 D7        	BEQ	LAB_182C		; always go continue processing line
000878r 2               
000878r 2               ; CR/LF return to BASIC from BASIC input handler
000878r 2               
000878r 2               LAB_1866
000878r 2  A9 00        	LDA	#$00			; clear byte
00087Ar 2  9D 21 03     	STA	Ibuffs,X		; null terminate input
00087Dr 2  A2 21        	LDX	#<Ibuffs		; set X to buffer start-1 low byte
00087Fr 2  A0 03        	LDY	#>Ibuffs		; set Y to buffer start-1 high byte
000881r 2               
000881r 2               ; print CR/LF
000881r 2               
000881r 2               LAB_CRLF
000881r 2  A9 0D        	LDA	#$0D			; load [CR]
000883r 2  20 rr rr     	JSR	LAB_PRNA		; go print the character
000886r 2  A9 0A        	LDA	#$0A			; load [LF]
000888r 2  D0 4C        	BNE	LAB_PRNA		; go print the character and return, branch always
00088Ar 2               
00088Ar 2               LAB_188B
00088Ar 2               	;LDA	TPos			; get terminal position
00088Ar 2               	;CMP	Iclim			; compare with input column limit
00088Ar 2               	;BCC	LAB_1897		; branch if less
00088Ar 2               
00088Ar 2  20 rr rr     	JSR	LAB_CRLF		; else print CR/LF (next line)
00088Dr 2  D0 27        	BNE	LAB_18BD		; continue with PRINT processing (branch always)
00088Fr 2               
00088Fr 2               LAB_1897
00088Fr 2  38           	SEC				; set carry for subtract
000890r 2               LAB_1898
000890r 2  E5 64        	SBC	TabSiz		; subtract TAB size
000892r 2  B0 FC        	BCS	LAB_1898		; loop if result was +ve
000894r 2               
000894r 2  49 FF        	EOR	#$FF			; complement it
000896r 2  69 01        	ADC	#$01			; +1 (twos complement)
000898r 2  D0 12        	BNE	LAB_18B6		; always print A spaces (result is never $00)
00089Ar 2               
00089Ar 2               					; do TAB/SPC
00089Ar 2               LAB_18A2
00089Ar 2  48           	PHA				; save token
00089Br 2  20 rr rr     	JSR	LAB_SGBY		; scan and get byte parameter
00089Er 2  C9 29        	CMP	#$29			; is next character )
0008A0r 2  D0 7B        	BNE	LAB_1910		; if not do syntax error then warm start
0008A2r 2               
0008A2r 2  68           	PLA				; get token back
0008A3r 2  C9 AB        	CMP	#TK_TAB		; was it TAB ?
0008A5r 2  D0 06        	BNE	LAB_18B7		; if not go do SPC
0008A7r 2               
0008A7r 2               					; calculate TAB offset
0008A7r 2  8A           	TXA				; copy integer value to A
0008A8r 2  E5 0E        	SBC	TPos			; subtract terminal position
0008AAr 2  90 0A        	BCC	LAB_18BD		; branch if result was < 0 (can't TAB backwards)
0008ACr 2               
0008ACr 2               					; print A spaces
0008ACr 2               LAB_18B6
0008ACr 2  AA           	TAX				; copy result to X
0008ADr 2               LAB_18B7
0008ADr 2  8A           	TXA				; set flags on size for SPC
0008AEr 2  F0 06        	BEQ	LAB_18BD		; branch if result was = $0, already here
0008B0r 2               
0008B0r 2               					; print X spaces
0008B0r 2               LAB_18BA
0008B0r 2  20 rr rr     	JSR	LAB_18E0		; print " "
0008B3r 2  CA           	DEX				; decrement count
0008B4r 2  D0 FA        	BNE	LAB_18BA		; loop if not all done
0008B6r 2               
0008B6r 2               					; continue with PRINT processing
0008B6r 2               LAB_18BD
0008B6r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
0008B9r 2  D0 99        	BNE	LAB_1831		; if more to print go do it
0008BBr 2               
0008BBr 2  60           	RTS
0008BCr 2               
0008BCr 2               ; print null terminated string from memory
0008BCr 2               
0008BCr 2               LAB_18C3
0008BCr 2  20 rr rr     	JSR	LAB_20AE		; print " terminated string to Sutill/Sutilh
0008BFr 2               
0008BFr 2               ; print string from Sutill/Sutilh
0008BFr 2               
0008BFr 2               LAB_18C6
0008BFr 2  20 rr rr     	JSR	LAB_22B6		; pop string off descriptor stack, or from top of string
0008C2r 2               					; space returns with A = length, X=$71=pointer low byte,
0008C2r 2               					; Y=$72=pointer high byte
0008C2r 2  A0 00        	LDY	#$00			; reset index
0008C4r 2  AA           	TAX				; copy length to X
0008C5r 2  F0 49        	BEQ	LAB_188C		; exit (RTS) if null string
0008C7r 2               
0008C7r 2               LAB_18CD
0008C7r 2               
0008C7r 2  B1 71        	LDA	(ut1_pl),Y		; get next byte
0008C9r 2  20 rr rr     	JSR	V_OUTP		; go print the character
0008CCr 2  C8           	INY				; increment index
0008CDr 2  CA           	DEX				; decrement count
0008CEr 2  D0 F7        	BNE	LAB_18CD		; loop if not done yet
0008D0r 2               
0008D0r 2  60           	RTS
0008D1r 2               
0008D1r 2               					; Print single format character
0008D1r 2               ; print " "
0008D1r 2               
0008D1r 2               LAB_18E0
0008D1r 2  A9 20        	LDA	#$20			; load " "
0008D3r 2  2C           	.byte	$2C			; change next line to BIT LAB_3FA9
0008D4r 2               
0008D4r 2               ; print "?" character
0008D4r 2               
0008D4r 2               LAB_18E3
0008D4r 2  A9 3F        	LDA	#$3F			; load "?" character
0008D6r 2               
0008D6r 2               ; print character in A
0008D6r 2               ; now includes the null handler
0008D6r 2               ; also includes infinite line length code
0008D6r 2               ; note! some routines expect this one to exit with Zb=0
0008D6r 2               
0008D6r 2               LAB_PRNA
0008D6r 2  C9 20        	CMP	#' '			; compare with " "
0008D8r 2  90 19        	BCC	LAB_18F9		; branch if less (non printing)
0008DAr 2               
0008DAr 2               					; else printable character
0008DAr 2  48           	PHA				; save the character
0008DBr 2               
0008DBr 2               ; don't check fit if terminal width byte is zero
0008DBr 2               
0008DBr 2  A5 0F        	LDA	TWidth		; get terminal width
0008DDr 2  D0 0A        	BNE	LAB_18F0		; branch if not zero (not infinite length)
0008DFr 2               
0008DFr 2               ; is "infinite line" so check TAB position
0008DFr 2               
0008DFr 2  A5 0E        	LDA	TPos			; get position
0008E1r 2  E5 64        	SBC	TabSiz		; subtract TAB size, carry set by CMP #$20 above
0008E3r 2  D0 0B        	BNE	LAB_18F7		; skip reset if different
0008E5r 2               
0008E5r 2  85 0E        	STA	TPos			; else reset position
0008E7r 2  F0 07        	BEQ	LAB_18F7		; go print character
0008E9r 2               
0008E9r 2               LAB_18F0
0008E9r 2  C5 0E        	CMP	TPos			; compare with terminal character position
0008EBr 2  D0 03        	BNE	LAB_18F7		; branch if not at end of line
0008EDr 2               
0008EDr 2  20 rr rr     	JSR	LAB_CRLF		; else print CR/LF
0008F0r 2               LAB_18F7
0008F0r 2  E6 0E        	INC	TPos			; increment terminal position
0008F2r 2  68           	PLA				; get character back
0008F3r 2               LAB_18F9
0008F3r 2  20 rr rr     	JSR	V_OUTP		; output byte via output vector
0008F6r 2  C9 0D        	CMP	#$0D			; compare with [CR]
0008F8r 2  D0 14        	BNE	LAB_188A		; branch if not [CR]
0008FAr 2               
0008FAr 2               					; else print nullct nulls after the [CR]
0008FAr 2  86 78        	STX	TempB			; save buffer index
0008FCr 2  A6 0D        	LDX	Nullct		; get null count
0008FEr 2  F0 0A        	BEQ	LAB_1886		; branch if no nulls
000900r 2               
000900r 2  A9 00        	LDA	#$00			; load [NULL]
000902r 2               LAB_1880
000902r 2  20 rr rr     	JSR	LAB_PRNA		; go print the character
000905r 2  CA           	DEX				; decrement count
000906r 2  D0 FA        	BNE	LAB_1880		; loop if not all done
000908r 2               
000908r 2  A9 0D        	LDA	#$0D			; restore the character (and set the flags)
00090Ar 2               LAB_1886
00090Ar 2  86 0E        	STX	TPos			; clear terminal position (X always = zero when we get here)
00090Cr 2  A6 78        	LDX	TempB			; restore buffer index
00090Er 2               LAB_188A
00090Er 2  29 FF        	AND	#$FF			; set the flags
000910r 2               LAB_188C
000910r 2  60           	RTS
000911r 2               
000911r 2               ; handle bad input data
000911r 2               
000911r 2               LAB_1904
000911r 2  A5 62        	LDA	Imode			; get input mode flag, $00=INPUT, $00=READ
000913r 2  10 0B        	BPL	LAB_1913		; branch if INPUT (go do redo)
000915r 2               
000915r 2  A5 8D        	LDA	Dlinel		; get current DATA line low byte
000917r 2  A4 8E        	LDY	Dlineh		; get current DATA line high byte
000919r 2  85 87        	STA	Clinel		; save current line low byte
00091Br 2  84 88        	STY	Clineh		; save current line high byte
00091Dr 2               LAB_1910
00091Dr 2  4C rr rr     	JMP	LAB_SNER		; do syntax error then warm start
000920r 2               
000920r 2               					; mode was INPUT
000920r 2               LAB_1913
000920r 2  A9 rr        	LDA	#<LAB_REDO		; point to redo message (low addr)
000922r 2  A0 rr        	LDY	#>LAB_REDO		; point to redo message (high addr)
000924r 2  20 rr rr     	JSR	LAB_18C3		; print null terminated string from memory
000927r 2  A5 8B        	LDA	Cpntrl		; get continue pointer low byte
000929r 2  A4 8C        	LDY	Cpntrh		; get continue pointer high byte
00092Br 2  85 C3        	STA	Bpntrl		; save BASIC execute pointer low byte
00092Dr 2  84 C4        	STY	Bpntrh		; save BASIC execute pointer high byte
00092Fr 2  60           	RTS
000930r 2               
000930r 2               ; perform INPUT
000930r 2               
000930r 2               LAB_INPUT
000930r 2  C9 22        	CMP	#$22			; compare next byte with open quote
000932r 2  D0 0B        	BNE	LAB_1934		; branch if no prompt string
000934r 2               
000934r 2  20 rr rr     	JSR	LAB_1BC1		; print "..." string
000937r 2  A9 3B        	LDA	#$3B			; load A with ";"
000939r 2  20 rr rr     	JSR	LAB_SCCA		; scan for CHR$(A), else do syntax error then warm start
00093Cr 2  20 rr rr     	JSR	LAB_18C6		; print string from Sutill/Sutilh
00093Fr 2               
00093Fr 2               					; done with prompt, now get data
00093Fr 2               LAB_1934
00093Fr 2  20 rr rr     	JSR	LAB_CKRN		; check not Direct, back here if ok
000942r 2  20 rr rr     	JSR	LAB_INLN		; print "? " and get BASIC input
000945r 2  A9 00        	LDA	#$00			; set mode = INPUT
000947r 2  CD 21 03     	CMP	Ibuffs		; test first byte in buffer
00094Ar 2  D0 0A        	BNE	LAB_1953		; branch if not null input
00094Cr 2               
00094Cr 2  18           	CLC				; was null input so clear carry to exit program
00094Dr 2  4C rr rr     	JMP	LAB_1647		; go do BREAK exit
000950r 2               
000950r 2               ; perform READ
000950r 2               
000950r 2               LAB_READ
000950r 2  A6 8F        	LDX	Dptrl			; get DATA pointer low byte
000952r 2  A4 90        	LDY	Dptrh			; get DATA pointer high byte
000954r 2  A9 80        	LDA	#$80			; set mode = READ
000956r 2               
000956r 2               LAB_1953
000956r 2  85 62        	STA	Imode			; set input mode flag, $00=INPUT, $80=READ
000958r 2  86 91        	STX	Rdptrl		; save READ pointer low byte
00095Ar 2  84 92        	STY	Rdptrh		; save READ pointer high byte
00095Cr 2               
00095Cr 2               					; READ or INPUT next variable from list
00095Cr 2               LAB_195B
00095Cr 2  20 rr rr     	JSR	LAB_GVAR		; get (var) address
00095Fr 2  85 97        	STA	Lvarpl		; save address low byte
000961r 2  84 98        	STY	Lvarph		; save address high byte
000963r 2  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte
000965r 2  A4 C4        	LDY	Bpntrh		; get BASIC execute pointer high byte
000967r 2  85 11        	STA	Itempl		; save as temporary integer low byte
000969r 2  84 12        	STY	Itemph		; save as temporary integer high byte
00096Br 2  A6 91        	LDX	Rdptrl		; get READ pointer low byte
00096Dr 2  A4 92        	LDY	Rdptrh		; get READ pointer high byte
00096Fr 2  86 C3        	STX	Bpntrl		; set BASIC execute pointer low byte
000971r 2  84 C4        	STY	Bpntrh		; set BASIC execute pointer high byte
000973r 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
000976r 2  D0 11        	BNE	LAB_1988		; branch if not null
000978r 2               
000978r 2               					; pointer was to null entry
000978r 2  24 62        	BIT	Imode			; test input mode flag, $00=INPUT, $80=READ
00097Ar 2  30 65        	BMI	LAB_19DD		; branch if READ
00097Cr 2               
00097Cr 2               					; mode was INPUT
00097Cr 2  20 rr rr     	JSR	LAB_18E3		; print "?" character (double ? for extended input)
00097Fr 2  20 rr rr     	JSR	LAB_INLN		; print "? " and get BASIC input
000982r 2  86 C3        	STX	Bpntrl		; set BASIC execute pointer low byte
000984r 2  84 C4        	STY	Bpntrh		; set BASIC execute pointer high byte
000986r 2               LAB_1985
000986r 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
000989r 2               LAB_1988
000989r 2  24 5F        	BIT	Dtypef		; test data type flag, $FF=string, $00=numeric
00098Br 2  10 24        	BPL	LAB_19B0		; branch if numeric
00098Dr 2               
00098Dr 2               					; else get string
00098Dr 2  85 5B        	STA	Srchc			; save search character
00098Fr 2  C9 22        	CMP	#$22			; was it " ?
000991r 2  F0 07        	BEQ	LAB_1999		; branch if so
000993r 2               
000993r 2  A9 3A        	LDA	#':'			; else search character is ":"
000995r 2  85 5B        	STA	Srchc			; set new search character
000997r 2  A9 2C        	LDA	#','			; other search character is ","
000999r 2  18           	CLC				; clear carry for add
00099Ar 2               LAB_1999
00099Ar 2  85 5C        	STA	Asrch			; set second search character
00099Cr 2  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte
00099Er 2  A4 C4        	LDY	Bpntrh		; get BASIC execute pointer high byte
0009A0r 2               
0009A0r 2  69 00        	ADC	#$00			; c is =1 if we came via the BEQ LAB_1999, else =0
0009A2r 2  90 01        	BCC	LAB_19A4		; branch if no execute pointer low byte rollover
0009A4r 2               
0009A4r 2  C8           	INY				; else increment high byte
0009A5r 2               LAB_19A4
0009A5r 2  20 rr rr     	JSR	LAB_20B4		; print Srchc or Asrch terminated string to Sutill/Sutilh
0009A8r 2  20 rr rr     	JSR	LAB_23F3		; restore BASIC execute pointer from temp (Btmpl/Btmph)
0009ABr 2  20 rr rr     	JSR	LAB_17D5		; go do string LET
0009AEr 2  4C rr rr     	JMP	LAB_19B6		; go check string terminator
0009B1r 2               
0009B1r 2               					; get numeric INPUT
0009B1r 2               LAB_19B0
0009B1r 2  20 rr rr     	JSR	LAB_2887		; get FAC1 from string
0009B4r 2  20 rr rr     	JSR	LAB_PFAC		; pack FAC1 into (Lvarpl)
0009B7r 2               LAB_19B6
0009B7r 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
0009BAr 2  F0 0A        	BEQ	LAB_19C5		; branch if null (last entry)
0009BCr 2               
0009BCr 2  C9 2C        	CMP	#','			; else compare with ","
0009BEr 2  F0 03        	BEQ	LAB_19C2		; branch if ","
0009C0r 2               
0009C0r 2  4C rr rr     	JMP	LAB_1904		; else go handle bad input data
0009C3r 2               
0009C3r 2               					; got good input data
0009C3r 2               LAB_19C2
0009C3r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
0009C6r 2               LAB_19C5
0009C6r 2  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte (temp READ/INPUT ptr)
0009C8r 2  A4 C4        	LDY	Bpntrh		; get BASIC execute pointer high byte (temp READ/INPUT ptr)
0009CAr 2  85 91        	STA	Rdptrl		; save for now
0009CCr 2  84 92        	STY	Rdptrh		; save for now
0009CEr 2  A5 11        	LDA	Itempl		; get temporary integer low byte (temp BASIC execute ptr)
0009D0r 2  A4 12        	LDY	Itemph		; get temporary integer high byte (temp BASIC execute ptr)
0009D2r 2  85 C3        	STA	Bpntrl		; set BASIC execute pointer low byte
0009D4r 2  84 C4        	STY	Bpntrh		; set BASIC execute pointer high byte
0009D6r 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
0009D9r 2  F0 2C        	BEQ	LAB_1A03		; if null go do extra ignored message
0009DBr 2               
0009DBr 2  20 rr rr     	JSR	LAB_1C01		; else scan for "," , else do syntax error then warm start
0009DEr 2  4C rr rr     	JMP	LAB_195B		; go INPUT next variable from list
0009E1r 2               
0009E1r 2               					; find next DATA statement or do "Out of DATA" error
0009E1r 2               LAB_19DD
0009E1r 2  20 rr rr     	JSR	LAB_SNBS		; scan for next BASIC statement ([:] or [EOL])
0009E4r 2  C8           	INY				; increment index
0009E5r 2  AA           	TAX				; copy character ([:] or [EOL])
0009E6r 2  D0 12        	BNE	LAB_19F6		; branch if [:]
0009E8r 2               
0009E8r 2  A2 06        	LDX	#$06			; set for "Out of DATA" error
0009EAr 2  C8           	INY				; increment index, now points to next line pointer high byte
0009EBr 2  B1 C3        	LDA	(Bpntrl),Y		; get next line pointer high byte
0009EDr 2  F0 73        	BEQ	LAB_1A54		; branch if end (eventually does error X)
0009EFr 2               
0009EFr 2  C8           	INY				; increment index
0009F0r 2  B1 C3        	LDA	(Bpntrl),Y		; get next line # low byte
0009F2r 2  85 8D        	STA	Dlinel		; save current DATA line low byte
0009F4r 2  C8           	INY				; increment index
0009F5r 2  B1 C3        	LDA	(Bpntrl),Y		; get next line # high byte
0009F7r 2  C8           	INY				; increment index
0009F8r 2  85 8E        	STA	Dlineh		; save current DATA line high byte
0009FAr 2               LAB_19F6
0009FAr 2  B1 C3        	LDA	(Bpntrl),Y		; get byte
0009FCr 2  C8           	INY				; increment index
0009FDr 2  AA           	TAX				; copy to X
0009FEr 2  20 rr rr     	JSR	LAB_170F		; set BASIC execute pointer
000A01r 2  E0 83        	CPX	#TK_DATA		; compare with "DATA" token
000A03r 2  F0 81        	BEQ	LAB_1985		; was "DATA" so go do next READ
000A05r 2               
000A05r 2  D0 DA        	BNE	LAB_19DD		; go find next statement if not "DATA"
000A07r 2               
000A07r 2               ; end of INPUT/READ routine
000A07r 2               
000A07r 2               LAB_1A03
000A07r 2  A5 91        	LDA	Rdptrl		; get temp READ pointer low byte
000A09r 2  A4 92        	LDY	Rdptrh		; get temp READ pointer high byte
000A0Br 2  A6 62        	LDX	Imode			; get input mode flag, $00=INPUT, $80=READ
000A0Dr 2  10 03        	BPL	LAB_1A0E		; branch if INPUT
000A0Fr 2               
000A0Fr 2  4C rr rr     	JMP	LAB_1624		; save AY as DATA pointer and return
000A12r 2               
000A12r 2               					; we were getting INPUT
000A12r 2               LAB_1A0E
000A12r 2  A0 00        	LDY	#$00			; clear index
000A14r 2  B1 91        	LDA	(Rdptrl),Y		; get next byte
000A16r 2  D0 01        	BNE	LAB_1A1B		; error if not end of INPUT
000A18r 2               
000A18r 2  60           	RTS
000A19r 2               
000A19r 2               					; user typed too much
000A19r 2               LAB_1A1B
000A19r 2  A9 rr        	LDA	#<LAB_IMSG		; point to extra ignored message (low addr)
000A1Br 2  A0 rr        	LDY	#>LAB_IMSG		; point to extra ignored message (high addr)
000A1Dr 2  4C rr rr     	JMP	LAB_18C3		; print null terminated string from memory and return
000A20r 2               
000A20r 2               ; search the stack for FOR activity
000A20r 2               ; exit with z=1 if FOR else exit with z=0
000A20r 2               
000A20r 2               LAB_11A1
000A20r 2  BA           	TSX				; copy stack pointer
000A21r 2  E8           	INX				; +1 pass return address
000A22r 2  E8           	INX				; +2 pass return address
000A23r 2  E8           	INX				; +3 pass calling routine return address
000A24r 2  E8           	INX				; +4 pass calling routine return address
000A25r 2               LAB_11A6
000A25r 2  BD 01 01     	LDA	LAB_STAK+1,X	; get token byte from stack
000A28r 2  C9 81        	CMP	#TK_FOR		; is it FOR token
000A2Ar 2  D0 21        	BNE	LAB_11CE		; exit if not FOR token
000A2Cr 2               
000A2Cr 2               					; was FOR token
000A2Cr 2  A5 98        	LDA	Frnxth		; get var pointer for FOR/NEXT high byte
000A2Er 2  D0 0A        	BNE	LAB_11BB		; branch if not null
000A30r 2               
000A30r 2  BD 02 01     	LDA	LAB_STAK+2,X	; get FOR variable pointer low byte
000A33r 2  85 97        	STA	Frnxtl		; save var pointer for FOR/NEXT low byte
000A35r 2  BD 03 01     	LDA	LAB_STAK+3,X	; get FOR variable pointer high byte
000A38r 2  85 98        	STA	Frnxth		; save var pointer for FOR/NEXT high byte
000A3Ar 2               LAB_11BB
000A3Ar 2  DD 03 01     	CMP	LAB_STAK+3,X	; compare var pointer with stacked var pointer (high byte)
000A3Dr 2  D0 07        	BNE	LAB_11C7		; branch if no match
000A3Fr 2               
000A3Fr 2  A5 97        	LDA	Frnxtl		; get var pointer for FOR/NEXT low byte
000A41r 2  DD 02 01     	CMP	LAB_STAK+2,X	; compare var pointer with stacked var pointer (low byte)
000A44r 2  F0 07        	BEQ	LAB_11CE		; exit if match found
000A46r 2               
000A46r 2               LAB_11C7
000A46r 2  8A           	TXA				; copy index
000A47r 2  18           	CLC				; clear carry for add
000A48r 2  69 10        	ADC	#$10			; add FOR stack use size
000A4Ar 2  AA           	TAX				; copy back to index
000A4Br 2  D0 D8        	BNE	LAB_11A6		; loop if not at start of stack
000A4Dr 2               
000A4Dr 2               LAB_11CE
000A4Dr 2  60           	RTS
000A4Er 2               
000A4Er 2               ; perform NEXT
000A4Er 2               
000A4Er 2               LAB_NEXT
000A4Er 2  D0 04        	BNE	LAB_1A46		; branch if NEXT var
000A50r 2               
000A50r 2  A0 00        	LDY	#$00			; else clear Y
000A52r 2  F0 03        	BEQ	LAB_1A49		; branch always (no variable to search for)
000A54r 2               
000A54r 2               ; NEXT var
000A54r 2               
000A54r 2               LAB_1A46
000A54r 2  20 rr rr     	JSR	LAB_GVAR		; get variable address
000A57r 2               LAB_1A49
000A57r 2  85 97        	STA	Frnxtl		; store variable pointer low byte
000A59r 2  84 98        	STY	Frnxth		; store variable pointer high byte
000A5Br 2               					; (both cleared if no variable defined)
000A5Br 2  20 rr rr     	JSR	LAB_11A1		; search the stack for FOR activity
000A5Er 2  F0 04        	BEQ	LAB_1A56		; branch if found
000A60r 2               
000A60r 2  A2 00        	LDX	#$00			; else set error $00 ("NEXT without FOR" error)
000A62r 2               LAB_1A54
000A62r 2  F0 63        	BEQ	LAB_1ABE		; do error #X, then warm start
000A64r 2               
000A64r 2               LAB_1A56
000A64r 2  9A           	TXS				; set stack pointer, X set by search, dumps return addresses
000A65r 2               
000A65r 2  8A           	TXA				; copy stack pointer
000A66r 2  38           	SEC				; set carry for subtract
000A67r 2  E9 F7        	SBC	#$F7			; point to TO var
000A69r 2  85 73        	STA	ut2_pl		; save pointer to TO var for compare
000A6Br 2  69 FB        	ADC	#$FB			; point to STEP var
000A6Dr 2               
000A6Dr 2  A0 01        	LDY	#>LAB_STAK		; point to stack page high byte
000A6Fr 2  20 rr rr     	JSR	LAB_UFAC		; unpack memory (STEP value) into FAC1
000A72r 2  BA           	TSX				; get stack pointer back
000A73r 2  BD 08 01     	LDA	LAB_STAK+8,X	; get step sign
000A76r 2  85 B0        	STA	FAC1_s		; save FAC1 sign (b7)
000A78r 2  A5 97        	LDA	Frnxtl		; get FOR variable pointer low byte
000A7Ar 2  A4 98        	LDY	Frnxth		; get FOR variable pointer high byte
000A7Cr 2  20 rr rr     	JSR	LAB_246C		; add (FOR variable) to FAC1
000A7Fr 2  20 rr rr     	JSR	LAB_PFAC		; pack FAC1 into (FOR variable)
000A82r 2  A0 01        	LDY	#>LAB_STAK		; point to stack page high byte
000A84r 2  20 rr rr     	JSR	LAB_27FA		; compare FAC1 with (Y,ut2_pl) (TO value)
000A87r 2  BA           	TSX				; get stack pointer back
000A88r 2  DD 08 01     	CMP	LAB_STAK+8,X	; compare step sign
000A8Br 2  F0 17        	BEQ	LAB_1A9B		; branch if = (loop complete)
000A8Dr 2               
000A8Dr 2               					; loop back and do it all again
000A8Dr 2  BD 0D 01     	LDA	LAB_STAK+$0D,X	; get FOR line low byte
000A90r 2  85 87        	STA	Clinel		; save current line low byte
000A92r 2  BD 0E 01     	LDA	LAB_STAK+$0E,X	; get FOR line high byte
000A95r 2  85 88        	STA	Clineh		; save current line high byte
000A97r 2  BD 10 01     	LDA	LAB_STAK+$10,X	; get BASIC execute pointer low byte
000A9Ar 2  85 C3        	STA	Bpntrl		; save BASIC execute pointer low byte
000A9Cr 2  BD 0F 01     	LDA	LAB_STAK+$0F,X	; get BASIC execute pointer high byte
000A9Fr 2  85 C4        	STA	Bpntrh		; save BASIC execute pointer high byte
000AA1r 2               LAB_1A98
000AA1r 2  4C rr rr     	JMP	LAB_15C2		; go do interpreter inner loop
000AA4r 2               
000AA4r 2               					; loop complete so carry on
000AA4r 2               LAB_1A9B
000AA4r 2  8A           	TXA				; stack copy to A
000AA5r 2  69 0F        	ADC	#$0F			; add $10 ($0F+carry) to dump FOR structure
000AA7r 2  AA           	TAX				; copy back to index
000AA8r 2  9A           	TXS				; copy to stack pointer
000AA9r 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
000AACr 2  C9 2C        	CMP	#','			; compare with ","
000AAEr 2  D0 F1        	BNE	LAB_1A98		; branch if not "," (go do interpreter inner loop)
000AB0r 2               
000AB0r 2               					; was "," so another NEXT variable to do
000AB0r 2  20 BC 00     	JSR	LAB_IGBY		; else increment and scan memory
000AB3r 2  20 rr rr     	JSR	LAB_1A46		; do NEXT (var)
000AB6r 2               
000AB6r 2               ; evaluate expression and check is numeric, else do type mismatch
000AB6r 2               
000AB6r 2               LAB_EVNM
000AB6r 2  20 rr rr     	JSR	LAB_EVEX		; evaluate expression
000AB9r 2               
000AB9r 2               ; check if source is numeric, else do type mismatch
000AB9r 2               
000AB9r 2               LAB_CTNM
000AB9r 2  18           	CLC				; destination is numeric
000ABAr 2  24           	.byte	$24			; makes next line BIT $38
000ABBr 2               
000ABBr 2               ; check if source is string, else do type mismatch
000ABBr 2               
000ABBr 2               LAB_CTST
000ABBr 2  38           	SEC				; required type is string
000ABCr 2               
000ABCr 2               ; type match check, set C for string, clear C for numeric
000ABCr 2               
000ABCr 2               LAB_CKTM
000ABCr 2  24 5F        	BIT	Dtypef		; test data type flag, $FF=string, $00=numeric
000ABEr 2  30 03        	BMI	LAB_1ABA		; branch if data type is string
000AC0r 2               
000AC0r 2               					; else data type was numeric
000AC0r 2  B0 03        	BCS	LAB_1ABC		; if required type is string do type mismatch error
000AC2r 2               LAB_1AB9
000AC2r 2  60           	RTS
000AC3r 2               
000AC3r 2               					; data type was string, now check required type
000AC3r 2               LAB_1ABA
000AC3r 2  B0 FD        	BCS	LAB_1AB9		; exit if required type is string
000AC5r 2               
000AC5r 2               					; else do type mismatch error
000AC5r 2               LAB_1ABC
000AC5r 2  A2 18        	LDX	#$18			; error code $18 ("Type mismatch" error)
000AC7r 2               LAB_1ABE
000AC7r 2  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
000ACAr 2               
000ACAr 2               ; evaluate expression
000ACAr 2               
000ACAr 2               LAB_EVEX
000ACAr 2  A6 C3        	LDX	Bpntrl		; get BASIC execute pointer low byte
000ACCr 2  D0 02        	BNE	LAB_1AC7		; skip next if not zero
000ACEr 2               
000ACEr 2  C6 C4        	DEC	Bpntrh		; else decrement BASIC execute pointer high byte
000AD0r 2               LAB_1AC7
000AD0r 2  C6 C3        	DEC	Bpntrl		; decrement BASIC execute pointer low byte
000AD2r 2               
000AD2r 2               LAB_EVEZ
000AD2r 2  A9 00        	LDA	#$00			; set null precedence (flag done)
000AD4r 2               LAB_1ACC
000AD4r 2  48           	PHA				; push precedence byte
000AD5r 2  A9 02        	LDA	#$02			; 2 bytes
000AD7r 2  20 rr rr     	JSR	LAB_1212		; check room on stack for A bytes
000ADAr 2  20 rr rr     	JSR	LAB_GVAL		; get value from line
000ADDr 2  A9 00        	LDA	#$00			; clear A
000ADFr 2  85 9B        	STA	comp_f		; clear compare function flag
000AE1r 2               LAB_1ADB
000AE1r 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
000AE4r 2               LAB_1ADE
000AE4r 2  38           	SEC				; set carry for subtract
000AE5r 2  E9 C0        	SBC	#TK_GT		; subtract token for > (lowest comparison function)
000AE7r 2  90 17        	BCC	LAB_1AFA		; branch if < TK_GT
000AE9r 2               
000AE9r 2  C9 03        	CMP	#$03			; compare with ">" to "<" tokens
000AEBr 2  B0 13        	BCS	LAB_1AFA		; branch if >= TK_SGN (highest evaluation function +1)
000AEDr 2               
000AEDr 2               					; was token for > = or < (A = 0, 1 or 2)
000AEDr 2  C9 01        	CMP	#$01			; compare with token for =
000AEFr 2  2A           	ROL				; *2, b0 = carry (=1 if token was = or <)
000AF0r 2               					; (A = 0, 3 or 5)
000AF0r 2  49 01        	EOR	#$01			; toggle b0
000AF2r 2               					; (A = 1, 2 or 4. 1 if >, 2 if =, 4 if <)
000AF2r 2  45 9B        	EOR	comp_f		; EOR with compare function flag bits
000AF4r 2  C5 9B        	CMP	comp_f		; compare with compare function flag
000AF6r 2  90 67        	BCC	LAB_1B53		; if <(comp_f) do syntax error then warm start
000AF8r 2               					; was more than one <, = or >)
000AF8r 2               
000AF8r 2  85 9B        	STA	comp_f		; save new compare function flag
000AFAr 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
000AFDr 2  4C rr rr     	JMP	LAB_1ADE		; go do next character
000B00r 2               
000B00r 2               					; token is < ">" or > "<" tokens
000B00r 2               LAB_1AFA
000B00r 2  A6 9B        	LDX	comp_f		; get compare function flag
000B02r 2  D0 2C        	BNE	LAB_1B2A		; branch if compare function
000B04r 2               
000B04r 2  B0 79        	BCS	LAB_1B78		; go do functions
000B06r 2               
000B06r 2               					; else was <  TK_GT so is operator or lower
000B06r 2  69 0A        	ADC	#TK_GT-TK_PLUS	; add # of operators (+, -, *, /, ^, AND, OR or EOR)
000B08r 2  90 75        	BCC	LAB_1B78		; branch if < + operator
000B0Ar 2               
000B0Ar 2               					; carry was set so token was +, -, *, /, ^, AND, OR or EOR
000B0Ar 2  D0 07        	BNE	LAB_1B0B		; branch if not + token
000B0Cr 2               
000B0Cr 2  24 5F        	BIT	Dtypef		; test data type flag, $FF=string, $00=numeric
000B0Er 2  10 03        	BPL	LAB_1B0B		; branch if not string
000B10r 2               
000B10r 2               					; will only be $00 if type is string and token was +
000B10r 2  4C rr rr     	JMP	LAB_224D		; add strings, string 1 is in descriptor des_pl, string 2
000B13r 2               					; is in line, and return
000B13r 2               
000B13r 2               LAB_1B0B
000B13r 2  85 71        	STA	ut1_pl		; save it
000B15r 2  0A           	ASL				; *2
000B16r 2  65 71        	ADC	ut1_pl		; *3
000B18r 2  A8           	TAY				; copy to index
000B19r 2               LAB_1B13
000B19r 2  68           	PLA				; pull previous precedence
000B1Ar 2  D9 rr rr     	CMP	LAB_OPPT,Y		; compare with precedence byte
000B1Dr 2  B0 65        	BCS	LAB_1B7D		; branch if A >=
000B1Fr 2               
000B1Fr 2  20 rr rr     	JSR	LAB_CTNM		; check if source is numeric, else do type mismatch
000B22r 2               LAB_1B1C
000B22r 2  48           	PHA				; save precedence
000B23r 2               LAB_1B1D
000B23r 2  20 rr rr     	JSR	LAB_1B43		; get vector, execute function then continue evaluation
000B26r 2  68           	PLA				; restore precedence
000B27r 2  A4 99        	LDY	prstk			; get precedence stacked flag
000B29r 2  10 19        	BPL	LAB_1B3C		; branch if stacked values
000B2Br 2               
000B2Br 2  AA           	TAX				; copy precedence (set flags)
000B2Cr 2  F0 76        	BEQ	LAB_1B9D		; exit if done
000B2Er 2               
000B2Er 2  D0 5D        	BNE	LAB_1B86		; else pop FAC2 and return, branch always
000B30r 2               
000B30r 2               LAB_1B2A
000B30r 2  26 5F        	ROL	Dtypef		; shift data type flag into Cb
000B32r 2  8A           	TXA				; copy compare function flag
000B33r 2  85 5F        	STA	Dtypef		; clear data type flag, X is 0xxx xxxx
000B35r 2  2A           	ROL				; shift data type into compare function byte b0
000B36r 2  A6 C3        	LDX	Bpntrl		; get BASIC execute pointer low byte
000B38r 2  D0 02        	BNE	LAB_1B34		; branch if no underflow
000B3Ar 2               
000B3Ar 2  C6 C4        	DEC	Bpntrh		; else decrement BASIC execute pointer high byte
000B3Cr 2               LAB_1B34
000B3Cr 2  C6 C3        	DEC	Bpntrl		; decrement BASIC execute pointer low byte
000B3Er 2               TK_LT_PLUS	= TK_LT-TK_PLUS
000B3Er 2  A0 24        	LDY	#TK_LT_PLUS*3	; set offset to last operator entry
000B40r 2  85 9B        	STA	comp_f		; save new compare function flag
000B42r 2  D0 D5        	BNE	LAB_1B13		; branch always
000B44r 2               
000B44r 2               LAB_1B3C
000B44r 2  D9 rr rr     	CMP	LAB_OPPT,Y		;.compare with stacked function precedence
000B47r 2  B0 44        	BCS	LAB_1B86		; branch if A >=, pop FAC2 and return
000B49r 2               
000B49r 2  90 D7        	BCC	LAB_1B1C		; branch always
000B4Br 2               
000B4Br 2               ;.get vector, execute function then continue evaluation
000B4Br 2               
000B4Br 2               LAB_1B43
000B4Br 2  B9 rr rr     	LDA	LAB_OPPT+2,Y	; get function vector high byte
000B4Er 2  48           	PHA				; onto stack
000B4Fr 2  B9 rr rr     	LDA	LAB_OPPT+1,Y	; get function vector low byte
000B52r 2  48           	PHA				; onto stack
000B53r 2               					; now push sign, round FAC1 and put on stack
000B53r 2  20 rr rr     	JSR	LAB_1B5B		; function will return here, then the next RTS will call
000B56r 2               					; the function
000B56r 2  A5 9B        	LDA	comp_f		; get compare function flag
000B58r 2  48           	PHA				; push compare evaluation byte
000B59r 2  B9 rr rr     	LDA	LAB_OPPT,Y		; get precedence byte
000B5Cr 2  4C rr rr     	JMP	LAB_1ACC		; continue evaluating expression
000B5Fr 2               
000B5Fr 2               LAB_1B53
000B5Fr 2  4C rr rr     	JMP	LAB_SNER		; do syntax error then warm start
000B62r 2               
000B62r 2               ; push sign, round FAC1 and put on stack
000B62r 2               
000B62r 2               LAB_1B5B
000B62r 2  68           	PLA				; get return addr low byte
000B63r 2  85 71        	STA	ut1_pl		; save it
000B65r 2  E6 71        	INC	ut1_pl		; increment it (was ret-1 pushed? yes!)
000B67r 2               					; note! no check is made on the high byte! if the calling
000B67r 2               					; routine assembles to a page edge then this all goes
000B67r 2               					; horribly wrong !!!
000B67r 2  68           	PLA				; get return addr high byte
000B68r 2  85 72        	STA	ut1_ph		; save it
000B6Ar 2  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
000B6Cr 2  48           	PHA				; push sign
000B6Dr 2               
000B6Dr 2               ; round FAC1 and put on stack
000B6Dr 2               
000B6Dr 2               LAB_1B66
000B6Dr 2  20 rr rr     	JSR	LAB_27BA		; round FAC1
000B70r 2  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
000B72r 2  48           	PHA				; push on stack
000B73r 2  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
000B75r 2  48           	PHA				; push on stack
000B76r 2  A5 AD        	LDA	FAC1_1		; get FAC1 mantissa1
000B78r 2  48           	PHA				; push on stack
000B79r 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
000B7Br 2  48           	PHA				; push on stack
000B7Cr 2  6C 71 00     	JMP	(ut1_pl)		; return, sort of
000B7Fr 2               
000B7Fr 2               ; do functions
000B7Fr 2               
000B7Fr 2               LAB_1B78
000B7Fr 2  A0 FF        	LDY	#$FF			; flag function
000B81r 2  68           	PLA				; pull precedence byte
000B82r 2               LAB_1B7B
000B82r 2  F0 20        	BEQ	LAB_1B9D		; exit if done
000B84r 2               
000B84r 2               LAB_1B7D
000B84r 2  C9 64        	CMP	#$64			; compare previous precedence with $64
000B86r 2  F0 03        	BEQ	LAB_1B84		; branch if was $64 (< function)
000B88r 2               
000B88r 2  20 rr rr     	JSR	LAB_CTNM		; check if source is numeric, else do type mismatch
000B8Br 2               LAB_1B84
000B8Br 2  84 99        	STY	prstk			; save precedence stacked flag
000B8Dr 2               
000B8Dr 2               					; pop FAC2 and return
000B8Dr 2               LAB_1B86
000B8Dr 2  68           	PLA				; pop byte
000B8Er 2  4A           	LSR				; shift out comparison evaluation lowest bit
000B8Fr 2  85 63        	STA	Cflag			; save comparison evaluation flag
000B91r 2  68           	PLA				; pop exponent
000B92r 2  85 B3        	STA	FAC2_e		; save FAC2 exponent
000B94r 2  68           	PLA				; pop mantissa1
000B95r 2  85 B4        	STA	FAC2_1		; save FAC2 mantissa1
000B97r 2  68           	PLA				; pop mantissa2
000B98r 2  85 B5        	STA	FAC2_2		; save FAC2 mantissa2
000B9Ar 2  68           	PLA				; pop mantissa3
000B9Br 2  85 B6        	STA	FAC2_3		; save FAC2 mantissa3
000B9Dr 2  68           	PLA				; pop sign
000B9Er 2  85 B7        	STA	FAC2_s		; save FAC2 sign (b7)
000BA0r 2  45 B0        	EOR	FAC1_s		; EOR FAC1 sign (b7)
000BA2r 2  85 B8        	STA	FAC_sc		; save sign compare (FAC1 EOR FAC2)
000BA4r 2               LAB_1B9D
000BA4r 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
000BA6r 2  60           	RTS
000BA7r 2               
000BA7r 2               ; print "..." string to string util area
000BA7r 2               
000BA7r 2               LAB_1BC1
000BA7r 2  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte
000BA9r 2  A4 C4        	LDY	Bpntrh		; get BASIC execute pointer high byte
000BABr 2  69 00        	ADC	#$00			; add carry to low byte
000BADr 2  90 01        	BCC	LAB_1BCA		; branch if no overflow
000BAFr 2               
000BAFr 2  C8           	INY				; increment high byte
000BB0r 2               LAB_1BCA
000BB0r 2  20 rr rr     	JSR	LAB_20AE		; print " terminated string to Sutill/Sutilh
000BB3r 2  4C rr rr     	JMP	LAB_23F3		; restore BASIC execute pointer from temp and return
000BB6r 2               
000BB6r 2               ; get value from line
000BB6r 2               
000BB6r 2               LAB_GVAL
000BB6r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
000BB9r 2  B0 03        	BCS	LAB_1BAC		; branch if not numeric character
000BBBr 2               
000BBBr 2               					; else numeric string found (e.g. 123)
000BBBr 2               LAB_1BA9
000BBBr 2  4C rr rr     	JMP	LAB_2887		; get FAC1 from string and return
000BBEr 2               
000BBEr 2               ; get value from line .. continued
000BBEr 2               
000BBEr 2               					; wasn't a number so ..
000BBEr 2               LAB_1BAC
000BBEr 2  AA           	TAX				; set the flags
000BBFr 2  30 2F        	BMI	LAB_1BD0		; if -ve go test token values
000BC1r 2               
000BC1r 2               					; else it is either a string, number, variable or (<expr>)
000BC1r 2  C9 24        	CMP	#'$'			; compare with "$"
000BC3r 2  F0 F6        	BEQ	LAB_1BA9		; branch if "$", hex number
000BC5r 2               
000BC5r 2  C9 25        	CMP	#'%'			; else compare with "%"
000BC7r 2  F0 F2        	BEQ	LAB_1BA9		; branch if "%", binary number
000BC9r 2               
000BC9r 2  C9 2E        	CMP	#'.'			; compare with "."
000BCBr 2  F0 EE        	BEQ	LAB_1BA9		; if so get FAC1 from string and return (e.g. was .123)
000BCDr 2               
000BCDr 2               					; it wasn't any sort of number so ..
000BCDr 2  C9 22        	CMP	#$22			; compare with "
000BCFr 2  F0 D6        	BEQ	LAB_1BC1		; branch if open quote
000BD1r 2               
000BD1r 2               					; wasn't any sort of number so ..
000BD1r 2               
000BD1r 2               ; evaluate expression within parentheses
000BD1r 2               
000BD1r 2  C9 28        	CMP	#'('			; compare with "("
000BD3r 2  D0 4F        	BNE	LAB_1C18		; if not "(" get (var), return value in FAC1 and $ flag
000BD5r 2               
000BD5r 2               LAB_1BF7
000BD5r 2  20 rr rr     	JSR	LAB_EVEZ		; evaluate expression, no decrement
000BD8r 2               
000BD8r 2               ; all the 'scan for' routines return the character after the sought character
000BD8r 2               
000BD8r 2               ; scan for ")" , else do syntax error then warm start
000BD8r 2               
000BD8r 2               LAB_1BFB
000BD8r 2  A9 29        	LDA	#$29			; load A with ")"
000BDAr 2               
000BDAr 2               ; scan for CHR$(A) , else do syntax error then warm start
000BDAr 2               
000BDAr 2               LAB_SCCA
000BDAr 2  A0 00        	LDY	#$00			; clear index
000BDCr 2  D1 C3        	CMP	(Bpntrl),Y		; check next byte is = A
000BDEr 2  D0 0B        	BNE	LAB_SNER		; if not do syntax error then warm start
000BE0r 2               
000BE0r 2  4C BC 00     	JMP	LAB_IGBY		; increment and scan memory then return
000BE3r 2               
000BE3r 2               ; scan for "(" , else do syntax error then warm start
000BE3r 2               
000BE3r 2               LAB_1BFE
000BE3r 2  A9 28        	LDA	#$28			; load A with "("
000BE5r 2  D0 F3        	BNE	LAB_SCCA		; scan for CHR$(A), else do syntax error then warm start
000BE7r 2               					; (branch always)
000BE7r 2               
000BE7r 2               ; scan for "," , else do syntax error then warm start
000BE7r 2               
000BE7r 2               LAB_1C01
000BE7r 2  A9 2C        	LDA	#$2C			; load A with ","
000BE9r 2  D0 EF        	BNE	LAB_SCCA		; scan for CHR$(A), else do syntax error then warm start
000BEBr 2               					; (branch always)
000BEBr 2               
000BEBr 2               ; syntax error then warm start
000BEBr 2               
000BEBr 2               LAB_SNER
000BEBr 2  A2 02        	LDX	#$02			; error code $02 ("Syntax" error)
000BEDr 2  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
000BF0r 2               
000BF0r 2               ; get value from line .. continued
000BF0r 2               ; do tokens
000BF0r 2               
000BF0r 2               LAB_1BD0
000BF0r 2  C9 B7        	CMP	#TK_MINUS		; compare with token for -
000BF2r 2  F0 29        	BEQ	LAB_1C11		; branch if - token (do set-up for functions)
000BF4r 2               
000BF4r 2               					; wasn't -n so ..
000BF4r 2  C9 B6        	CMP	#TK_PLUS		; compare with token for +
000BF6r 2  F0 BE        	BEQ	LAB_GVAL		; branch if + token (+n = n so ignore leading +)
000BF8r 2               
000BF8r 2  C9 B1        	CMP	#TK_NOT		; compare with token for NOT
000BFAr 2  D0 13        	BNE	LAB_1BE7		; branch if not token for NOT
000BFCr 2               
000BFCr 2               					; was NOT token
000BFCr 2               TK_EQUAL_PLUS	= TK_EQUAL-TK_PLUS
000BFCr 2  A0 21        	LDY	#TK_EQUAL_PLUS*3	; offset to NOT function
000BFEr 2  D0 1F        	BNE	LAB_1C13		; do set-up for function then execute (branch always)
000C00r 2               
000C00r 2               ; do = compare
000C00r 2               
000C00r 2               LAB_EQUAL
000C00r 2  20 rr rr     	JSR	LAB_EVIR		; evaluate integer expression (no sign check)
000C03r 2  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
000C05r 2  49 FF        	EOR	#$FF			; invert it
000C07r 2  A8           	TAY				; copy it
000C08r 2  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
000C0Ar 2  49 FF        	EOR	#$FF			; invert it
000C0Cr 2  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
000C0Fr 2               
000C0Fr 2               ; get value from line .. continued
000C0Fr 2               
000C0Fr 2               					; wasn't +, -, or NOT so ..
000C0Fr 2               LAB_1BE7
000C0Fr 2  C9 AE        	CMP	#TK_FN		; compare with token for FN
000C11r 2  D0 03        	BNE	LAB_1BEE		; branch if not token for FN
000C13r 2               
000C13r 2  4C rr rr     	JMP	LAB_201E		; go evaluate FNx
000C16r 2               
000C16r 2               ; get value from line .. continued
000C16r 2               
000C16r 2               					; wasn't +, -, NOT or FN so ..
000C16r 2               LAB_1BEE
000C16r 2  E9 C3        	SBC	#TK_SGN		; subtract with token for SGN
000C18r 2  B0 19        	BCS	LAB_1C27		; if a function token go do it
000C1Ar 2               
000C1Ar 2  4C rr rr     	JMP	LAB_SNER		; else do syntax error
000C1Dr 2               
000C1Dr 2               ; set-up for functions
000C1Dr 2               
000C1Dr 2               LAB_1C11
000C1Dr 2               TK_GT_PLUS	= TK_GT-TK_PLUS
000C1Dr 2  A0 1E        	LDY	#TK_GT_PLUS*3	; set offset from base to > operator
000C1Fr 2               LAB_1C13
000C1Fr 2  68           	PLA				; dump return address low byte
000C20r 2  68           	PLA				; dump return address high byte
000C21r 2  4C rr rr     	JMP	LAB_1B1D		; execute function then continue evaluation
000C24r 2               
000C24r 2               ; variable name set-up
000C24r 2               ; get (var), return value in FAC_1 and $ flag
000C24r 2               
000C24r 2               LAB_1C18
000C24r 2  20 rr rr     	JSR	LAB_GVAR		; get (var) address
000C27r 2  85 AE        	STA	FAC1_2		; save address low byte in FAC1 mantissa2
000C29r 2  84 AF        	STY	FAC1_3		; save address high byte in FAC1 mantissa3
000C2Br 2  A6 5F        	LDX	Dtypef		; get data type flag, $FF=string, $00=numeric
000C2Dr 2  30 03        	BMI	LAB_1C25		; if string then return (does RTS)
000C2Fr 2               
000C2Fr 2               LAB_1C24
000C2Fr 2  4C rr rr     	JMP	LAB_UFAC		; unpack memory (AY) into FAC1
000C32r 2               
000C32r 2               LAB_1C25
000C32r 2  60           	RTS
000C33r 2               
000C33r 2               ; get value from line .. continued
000C33r 2               ; only functions left so ..
000C33r 2               
000C33r 2               ; set up function references
000C33r 2               
000C33r 2               ; new for V2.0+ this replaces a lot of IF .. THEN .. ELSEIF .. THEN .. that was needed
000C33r 2               ; to process function calls. now the function vector is computed and pushed on the stack
000C33r 2               ; and the preprocess offset is read. if the preprocess offset is non zero then the vector
000C33r 2               ; is calculated and the routine called, if not this routine just does RTS. whichever
000C33r 2               ; happens the RTS at the end of this routine, or the end of the preprocess routine, calls
000C33r 2               ; the function code
000C33r 2               
000C33r 2               ; this also removes some less than elegant code that was used to bypass type checking
000C33r 2               ; for functions that returned strings
000C33r 2               
000C33r 2               LAB_1C27
000C33r 2  0A           	ASL				; *2 (2 bytes per function address)
000C34r 2  A8           	TAY				; copy to index
000C35r 2               
000C35r 2  B9 rr rr     	LDA	LAB_FTBM,Y		; get function jump vector high byte
000C38r 2  48           	PHA				; push functions jump vector high byte
000C39r 2  B9 rr rr     	LDA	LAB_FTBL,Y		; get function jump vector low byte
000C3Cr 2  48           	PHA				; push functions jump vector low byte
000C3Dr 2               
000C3Dr 2  B9 rr rr     	LDA	LAB_FTPM,Y		; get function pre process vector high byte
000C40r 2  F0 05        	BEQ	LAB_1C56		; skip pre process if null vector
000C42r 2               
000C42r 2  48           	PHA				; push functions pre process vector high byte
000C43r 2  B9 rr rr     	LDA	LAB_FTPL,Y		; get function pre process vector low byte
000C46r 2  48           	PHA				; push functions pre process vector low byte
000C47r 2               
000C47r 2               LAB_1C56
000C47r 2  60           	RTS				; do function, or pre process, call
000C48r 2               
000C48r 2               ; process string expression in parenthesis
000C48r 2               
000C48r 2               LAB_PPFS
000C48r 2  20 rr rr     	JSR	LAB_1BF7		; process expression in parenthesis
000C4Br 2  4C rr rr     	JMP	LAB_CTST		; check if source is string then do function,
000C4Er 2               					; else do type mismatch
000C4Er 2               
000C4Er 2               ; process numeric expression in parenthesis
000C4Er 2               
000C4Er 2               LAB_PPFN
000C4Er 2  20 rr rr     	JSR	LAB_1BF7		; process expression in parenthesis
000C51r 2  4C rr rr     	JMP	LAB_CTNM		; check if source is numeric then do function,
000C54r 2               					; else do type mismatch
000C54r 2               
000C54r 2               ; set numeric data type and increment BASIC execute pointer
000C54r 2               
000C54r 2               LAB_PPBI
000C54r 2  46 5F        	LSR	Dtypef		; clear data type flag, $FF=string, $00=numeric
000C56r 2  4C BC 00     	JMP	LAB_IGBY		; increment and scan memory then do function
000C59r 2               
000C59r 2               ; process string for LEFT$, RIGHT$ or MID$
000C59r 2               
000C59r 2               LAB_LRMS
000C59r 2  20 rr rr     	JSR	LAB_EVEZ		; evaluate (should be string) expression
000C5Cr 2  20 rr rr     	JSR	LAB_1C01		; scan for ",", else do syntax error then warm start
000C5Fr 2  20 rr rr     	JSR	LAB_CTST		; check if source is string, else do type mismatch
000C62r 2               
000C62r 2  68           	PLA				; get function jump vector low byte
000C63r 2  AA           	TAX				; save functions jump vector low byte
000C64r 2  68           	PLA				; get function jump vector high byte
000C65r 2  A8           	TAY				; save functions jump vector high byte
000C66r 2  A5 AF        	LDA	des_ph		; get descriptor pointer high byte
000C68r 2  48           	PHA				; push string pointer high byte
000C69r 2  A5 AE        	LDA	des_pl		; get descriptor pointer low byte
000C6Br 2  48           	PHA				; push string pointer low byte
000C6Cr 2  98           	TYA				; get function jump vector high byte back
000C6Dr 2  48           	PHA				; save functions jump vector high byte
000C6Er 2  8A           	TXA				; get function jump vector low byte back
000C6Fr 2  48           	PHA				; save functions jump vector low byte
000C70r 2  20 rr rr     	JSR	LAB_GTBY		; get byte parameter
000C73r 2  8A           	TXA				; copy byte parameter to A
000C74r 2  60           	RTS				; go do function
000C75r 2               
000C75r 2               ; process numeric expression(s) for BIN$ or HEX$
000C75r 2               
000C75r 2               LAB_BHSS
000C75r 2  20 rr rr     	JSR	LAB_EVEZ		; process expression
000C78r 2  20 rr rr     	JSR	LAB_CTNM		; check if source is numeric, else do type mismatch
000C7Br 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
000C7Dr 2  C9 98        	CMP	#$98			; compare with exponent = 2^24
000C7Fr 2  B0 20        	BCS	LAB_BHER		; branch if n>=2^24 (is too big)
000C81r 2               
000C81r 2  20 rr rr     	JSR	LAB_2831		; convert FAC1 floating-to-fixed
000C84r 2  A2 02        	LDX	#$02			; 3 bytes to do
000C86r 2               LAB_CFAC
000C86r 2  B5 AD        	LDA	FAC1_1,X		; get byte from FAC1
000C88r 2  95 11        	STA	nums_1,X		; save byte to temp
000C8Ar 2  CA           	DEX				; decrement index
000C8Br 2  10 F9        	BPL	LAB_CFAC		; copy FAC1 mantissa to temp
000C8Dr 2               
000C8Dr 2  20 C2 00     	JSR	LAB_GBYT		; get next BASIC byte
000C90r 2  A2 00        	LDX	#$00			; set default to no leading "0"s
000C92r 2  C9 29        	CMP	#')'			; compare with close bracket
000C94r 2  F0 0A        	BEQ	LAB_1C54		; if ")" go do rest of function
000C96r 2               
000C96r 2  20 rr rr     	JSR	LAB_SCGB		; scan for "," and get byte
000C99r 2  20 C2 00     	JSR	LAB_GBYT		; get last byte back
000C9Cr 2  C9 29        	CMP	#')'			; is next character )
000C9Er 2  D0 01        	BNE	LAB_BHER		; if not ")" go do error
000CA0r 2               
000CA0r 2               LAB_1C54
000CA0r 2  60           	RTS				; else do function
000CA1r 2               
000CA1r 2               LAB_BHER
000CA1r 2  4C rr rr     	JMP	LAB_FCER		; do function call error then warm start
000CA4r 2               
000CA4r 2               ; perform EOR
000CA4r 2               
000CA4r 2               ; added operator format is the same as AND or OR, precedence is the same as OR
000CA4r 2               
000CA4r 2               ; this bit worked first time but it took a while to sort out the operator table
000CA4r 2               ; pointers and offsets afterwards!
000CA4r 2               
000CA4r 2               LAB_EOR
000CA4r 2  20 rr rr     	JSR	GetFirst		; get first integer expression (no sign check)
000CA7r 2  45 5B        	EOR	XOAw_l		; EOR with expression 1 low byte
000CA9r 2  A8           	TAY				; save in Y
000CAAr 2  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
000CACr 2  45 5C        	EOR	XOAw_h		; EOR with expression 1 high byte
000CAEr 2  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
000CB1r 2               
000CB1r 2               ; perform OR
000CB1r 2               
000CB1r 2               LAB_OR
000CB1r 2  20 rr rr     	JSR	GetFirst		; get first integer expression (no sign check)
000CB4r 2  05 5B        	ORA	XOAw_l		; OR with expression 1 low byte
000CB6r 2  A8           	TAY				; save in Y
000CB7r 2  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
000CB9r 2  05 5C        	ORA	XOAw_h		; OR with expression 1 high byte
000CBBr 2  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
000CBEr 2               
000CBEr 2               ; perform AND
000CBEr 2               
000CBEr 2               LAB_AND
000CBEr 2  20 rr rr     	JSR	GetFirst		; get first integer expression (no sign check)
000CC1r 2  25 5B        	AND	XOAw_l		; AND with expression 1 low byte
000CC3r 2  A8           	TAY				; save in Y
000CC4r 2  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
000CC6r 2  25 5C        	AND	XOAw_h		; AND with expression 1 high byte
000CC8r 2  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
000CCBr 2               
000CCBr 2               ; get first value for OR, AND or EOR
000CCBr 2               
000CCBr 2               GetFirst
000CCBr 2  20 rr rr     	JSR	LAB_EVIR		; evaluate integer expression (no sign check)
000CCEr 2  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
000CD0r 2  85 5C        	STA	XOAw_h		; save it
000CD2r 2  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
000CD4r 2  85 5B        	STA	XOAw_l		; save it
000CD6r 2  20 rr rr     	JSR	LAB_279B		; copy FAC2 to FAC1 (get 2nd value in expression)
000CD9r 2  20 rr rr     	JSR	LAB_EVIR		; evaluate integer expression (no sign check)
000CDCr 2  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
000CDEr 2               LAB_1C95
000CDEr 2  60           	RTS
000CDFr 2               
000CDFr 2               ; perform comparisons
000CDFr 2               
000CDFr 2               ; do < compare
000CDFr 2               
000CDFr 2               LAB_LTHAN
000CDFr 2  20 rr rr     	JSR	LAB_CKTM		; type match check, set C for string
000CE2r 2  B0 13        	BCS	LAB_1CAE		; branch if string
000CE4r 2               
000CE4r 2               					; do numeric < compare
000CE4r 2  A5 B7        	LDA	FAC2_s		; get FAC2 sign (b7)
000CE6r 2  09 7F        	ORA	#$7F			; set all non sign bits
000CE8r 2  25 B4        	AND	FAC2_1		; and FAC2 mantissa1 (AND in sign bit)
000CEAr 2  85 B4        	STA	FAC2_1		; save FAC2 mantissa1
000CECr 2  A9 B3        	LDA	#<FAC2_e		; set pointer low byte to FAC2
000CEEr 2  A0 00        	LDY	#>FAC2_e		; set pointer high byte to FAC2
000CF0r 2  20 rr rr     	JSR	LAB_27F8		; compare FAC1 with FAC2 (AY)
000CF3r 2  AA           	TAX				; copy result
000CF4r 2  4C rr rr     	JMP	LAB_1CE1		; go evaluate result
000CF7r 2               
000CF7r 2               					; do string < compare
000CF7r 2               LAB_1CAE
000CF7r 2  46 5F        	LSR	Dtypef		; clear data type flag, $FF=string, $00=numeric
000CF9r 2  C6 9B        	DEC	comp_f		; clear < bit in compare function flag
000CFBr 2  20 rr rr     	JSR	LAB_22B6		; pop string off descriptor stack, or from top of string
000CFEr 2               					; space returns with A = length, X=pointer low byte,
000CFEr 2               					; Y=pointer high byte
000CFEr 2  85 AC        	STA	str_ln		; save length
000D00r 2  86 AD        	STX	str_pl		; save string pointer low byte
000D02r 2  84 AE        	STY	str_ph		; save string pointer high byte
000D04r 2  A5 B5        	LDA	FAC2_2		; get descriptor pointer low byte
000D06r 2  A4 B6        	LDY	FAC2_3		; get descriptor pointer high byte
000D08r 2  20 rr rr     	JSR	LAB_22BA		; pop (YA) descriptor off stack or from top of string space
000D0Br 2               					; returns with A = length, X=pointer low byte,
000D0Br 2               					; Y=pointer high byte
000D0Br 2  86 B5        	STX	FAC2_2		; save string pointer low byte
000D0Dr 2  84 B6        	STY	FAC2_3		; save string pointer high byte
000D0Fr 2  AA           	TAX				; copy length
000D10r 2  38           	SEC				; set carry for subtract
000D11r 2  E5 AC        	SBC	str_ln		; subtract string 1 length
000D13r 2  F0 08        	BEQ	LAB_1CD6		; branch if str 1 length = string 2 length
000D15r 2               
000D15r 2  A9 01        	LDA	#$01			; set str 1 length > string 2 length
000D17r 2  90 04        	BCC	LAB_1CD6		; branch if so
000D19r 2               
000D19r 2  A6 AC        	LDX	str_ln		; get string 1 length
000D1Br 2  A9 FF        	LDA	#$FF			; set str 1 length < string 2 length
000D1Dr 2               LAB_1CD6
000D1Dr 2  85 B0        	STA	FAC1_s		; save length compare
000D1Fr 2  A0 FF        	LDY	#$FF			; set index
000D21r 2  E8           	INX				; adjust for loop
000D22r 2               LAB_1CDB
000D22r 2  C8           	INY				; increment index
000D23r 2  CA           	DEX				; decrement count
000D24r 2  D0 07        	BNE	LAB_1CE6		; branch if still bytes to do
000D26r 2               
000D26r 2  A6 B0        	LDX	FAC1_s		; get length compare back
000D28r 2               LAB_1CE1
000D28r 2  30 0F        	BMI	LAB_1CF2		; branch if str 1 < str 2
000D2Ar 2               
000D2Ar 2  18           	CLC				; flag str 1 <= str 2
000D2Br 2  90 0C        	BCC	LAB_1CF2		; go evaluate result
000D2Dr 2               
000D2Dr 2               LAB_1CE6
000D2Dr 2  B1 B5        	LDA	(FAC2_2),Y		; get string 2 byte
000D2Fr 2  D1 AD        	CMP	(FAC1_1),Y		; compare with string 1 byte
000D31r 2  F0 EF        	BEQ	LAB_1CDB		; loop if bytes =
000D33r 2               
000D33r 2  A2 FF        	LDX	#$FF			; set str 1 < string 2
000D35r 2  B0 02        	BCS	LAB_1CF2		; branch if so
000D37r 2               
000D37r 2  A2 01        	LDX	#$01			;  set str 1 > string 2
000D39r 2               LAB_1CF2
000D39r 2  E8           	INX				; x = 0, 1 or 2
000D3Ar 2  8A           	TXA				; copy to A
000D3Br 2  2A           	ROL				; *2 (1, 2 or 4)
000D3Cr 2  25 63        	AND	Cflag			; AND with comparison evaluation flag
000D3Er 2  F0 02        	BEQ	LAB_1CFB		; branch if 0 (compare is false)
000D40r 2               
000D40r 2  A9 FF        	LDA	#$FF			; else set result true
000D42r 2               LAB_1CFB
000D42r 2  4C rr rr     	JMP	LAB_27DB		; save A as integer byte and return
000D45r 2               
000D45r 2               LAB_1CFE
000D45r 2  20 rr rr     	JSR	LAB_1C01		; scan for ",", else do syntax error then warm start
000D48r 2               
000D48r 2               ; perform DIM
000D48r 2               
000D48r 2               LAB_DIM
000D48r 2  AA           	TAX				; copy "DIM" flag to X
000D49r 2  20 rr rr     	JSR	LAB_1D10		; search for variable
000D4Cr 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
000D4Fr 2  D0 F4        	BNE	LAB_1CFE		; scan for "," and loop if not null
000D51r 2               
000D51r 2  60           	RTS
000D52r 2               
000D52r 2               ; perform << (left shift)
000D52r 2               
000D52r 2               LAB_LSHIFT
000D52r 2  20 rr rr     	JSR	GetPair		; get integer expression and byte (no sign check)
000D55r 2  A5 AE        	LDA	FAC1_2		; get expression high byte
000D57r 2  A6 78        	LDX	TempB			; get shift count
000D59r 2  F0 22        	BEQ	NoShift		; branch if zero
000D5Br 2               
000D5Br 2  E0 10        	CPX	#$10			; compare bit count with 16d
000D5Dr 2  B0 23        	BCS	TooBig		; branch if >=
000D5Fr 2               
000D5Fr 2               Ls_loop
000D5Fr 2  06 AF        	ASL	FAC1_3		; shift low byte
000D61r 2  2A           	ROL				; shift high byte
000D62r 2  CA           	DEX				; decrement bit count
000D63r 2  D0 FA        	BNE	Ls_loop		; loop if shift not complete
000D65r 2               
000D65r 2  A4 AF        	LDY	FAC1_3		; get expression low byte
000D67r 2  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
000D6Ar 2               
000D6Ar 2               ; perform >> (right shift)
000D6Ar 2               
000D6Ar 2               LAB_RSHIFT
000D6Ar 2  20 rr rr     	JSR	GetPair		; get integer expression and byte (no sign check)
000D6Dr 2  A5 AE        	LDA	FAC1_2		; get expression high byte
000D6Fr 2  A6 78        	LDX	TempB			; get shift count
000D71r 2  F0 0A        	BEQ	NoShift		; branch if zero
000D73r 2               
000D73r 2  E0 10        	CPX	#$10			; compare bit count with 16d
000D75r 2  B0 0B        	BCS	TooBig		; branch if >=
000D77r 2               
000D77r 2               Rs_loop
000D77r 2  4A           	LSR				; shift high byte
000D78r 2  66 AF        	ROR	FAC1_3		; shift low byte
000D7Ar 2  CA           	DEX				; decrement bit count
000D7Br 2  D0 FA        	BNE	Rs_loop		; loop if shift not complete
000D7Dr 2               
000D7Dr 2               NoShift
000D7Dr 2  A4 AF        	LDY	FAC1_3		; get expression low byte
000D7Fr 2  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
000D82r 2               
000D82r 2               TooBig
000D82r 2  A9 00        	LDA	#$00			; clear high byte
000D84r 2  A8           	TAY				; copy to low byte
000D85r 2  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
000D88r 2               
000D88r 2               GetPair
000D88r 2  20 rr rr     	JSR	LAB_EVBY		; evaluate byte expression, result in X
000D8Br 2  86 78        	STX	TempB			; save it
000D8Dr 2  20 rr rr     	JSR	LAB_279B		; copy FAC2 to FAC1 (get 2nd value in expression)
000D90r 2  4C rr rr     	JMP	LAB_EVIR		; evaluate integer expression (no sign check)
000D93r 2               
000D93r 2               ; search for variable
000D93r 2               
000D93r 2               ; return pointer to variable in Cvaral/Cvarah
000D93r 2               
000D93r 2               LAB_GVAR
000D93r 2  A2 00        	LDX	#$00			; set DIM flag = $00
000D95r 2  20 C2 00     	JSR	LAB_GBYT		; scan memory (1st character)
000D98r 2               LAB_1D10
000D98r 2  86 5E        	STX	Defdim		; save DIM flag
000D9Ar 2               LAB_1D12
000D9Ar 2  85 93        	STA	Varnm1		; save 1st character
000D9Cr 2  29 7F        	AND	#$7F			; clear FN flag bit
000D9Er 2  20 rr rr     	JSR	LAB_CASC		; check byte, return C=0 if<"A" or >"Z"
000DA1r 2  B0 03        	BCS	LAB_1D1F		; branch if ok
000DA3r 2               
000DA3r 2  4C rr rr     	JMP	LAB_SNER		; else syntax error then warm start
000DA6r 2               
000DA6r 2               					; was variable name so ..
000DA6r 2               LAB_1D1F
000DA6r 2  A2 00        	LDX	#$00			; clear 2nd character temp
000DA8r 2  86 5F        	STX	Dtypef		; clear data type flag, $FF=string, $00=numeric
000DAAr 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory (2nd character)
000DADr 2  90 05        	BCC	LAB_1D2D		; branch if character = "0"-"9" (ok)
000DAFr 2               
000DAFr 2               					; 2nd character wasn't "0" to "9" so ..
000DAFr 2  20 rr rr     	JSR	LAB_CASC		; check byte, return C=0 if<"A" or >"Z"
000DB2r 2  90 0B        	BCC	LAB_1D38		; branch if <"A" or >"Z" (go check if string)
000DB4r 2               
000DB4r 2               LAB_1D2D
000DB4r 2  AA           	TAX				; copy 2nd character
000DB5r 2               
000DB5r 2               					; ignore further (valid) characters in the variable name
000DB5r 2               LAB_1D2E
000DB5r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory (3rd character)
000DB8r 2  90 FB        	BCC	LAB_1D2E		; loop if character = "0"-"9" (ignore)
000DBAr 2               
000DBAr 2  20 rr rr     	JSR	LAB_CASC		; check byte, return C=0 if<"A" or >"Z"
000DBDr 2  B0 F6        	BCS	LAB_1D2E		; loop if character = "A"-"Z" (ignore)
000DBFr 2               
000DBFr 2               					; check if string variable
000DBFr 2               LAB_1D38
000DBFr 2  C9 24        	CMP	#'$'			; compare with "$"
000DC1r 2  D0 0B        	BNE	LAB_1D47		; branch if not string
000DC3r 2               
000DC3r 2               ; to introduce a new variable type (% suffix for integers say) then this branch
000DC3r 2               ; will need to go to that check and then that branch, if it fails, go to LAB_1D47
000DC3r 2               
000DC3r 2               					; type is string
000DC3r 2  A9 FF        	LDA	#$FF			; set data type = string
000DC5r 2  85 5F        	STA	Dtypef		; set data type flag, $FF=string, $00=numeric
000DC7r 2  8A           	TXA				; get 2nd character back
000DC8r 2  09 80        	ORA	#$80			; set top bit (indicate string var)
000DCAr 2  AA           	TAX				; copy back to 2nd character temp
000DCBr 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
000DCEr 2               
000DCEr 2               ; after we have determined the variable type we need to come back here to determine
000DCEr 2               ; if it's an array of type. this would plug in a%(b[,c[,d]])) integer arrays nicely
000DCEr 2               
000DCEr 2               
000DCEr 2               LAB_1D47				; gets here with character after var name in A
000DCEr 2  86 94        	STX	Varnm2		; save 2nd character
000DD0r 2  05 61        	ORA	Sufnxf		; or with subscript/FNX flag (or FN name)
000DD2r 2  C9 28        	CMP	#'('			; compare with "("
000DD4r 2  D0 03        	BNE	LAB_1D53		; branch if not "("
000DD6r 2               
000DD6r 2  4C rr rr     	JMP	LAB_1E17		; go find, or make, array
000DD9r 2               
000DD9r 2               ; either find or create var
000DD9r 2               ; var name (1st two characters only!) is in Varnm1,Varnm2
000DD9r 2               
000DD9r 2               					; variable name wasn't var(... so look for plain var
000DD9r 2               LAB_1D53
000DD9r 2  A9 00        	LDA	#$00			; clear A
000DDBr 2  85 61        	STA	Sufnxf		; clear subscript/FNX flag
000DDDr 2  A5 7B        	LDA	Svarl			; get start of vars low byte
000DDFr 2  A6 7C        	LDX	Svarh			; get start of vars high byte
000DE1r 2  A0 00        	LDY	#$00			; clear index
000DE3r 2               LAB_1D5D
000DE3r 2  86 AB        	STX	Vrschh		; save search address high byte
000DE5r 2               LAB_1D5F
000DE5r 2  85 AA        	STA	Vrschl		; save search address low byte
000DE7r 2  E4 7E        	CPX	Sarryh		; compare high address with var space end
000DE9r 2  D0 04        	BNE	LAB_1D69		; skip next compare if <>
000DEBr 2               
000DEBr 2               					; high addresses were = so compare low addresses
000DEBr 2  C5 7D        	CMP	Sarryl		; compare low address with var space end
000DEDr 2  F0 2C        	BEQ	LAB_1D8B		; if not found go make new var
000DEFr 2               
000DEFr 2               LAB_1D69
000DEFr 2  A5 93        	LDA	Varnm1		; get 1st character of var to find
000DF1r 2  D1 AA        	CMP	(Vrschl),Y		; compare with variable name 1st character
000DF3r 2  D0 08        	BNE	LAB_1D77		; branch if no match
000DF5r 2               
000DF5r 2               					; 1st characters match so compare 2nd characters
000DF5r 2  A5 94        	LDA	Varnm2		; get 2nd character of var to find
000DF7r 2  C8           	INY				; index to point to variable name 2nd character
000DF8r 2  D1 AA        	CMP	(Vrschl),Y		; compare with variable name 2nd character
000DFAr 2  F0 69        	BEQ	LAB_1DD7		; branch if match (found var)
000DFCr 2               
000DFCr 2  88           	DEY				; else decrement index (now = $00)
000DFDr 2               LAB_1D77
000DFDr 2  18           	CLC				; clear carry for add
000DFEr 2  A5 AA        	LDA	Vrschl		; get search address low byte
000E00r 2  69 06        	ADC	#$06			; +6 (offset to next var name)
000E02r 2  90 E1        	BCC	LAB_1D5F		; loop if no overflow to high byte
000E04r 2               
000E04r 2  E8           	INX				; else increment high byte
000E05r 2  D0 DC        	BNE	LAB_1D5D		; loop always (RAM doesn't extend to $FFFF !)
000E07r 2               
000E07r 2               ; check byte, return C=0 if<"A" or >"Z" or "a" to "z"
000E07r 2               
000E07r 2               LAB_CASC
000E07r 2  C9 61        	CMP	#'a'			; compare with "a"
000E09r 2  B0 0A        	BCS	LAB_1D83		; go check <"z"+1
000E0Br 2               
000E0Br 2               ; check byte, return C=0 if<"A" or >"Z"
000E0Br 2               
000E0Br 2               LAB_1D82
000E0Br 2  C9 41        	CMP	#'A'			; compare with "A"
000E0Dr 2  90 05        	BCC	LAB_1D8A		; exit if less
000E0Fr 2               
000E0Fr 2               					; carry is set
000E0Fr 2  E9 5B        	SBC	#$5B			; subtract "Z"+1
000E11r 2  38           	SEC				; set carry
000E12r 2  E9 A5        	SBC	#$A5			; subtract $A5 (restore byte)
000E14r 2               					; carry clear if byte>$5A
000E14r 2               LAB_1D8A
000E14r 2  60           	RTS
000E15r 2               
000E15r 2               LAB_1D83
000E15r 2  E9 7B        	SBC	#$7B			; subtract "z"+1
000E17r 2  38           	SEC				; set carry
000E18r 2  E9 85        	SBC	#$85			; subtract $85 (restore byte)
000E1Ar 2               					; carry clear if byte>$7A
000E1Ar 2  60           	RTS
000E1Br 2               
000E1Br 2               					; reached end of variable mem without match
000E1Br 2               					; .. so create new variable
000E1Br 2               LAB_1D8B
000E1Br 2  68           	PLA				; pop return address low byte
000E1Cr 2  48           	PHA				; push return address low byte
000E1Dr 2               LAB_1C18p2	= LAB_1C18+2
000E1Dr 2  C9 rr        	CMP	#<LAB_1C18p2	; compare with expected calling routine return low byte
000E1Fr 2  D0 05        	BNE	LAB_1D98		; if not get (var) go create new var
000E21r 2               
000E21r 2               ; This will only drop through if the call was from LAB_1C18 and is only called
000E21r 2               ; from there if it is searching for a variable from the RHS of a LET a=b statement
000E21r 2               ; it prevents the creation of variables not assigned a value.
000E21r 2               
000E21r 2               ; value returned by this is either numeric zero (exponent byte is $00) or null string
000E21r 2               ; (descriptor length byte is $00). in fact a pointer to any $00 byte would have done.
000E21r 2               
000E21r 2               ; doing this saves 6 bytes of variable memory and 168 machine cycles of time
000E21r 2               
000E21r 2               ; this is where you would put the undefined variable error call e.g.
000E21r 2               
000E21r 2               ;					; variable doesn't exist so flag error
000E21r 2               ;	LDX	#$24			; error code $24 ("undefined variable" error)
000E21r 2               ;	JMP	LAB_XERR		; do error #X then warm start
000E21r 2               
000E21r 2               ; the above code has been tested and works a treat! (it replaces the three code lines
000E21r 2               ; below)
000E21r 2               
000E21r 2               					; else return dummy null value
000E21r 2  A9 rr        	LDA	#<LAB_1D96		; low byte point to $00,$00
000E23r 2               					; (uses part of misc constants table)
000E23r 2  A0 rr        	LDY	#>LAB_1D96		; high byte point to $00,$00
000E25r 2  60           	RTS
000E26r 2               
000E26r 2               					; create new numeric variable
000E26r 2               LAB_1D98
000E26r 2  A5 7D        	LDA	Sarryl		; get var mem end low byte
000E28r 2  A4 7E        	LDY	Sarryh		; get var mem end high byte
000E2Ar 2  85 AA        	STA	Ostrtl		; save old block start low byte
000E2Cr 2  84 AB        	STY	Ostrth		; save old block start high byte
000E2Er 2  A5 7F        	LDA	Earryl		; get array mem end low byte
000E30r 2  A4 80        	LDY	Earryh		; get array mem end high byte
000E32r 2  85 A6        	STA	Obendl		; save old block end low byte
000E34r 2  84 A7        	STY	Obendh		; save old block end high byte
000E36r 2  18           	CLC				; clear carry for add
000E37r 2  69 06        	ADC	#$06			; +6 (space for one var)
000E39r 2  90 01        	BCC	LAB_1DAE		; branch if no overflow to high byte
000E3Br 2               
000E3Br 2  C8           	INY				; else increment high byte
000E3Cr 2               LAB_1DAE
000E3Cr 2  85 A4        	STA	Nbendl		; set new block end low byte
000E3Er 2  84 A5        	STY	Nbendh		; set new block end high byte
000E40r 2  20 rr rr     	JSR	LAB_11CF		; open up space in memory
000E43r 2  A5 A4        	LDA	Nbendl		; get new start low byte
000E45r 2  A4 A5        	LDY	Nbendh		; get new start high byte (-$100)
000E47r 2  C8           	INY				; correct high byte
000E48r 2  85 7D        	STA	Sarryl		; save new var mem end low byte
000E4Ar 2  84 7E        	STY	Sarryh		; save new var mem end high byte
000E4Cr 2  A0 00        	LDY	#$00			; clear index
000E4Er 2  A5 93        	LDA	Varnm1		; get var name 1st character
000E50r 2  91 AA        	STA	(Vrschl),Y		; save var name 1st character
000E52r 2  C8           	INY				; increment index
000E53r 2  A5 94        	LDA	Varnm2		; get var name 2nd character
000E55r 2  91 AA        	STA	(Vrschl),Y		; save var name 2nd character
000E57r 2  A9 00        	LDA	#$00			; clear A
000E59r 2  C8           	INY				; increment index
000E5Ar 2  91 AA        	STA	(Vrschl),Y		; initialise var byte
000E5Cr 2  C8           	INY				; increment index
000E5Dr 2  91 AA        	STA	(Vrschl),Y		; initialise var byte
000E5Fr 2  C8           	INY				; increment index
000E60r 2  91 AA        	STA	(Vrschl),Y		; initialise var byte
000E62r 2  C8           	INY				; increment index
000E63r 2  91 AA        	STA	(Vrschl),Y		; initialise var byte
000E65r 2               
000E65r 2               					; found a match for var ((Vrschl) = ptr)
000E65r 2               LAB_1DD7
000E65r 2  A5 AA        	LDA	Vrschl		; get var address low byte
000E67r 2  18           	CLC				; clear carry for add
000E68r 2  69 02        	ADC	#$02			; +2 (offset past var name bytes)
000E6Ar 2  A4 AB        	LDY	Vrschh		; get var address high byte
000E6Cr 2  90 01        	BCC	LAB_1DE1		; branch if no overflow from add
000E6Er 2               
000E6Er 2  C8           	INY				; else increment high byte
000E6Fr 2               LAB_1DE1
000E6Fr 2  85 95        	STA	Cvaral		; save current var address low byte
000E71r 2  84 96        	STY	Cvarah		; save current var address high byte
000E73r 2  60           	RTS
000E74r 2               
000E74r 2               ; set-up array pointer (Adatal/h) to first element in array
000E74r 2               ; set Adatal,Adatah to Astrtl,Astrth+2*Dimcnt+#$05
000E74r 2               
000E74r 2               LAB_1DE6
000E74r 2  A5 5D        	LDA	Dimcnt		; get # of dimensions (1, 2 or 3)
000E76r 2  0A           	ASL				; *2 (also clears the carry !)
000E77r 2  69 05        	ADC	#$05			; +5 (result is 7, 9 or 11 here)
000E79r 2  65 AA        	ADC	Astrtl		; add array start pointer low byte
000E7Br 2  A4 AB        	LDY	Astrth		; get array pointer high byte
000E7Dr 2  90 01        	BCC	LAB_1DF2		; branch if no overflow
000E7Fr 2               
000E7Fr 2  C8           	INY				; else increment high byte
000E80r 2               LAB_1DF2
000E80r 2  85 A4        	STA	Adatal		; save array data pointer low byte
000E82r 2  84 A5        	STY	Adatah		; save array data pointer high byte
000E84r 2  60           	RTS
000E85r 2               
000E85r 2               ; evaluate integer expression
000E85r 2               
000E85r 2               LAB_EVIN
000E85r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
000E88r 2  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
000E8Br 2               					; else do type mismatch
000E8Br 2               
000E8Br 2               ; evaluate integer expression (no check)
000E8Br 2               
000E8Br 2               LAB_EVPI
000E8Br 2  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
000E8Dr 2  30 0D        	BMI	LAB_1E12		; do function call error if -ve
000E8Fr 2               
000E8Fr 2               ; evaluate integer expression (no sign check)
000E8Fr 2               
000E8Fr 2               LAB_EVIR
000E8Fr 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
000E91r 2  C9 90        	CMP	#$90			; compare with exponent = 2^16 (n>2^15)
000E93r 2  90 09        	BCC	LAB_1E14		; branch if n<2^16 (is ok)
000E95r 2               
000E95r 2  A9 rr        	LDA	#<LAB_1DF7		; set pointer low byte to -32768
000E97r 2  A0 rr        	LDY	#>LAB_1DF7		; set pointer high byte to -32768
000E99r 2  20 rr rr     	JSR	LAB_27F8		; compare FAC1 with (AY)
000E9Cr 2               LAB_1E12
000E9Cr 2  D0 74        	BNE	LAB_FCER		; if <> do function call error then warm start
000E9Er 2               
000E9Er 2               LAB_1E14
000E9Er 2  4C rr rr     	JMP	LAB_2831		; convert FAC1 floating-to-fixed and return
000EA1r 2               
000EA1r 2               ; find or make array
000EA1r 2               
000EA1r 2               LAB_1E17
000EA1r 2  A5 5E        	LDA	Defdim		; get DIM flag
000EA3r 2  48           	PHA				; push it
000EA4r 2  A5 5F        	LDA	Dtypef		; get data type flag, $FF=string, $00=numeric
000EA6r 2  48           	PHA				; push it
000EA7r 2  A0 00        	LDY	#$00			; clear dimensions count
000EA9r 2               
000EA9r 2               ; now get the array dimension(s) and stack it (them) before the data type and DIM flag
000EA9r 2               
000EA9r 2               LAB_1E1F
000EA9r 2  98           	TYA				; copy dimensions count
000EAAr 2  48           	PHA				; save it
000EABr 2  A5 94        	LDA	Varnm2		; get array name 2nd byte
000EADr 2  48           	PHA				; save it
000EAEr 2  A5 93        	LDA	Varnm1		; get array name 1st byte
000EB0r 2  48           	PHA				; save it
000EB1r 2  20 rr rr     	JSR	LAB_EVIN		; evaluate integer expression
000EB4r 2  68           	PLA				; pull array name 1st byte
000EB5r 2  85 93        	STA	Varnm1		; restore array name 1st byte
000EB7r 2  68           	PLA				; pull array name 2nd byte
000EB8r 2  85 94        	STA	Varnm2		; restore array name 2nd byte
000EBAr 2  68           	PLA				; pull dimensions count
000EBBr 2  A8           	TAY				; restore it
000EBCr 2  BA           	TSX				; copy stack pointer
000EBDr 2  BD 02 01     	LDA	LAB_STAK+2,X	; get DIM flag
000EC0r 2  48           	PHA				; push it
000EC1r 2  BD 01 01     	LDA	LAB_STAK+1,X	; get data type flag
000EC4r 2  48           	PHA				; push it
000EC5r 2  A5 AE        	LDA	FAC1_2		; get this dimension size high byte
000EC7r 2  9D 02 01     	STA	LAB_STAK+2,X	; stack before flag bytes
000ECAr 2  A5 AF        	LDA	FAC1_3		; get this dimension size low byte
000ECCr 2  9D 01 01     	STA	LAB_STAK+1,X	; stack before flag bytes
000ECFr 2  C8           	INY				; increment dimensions count
000ED0r 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
000ED3r 2  C9 2C        	CMP	#','			; compare with ","
000ED5r 2  F0 D2        	BEQ	LAB_1E1F		; if found go do next dimension
000ED7r 2               
000ED7r 2  84 5D        	STY	Dimcnt		; store dimensions count
000ED9r 2  20 rr rr     	JSR	LAB_1BFB		; scan for ")" , else do syntax error then warm start
000EDCr 2  68           	PLA				; pull data type flag
000EDDr 2  85 5F        	STA	Dtypef		; restore data type flag, $FF=string, $00=numeric
000EDFr 2  68           	PLA				; pull DIM flag
000EE0r 2  85 5E        	STA	Defdim		; restore DIM flag
000EE2r 2  A6 7D        	LDX	Sarryl		; get array mem start low byte
000EE4r 2  A5 7E        	LDA	Sarryh		; get array mem start high byte
000EE6r 2               
000EE6r 2               ; now check to see if we are at the end of array memory (we would be if there were
000EE6r 2               ; no arrays).
000EE6r 2               
000EE6r 2               LAB_1E5C
000EE6r 2  86 AA        	STX	Astrtl		; save as array start pointer low byte
000EE8r 2  85 AB        	STA	Astrth		; save as array start pointer high byte
000EEAr 2  C5 80        	CMP	Earryh		; compare with array mem end high byte
000EECr 2  D0 04        	BNE	LAB_1E68		; branch if not reached array mem end
000EEEr 2               
000EEEr 2  E4 7F        	CPX	Earryl		; else compare with array mem end low byte
000EF0r 2  F0 39        	BEQ	LAB_1EA1		; go build array if not found
000EF2r 2               
000EF2r 2               					; search for array
000EF2r 2               LAB_1E68
000EF2r 2  A0 00        	LDY	#$00			; clear index
000EF4r 2  B1 AA        	LDA	(Astrtl),Y		; get array name first byte
000EF6r 2  C8           	INY				; increment index to second name byte
000EF7r 2  C5 93        	CMP	Varnm1		; compare with this array name first byte
000EF9r 2  D0 06        	BNE	LAB_1E77		; branch if no match
000EFBr 2               
000EFBr 2  A5 94        	LDA	Varnm2		; else get this array name second byte
000EFDr 2  D1 AA        	CMP	(Astrtl),Y		; compare with array name second byte
000EFFr 2  F0 16        	BEQ	LAB_1E8D		; array found so branch
000F01r 2               
000F01r 2               					; no match
000F01r 2               LAB_1E77
000F01r 2  C8           	INY				; increment index
000F02r 2  B1 AA        	LDA	(Astrtl),Y		; get array size low byte
000F04r 2  18           	CLC				; clear carry for add
000F05r 2  65 AA        	ADC	Astrtl		; add array start pointer low byte
000F07r 2  AA           	TAX				; copy low byte to X
000F08r 2  C8           	INY				; increment index
000F09r 2  B1 AA        	LDA	(Astrtl),Y		; get array size high byte
000F0Br 2  65 AB        	ADC	Astrth		; add array mem pointer high byte
000F0Dr 2  90 D7        	BCC	LAB_1E5C		; if no overflow go check next array
000F0Fr 2               
000F0Fr 2               ; do array bounds error
000F0Fr 2               
000F0Fr 2               LAB_1E85
000F0Fr 2  A2 10        	LDX	#$10			; error code $10 ("Array bounds" error)
000F11r 2  2C           	.byte	$2C			; makes next bit BIT LAB_08A2
000F12r 2               
000F12r 2               ; do function call error
000F12r 2               
000F12r 2               LAB_FCER
000F12r 2  A2 08        	LDX	#$08			; error code $08 ("Function call" error)
000F14r 2               LAB_1E8A
000F14r 2  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
000F17r 2               
000F17r 2               					; found array, are we trying to dimension it?
000F17r 2               LAB_1E8D
000F17r 2  A2 12        	LDX	#$12			; set error $12 ("Double dimension" error)
000F19r 2  A5 5E        	LDA	Defdim		; get DIM flag
000F1Br 2  D0 F7        	BNE	LAB_1E8A		; if we are trying to dimension it do error #X, then warm
000F1Dr 2               					; start
000F1Dr 2               
000F1Dr 2               ; found the array and we're not dimensioning it so we must find an element in it
000F1Dr 2               
000F1Dr 2  20 rr rr     	JSR	LAB_1DE6		; set-up array pointer (Adatal/h) to first element in array
000F20r 2               					; (Astrtl,Astrth points to start of array)
000F20r 2  A5 5D        	LDA	Dimcnt		; get dimensions count
000F22r 2  A0 04        	LDY	#$04			; set index to array's # of dimensions
000F24r 2  D1 AA        	CMP	(Astrtl),Y		; compare with no of dimensions
000F26r 2  D0 E7        	BNE	LAB_1E85		; if wrong do array bounds error, could do "Wrong
000F28r 2               					; dimensions" error here .. if we want a different
000F28r 2               					; error message
000F28r 2               
000F28r 2  4C rr rr     	JMP	LAB_1F28		; found array so go get element
000F2Br 2               					; (could jump to LAB_1F28 as all LAB_1F24 does is take
000F2Br 2               					; Dimcnt and save it at (Astrtl),Y which is already the
000F2Br 2               					; same or we would have taken the BNE)
000F2Br 2               
000F2Br 2               					; array not found, so build it
000F2Br 2               LAB_1EA1
000F2Br 2  20 rr rr     	JSR	LAB_1DE6		; set-up array pointer (Adatal/h) to first element in array
000F2Er 2               					; (Astrtl,Astrth points to start of array)
000F2Er 2  20 rr rr     	JSR	LAB_121F		; check available memory, "Out of memory" error if no room
000F31r 2               					; addr to check is in AY (low/high)
000F31r 2  A0 00        	LDY	#$00			; clear Y (don't need to clear A)
000F33r 2  84 BB        	STY	Aspth			; clear array data size high byte
000F35r 2  A5 93        	LDA	Varnm1		; get variable name 1st byte
000F37r 2  91 AA        	STA	(Astrtl),Y		; save array name 1st byte
000F39r 2  C8           	INY				; increment index
000F3Ar 2  A5 94        	LDA	Varnm2		; get variable name 2nd byte
000F3Cr 2  91 AA        	STA	(Astrtl),Y		; save array name 2nd byte
000F3Er 2  A5 5D        	LDA	Dimcnt		; get dimensions count
000F40r 2  A0 04        	LDY	#$04			; index to dimension count
000F42r 2  84 BA        	STY	Asptl			; set array data size low byte (four bytes per element)
000F44r 2  91 AA        	STA	(Astrtl),Y		; set array's dimensions count
000F46r 2               
000F46r 2               					; now calculate the size of the data space for the array
000F46r 2  18           	CLC				; clear carry for add (clear on subsequent loops)
000F47r 2               LAB_1EC0
000F47r 2  A2 0B        	LDX	#$0B			; set default dimension value low byte
000F49r 2  A9 00        	LDA	#$00			; set default dimension value high byte
000F4Br 2  24 5E        	BIT	Defdim		; test default DIM flag
000F4Dr 2  50 07        	BVC	LAB_1ED0		; branch if b6 of Defdim is clear
000F4Fr 2               
000F4Fr 2  68           	PLA				; else pull dimension value low byte
000F50r 2  69 01        	ADC	#$01			; +1 (allow for zeroeth element)
000F52r 2  AA           	TAX				; copy low byte to X
000F53r 2  68           	PLA				; pull dimension value high byte
000F54r 2  69 00        	ADC	#$00			; add carry from low byte
000F56r 2               
000F56r 2               LAB_1ED0
000F56r 2  C8           	INY				; index to dimension value high byte
000F57r 2  91 AA        	STA	(Astrtl),Y		; save dimension value high byte
000F59r 2  C8           	INY				; index to dimension value high byte
000F5Ar 2  8A           	TXA				; get dimension value low byte
000F5Br 2  91 AA        	STA	(Astrtl),Y		; save dimension value low byte
000F5Dr 2  20 rr rr     	JSR	LAB_1F7C		; does XY = (Astrtl),Y * (Asptl)
000F60r 2  86 BA        	STX	Asptl			; save array data size low byte
000F62r 2  85 BB        	STA	Aspth			; save array data size high byte
000F64r 2  A4 71        	LDY	ut1_pl		; restore index (saved by subroutine)
000F66r 2  C6 5D        	DEC	Dimcnt		; decrement dimensions count
000F68r 2  D0 DD        	BNE	LAB_1EC0		; loop while not = 0
000F6Ar 2               
000F6Ar 2  65 A5        	ADC	Adatah		; add size high byte to first element high byte
000F6Cr 2               					; (carry is always clear here)
000F6Cr 2  B0 5D        	BCS	LAB_1F45		; if overflow go do "Out of memory" error
000F6Er 2               
000F6Er 2  85 A5        	STA	Adatah		; save end of array high byte
000F70r 2  A8           	TAY				; copy end high byte to Y
000F71r 2  8A           	TXA				; get array size low byte
000F72r 2  65 A4        	ADC	Adatal		; add array start low byte
000F74r 2  90 03        	BCC	LAB_1EF3		; branch if no carry
000F76r 2               
000F76r 2  C8           	INY				; else increment end of array high byte
000F77r 2  F0 52        	BEQ	LAB_1F45		; if overflow go do "Out of memory" error
000F79r 2               
000F79r 2               					; set-up mostly complete, now zero the array
000F79r 2               LAB_1EF3
000F79r 2  20 rr rr     	JSR	LAB_121F		; check available memory, "Out of memory" error if no room
000F7Cr 2               					; addr to check is in AY (low/high)
000F7Cr 2  85 7F        	STA	Earryl		; save array mem end low byte
000F7Er 2  84 80        	STY	Earryh		; save array mem end high byte
000F80r 2  A9 00        	LDA	#$00			; clear byte for array clear
000F82r 2  E6 BB        	INC	Aspth			; increment array size high byte (now block count)
000F84r 2  A4 BA        	LDY	Asptl			; get array size low byte (now index to block)
000F86r 2  F0 05        	BEQ	LAB_1F07		; branch if low byte = $00
000F88r 2               
000F88r 2               LAB_1F02
000F88r 2  88           	DEY				; decrement index (do 0 to n-1)
000F89r 2  91 A4        	STA	(Adatal),Y		; zero byte
000F8Br 2  D0 FB        	BNE	LAB_1F02		; loop until this block done
000F8Dr 2               
000F8Dr 2               LAB_1F07
000F8Dr 2  C6 A5        	DEC	Adatah		; decrement array pointer high byte
000F8Fr 2  C6 BB        	DEC	Aspth			; decrement block count high byte
000F91r 2  D0 F5        	BNE	LAB_1F02		; loop until all blocks done
000F93r 2               
000F93r 2  E6 A5        	INC	Adatah		; correct for last loop
000F95r 2  38           	SEC				; set carry for subtract
000F96r 2  A0 02        	LDY	#$02			; index to array size low byte
000F98r 2  A5 7F        	LDA	Earryl		; get array mem end low byte
000F9Ar 2  E5 AA        	SBC	Astrtl		; subtract array start low byte
000F9Cr 2  91 AA        	STA	(Astrtl),Y		; save array size low byte
000F9Er 2  C8           	INY				; index to array size high byte
000F9Fr 2  A5 80        	LDA	Earryh		; get array mem end high byte
000FA1r 2  E5 AB        	SBC	Astrth		; subtract array start high byte
000FA3r 2  91 AA        	STA	(Astrtl),Y		; save array size high byte
000FA5r 2  A5 5E        	LDA	Defdim		; get default DIM flag
000FA7r 2  D0 53        	BNE	LAB_1F7B		; exit (RET) if this was a DIM command
000FA9r 2               
000FA9r 2               					; else, find element
000FA9r 2  C8           	INY				; index to # of dimensions
000FAAr 2               
000FAAr 2               LAB_1F24
000FAAr 2  B1 AA        	LDA	(Astrtl),Y		; get array's dimension count
000FACr 2  85 5D        	STA	Dimcnt		; save it
000FAEr 2               
000FAEr 2               ; we have found, or built, the array. now we need to find the element
000FAEr 2               
000FAEr 2               LAB_1F28
000FAEr 2  A9 00        	LDA	#$00			; clear byte
000FB0r 2  85 BA        	STA	Asptl			; clear array data pointer low byte
000FB2r 2               LAB_1F2C
000FB2r 2  85 BB        	STA	Aspth			; save array data pointer high byte
000FB4r 2  C8           	INY				; increment index (point to array bound high byte)
000FB5r 2  68           	PLA				; pull array index low byte
000FB6r 2  AA           	TAX				; copy to X
000FB7r 2  85 AE        	STA	FAC1_2		; save index low byte to FAC1 mantissa2
000FB9r 2  68           	PLA				; pull array index high byte
000FBAr 2  85 AF        	STA	FAC1_3		; save index high byte to FAC1 mantissa3
000FBCr 2  D1 AA        	CMP	(Astrtl),Y		; compare with array bound high byte
000FBEr 2  90 0E        	BCC	LAB_1F48		; branch if within bounds
000FC0r 2               
000FC0r 2  D0 06        	BNE	LAB_1F42		; if outside bounds do array bounds error
000FC2r 2               
000FC2r 2               					; else high byte was = so test low bytes
000FC2r 2  C8           	INY				; index to array bound low byte
000FC3r 2  8A           	TXA				; get array index low byte
000FC4r 2  D1 AA        	CMP	(Astrtl),Y		; compare with array bound low byte
000FC6r 2  90 07        	BCC	LAB_1F49		; branch if within bounds
000FC8r 2               
000FC8r 2               LAB_1F42
000FC8r 2  4C rr rr     	JMP	LAB_1E85		; else do array bounds error
000FCBr 2               
000FCBr 2               LAB_1F45
000FCBr 2  4C rr rr     	JMP	LAB_OMER		; do "Out of memory" error then warm start
000FCEr 2               
000FCEr 2               LAB_1F48
000FCEr 2  C8           	INY				; index to array bound low byte
000FCFr 2               LAB_1F49
000FCFr 2  A5 BB        	LDA	Aspth			; get array data pointer high byte
000FD1r 2  05 BA        	ORA	Asptl			; OR with array data pointer low byte
000FD3r 2  F0 0A        	BEQ	LAB_1F5A		; branch if array data pointer = null (skip multiply)
000FD5r 2               
000FD5r 2  20 rr rr     	JSR	LAB_1F7C		; does XY = (Astrtl),Y * (Asptl)
000FD8r 2  8A           	TXA				; get result low byte
000FD9r 2  65 AE        	ADC	FAC1_2		; add index low byte from FAC1 mantissa2
000FDBr 2  AA           	TAX				; save result low byte
000FDCr 2  98           	TYA				; get result high byte
000FDDr 2  A4 71        	LDY	ut1_pl		; restore index
000FDFr 2               LAB_1F5A
000FDFr 2  65 AF        	ADC	FAC1_3		; add index high byte from FAC1 mantissa3
000FE1r 2  86 BA        	STX	Asptl			; save array data pointer low byte
000FE3r 2  C6 5D        	DEC	Dimcnt		; decrement dimensions count
000FE5r 2  D0 CB        	BNE	LAB_1F2C		; loop if dimensions still to do
000FE7r 2               
000FE7r 2  06 BA        	ASL	Asptl			; array data pointer low byte * 2
000FE9r 2  2A           	ROL				; array data pointer high byte * 2
000FEAr 2  06 BA        	ASL	Asptl			; array data pointer low byte * 4
000FECr 2  2A           	ROL				; array data pointer high byte * 4
000FEDr 2  A8           	TAY				; copy high byte
000FEEr 2  A5 BA        	LDA	Asptl			; get low byte
000FF0r 2  65 A4        	ADC	Adatal		; add array data start pointer low byte
000FF2r 2  85 95        	STA	Cvaral		; save as current var address low byte
000FF4r 2  98           	TYA				; get high byte back
000FF5r 2  65 A5        	ADC	Adatah		; add array data start pointer high byte
000FF7r 2  85 96        	STA	Cvarah		; save as current var address high byte
000FF9r 2  A8           	TAY				; copy high byte to Y
000FFAr 2  A5 95        	LDA	Cvaral		; get current var address low byte
000FFCr 2               LAB_1F7B
000FFCr 2  60           	RTS
000FFDr 2               
000FFDr 2               ; does XY = (Astrtl),Y * (Asptl)
000FFDr 2               
000FFDr 2               LAB_1F7C
000FFDr 2  84 71        	STY	ut1_pl		; save index
000FFFr 2  B1 AA        	LDA	(Astrtl),Y		; get dimension size low byte
001001r 2  85 76        	STA	dims_l		; save dimension size low byte
001003r 2  88           	DEY				; decrement index
001004r 2  B1 AA        	LDA	(Astrtl),Y		; get dimension size high byte
001006r 2  85 77        	STA	dims_h		; save dimension size high byte
001008r 2               
001008r 2  A9 10        	LDA	#$10			; count = $10 (16 bit multiply)
00100Ar 2  85 A8        	STA	numbit		; save bit count
00100Cr 2  A2 00        	LDX	#$00			; clear result low byte
00100Er 2  A0 00        	LDY	#$00			; clear result high byte
001010r 2               LAB_1F8F
001010r 2  8A           	TXA				; get result low byte
001011r 2  0A           	ASL				; *2
001012r 2  AA           	TAX				; save result low byte
001013r 2  98           	TYA				; get result high byte
001014r 2  2A           	ROL				; *2
001015r 2  A8           	TAY				; save result high byte
001016r 2  B0 B3        	BCS	LAB_1F45		; if overflow go do "Out of memory" error
001018r 2               
001018r 2  06 BA        	ASL	Asptl			; shift multiplier low byte
00101Ar 2  26 BB        	ROL	Aspth			; shift multiplier high byte
00101Cr 2  90 0B        	BCC	LAB_1FA8		; skip add if no carry
00101Er 2               
00101Er 2  18           	CLC				; else clear carry for add
00101Fr 2  8A           	TXA				; get result low byte
001020r 2  65 76        	ADC	dims_l		; add dimension size low byte
001022r 2  AA           	TAX				; save result low byte
001023r 2  98           	TYA				; get result high byte
001024r 2  65 77        	ADC	dims_h		; add dimension size high byte
001026r 2  A8           	TAY				; save result high byte
001027r 2  B0 A2        	BCS	LAB_1F45		; if overflow go do "Out of memory" error
001029r 2               
001029r 2               LAB_1FA8
001029r 2  C6 A8        	DEC	numbit		; decrement bit count
00102Br 2  D0 E3        	BNE	LAB_1F8F		; loop until all done
00102Dr 2               
00102Dr 2  60           	RTS
00102Er 2               
00102Er 2               ; perform FRE()
00102Er 2               
00102Er 2               LAB_FRE
00102Er 2  A5 5F        	LDA	Dtypef		; get data type flag, $FF=string, $00=numeric
001030r 2  10 03        	BPL	LAB_1FB4		; branch if numeric
001032r 2               
001032r 2  20 rr rr     	JSR	LAB_22B6		; pop string off descriptor stack, or from top of string
001035r 2               					; space returns with A = length, X=$71=pointer low byte,
001035r 2               					; Y=$72=pointer high byte
001035r 2               
001035r 2               					; FRE(n) was numeric so do this
001035r 2               LAB_1FB4
001035r 2  20 rr rr     	JSR	LAB_GARB		; go do garbage collection
001038r 2  38           	SEC				; set carry for subtract
001039r 2  A5 81        	LDA	Sstorl		; get bottom of string space low byte
00103Br 2  E5 7F        	SBC	Earryl		; subtract array mem end low byte
00103Dr 2  A8           	TAY				; copy result to Y
00103Er 2  A5 82        	LDA	Sstorh		; get bottom of string space high byte
001040r 2  E5 80        	SBC	Earryh		; subtract array mem end high byte
001042r 2               
001042r 2               ; save and convert integer AY to FAC1
001042r 2               
001042r 2               LAB_AYFC
001042r 2  46 5F        	LSR	Dtypef		; clear data type flag, $FF=string, $00=numeric
001044r 2  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
001046r 2  84 AE        	STY	FAC1_2		; save FAC1 mantissa2
001048r 2  A2 90        	LDX	#$90			; set exponent=2^16 (integer)
00104Ar 2  4C rr rr     	JMP	LAB_27E3		; set exp=X, clear FAC1_3, normalise and return
00104Dr 2               
00104Dr 2               ; perform POS()
00104Dr 2               
00104Dr 2               LAB_POS
00104Dr 2  A4 0E        	LDY	TPos			; get terminal position
00104Fr 2               
00104Fr 2               ; convert Y to byte in FAC1
00104Fr 2               
00104Fr 2               LAB_1FD0
00104Fr 2  A9 00        	LDA	#$00			; clear high byte
001051r 2  F0 EF        	BEQ	LAB_AYFC		; always save and convert integer AY to FAC1 and return
001053r 2               
001053r 2               ; check not Direct (used by DEF and INPUT)
001053r 2               
001053r 2               LAB_CKRN
001053r 2  A6 88        	LDX	Clineh		; get current line high byte
001055r 2  E8           	INX				; increment it
001056r 2  D0 A4        	BNE	LAB_1F7B		; return if can continue not direct mode
001058r 2               
001058r 2               					; else do illegal direct error
001058r 2               LAB_1FD9
001058r 2  A2 16        	LDX	#$16			; error code $16 ("Illegal direct" error)
00105Ar 2               LAB_1FDB
00105Ar 2  4C rr rr     	JMP	LAB_XERR		; go do error #X, then warm start
00105Dr 2               
00105Dr 2               ; perform DEF
00105Dr 2               
00105Dr 2               LAB_DEF
00105Dr 2  20 rr rr     	JSR	LAB_200B		; check FNx syntax
001060r 2  85 9C        	STA	func_l		; save function pointer low byte
001062r 2  84 9D        	STY	func_h		; save function pointer high byte
001064r 2  20 rr rr     	JSR	LAB_CKRN		; check not Direct (back here if ok)
001067r 2  20 rr rr     	JSR	LAB_1BFE		; scan for "(" , else do syntax error then warm start
00106Ar 2  A9 80        	LDA	#$80			; set flag for FNx
00106Cr 2  85 61        	STA	Sufnxf		; save subscript/FNx flag
00106Er 2  20 rr rr     	JSR	LAB_GVAR		; get (var) address
001071r 2  20 rr rr     	JSR	LAB_CTNM		; check if source is numeric, else do type mismatch
001074r 2  20 rr rr     	JSR	LAB_1BFB		; scan for ")" , else do syntax error then warm start
001077r 2  A9 C1        	LDA	#TK_EQUAL		; get = token
001079r 2  20 rr rr     	JSR	LAB_SCCA		; scan for CHR$(A), else do syntax error then warm start
00107Cr 2  A5 96        	LDA	Cvarah		; get current var address high byte
00107Er 2  48           	PHA				; push it
00107Fr 2  A5 95        	LDA	Cvaral		; get current var address low byte
001081r 2  48           	PHA				; push it
001082r 2  A5 C4        	LDA	Bpntrh		; get BASIC execute pointer high byte
001084r 2  48           	PHA				; push it
001085r 2  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte
001087r 2  48           	PHA				; push it
001088r 2  20 rr rr     	JSR	LAB_DATA		; go perform DATA
00108Br 2  4C rr rr     	JMP	LAB_207A		; put execute pointer and variable pointer into function
00108Er 2               					; and return
00108Er 2               
00108Er 2               ; check FNx syntax
00108Er 2               
00108Er 2               LAB_200B
00108Er 2  A9 AE        	LDA	#TK_FN		; get FN" token
001090r 2  20 rr rr     	JSR	LAB_SCCA		; scan for CHR$(A) , else do syntax error then warm start
001093r 2               					; return character after A
001093r 2  09 80        	ORA	#$80			; set FN flag bit
001095r 2  85 61        	STA	Sufnxf		; save FN flag so array variable test fails
001097r 2  20 rr rr     	JSR	LAB_1D12		; search for FN variable
00109Ar 2  4C rr rr     	JMP	LAB_CTNM		; check if source is numeric and return, else do type
00109Dr 2               					; mismatch
00109Dr 2               
00109Dr 2               					; Evaluate FNx
00109Dr 2               LAB_201E
00109Dr 2  20 rr rr     	JSR	LAB_200B		; check FNx syntax
0010A0r 2  48           	PHA				; push function pointer low byte
0010A1r 2  98           	TYA				; copy function pointer high byte
0010A2r 2  48           	PHA				; push function pointer high byte
0010A3r 2  20 rr rr     	JSR	LAB_1BFE		; scan for "(", else do syntax error then warm start
0010A6r 2  20 rr rr     	JSR	LAB_EVEX		; evaluate expression
0010A9r 2  20 rr rr     	JSR	LAB_1BFB		; scan for ")", else do syntax error then warm start
0010ACr 2  20 rr rr     	JSR	LAB_CTNM		; check if source is numeric, else do type mismatch
0010AFr 2  68           	PLA				; pop function pointer high byte
0010B0r 2  85 9D        	STA	func_h		; restore it
0010B2r 2  68           	PLA				; pop function pointer low byte
0010B3r 2  85 9C        	STA	func_l		; restore it
0010B5r 2  A2 20        	LDX	#$20			; error code $20 ("Undefined function" error)
0010B7r 2  A0 03        	LDY	#$03			; index to variable pointer high byte
0010B9r 2  B1 9C        	LDA	(func_l),Y		; get variable pointer high byte
0010BBr 2  F0 9D        	BEQ	LAB_1FDB		; if zero go do undefined function error
0010BDr 2               
0010BDr 2  85 96        	STA	Cvarah		; save variable address high byte
0010BFr 2  88           	DEY				; index to variable address low byte
0010C0r 2  B1 9C        	LDA	(func_l),Y		; get variable address low byte
0010C2r 2  85 95        	STA	Cvaral		; save variable address low byte
0010C4r 2  AA           	TAX				; copy address low byte
0010C5r 2               
0010C5r 2               					; now stack the function variable value before use
0010C5r 2  C8           	INY				; index to mantissa_3
0010C6r 2               LAB_2043
0010C6r 2  B1 95        	LDA	(Cvaral),Y		; get byte from variable
0010C8r 2  48           	PHA				; stack it
0010C9r 2  88           	DEY				; decrement index
0010CAr 2  10 FA        	BPL	LAB_2043		; loop until variable stacked
0010CCr 2               
0010CCr 2  A4 96        	LDY	Cvarah		; get variable address high byte
0010CEr 2  20 rr rr     	JSR	LAB_2778		; pack FAC1 (function expression value) into (XY)
0010D1r 2               					; (function variable), return Y=0, always
0010D1r 2  A5 C4        	LDA	Bpntrh		; get BASIC execute pointer high byte
0010D3r 2  48           	PHA				; push it
0010D4r 2  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte
0010D6r 2  48           	PHA				; push it
0010D7r 2  B1 9C        	LDA	(func_l),Y		; get function execute pointer low byte
0010D9r 2  85 C3        	STA	Bpntrl		; save as BASIC execute pointer low byte
0010DBr 2  C8           	INY				; index to high byte
0010DCr 2  B1 9C        	LDA	(func_l),Y		; get function execute pointer high byte
0010DEr 2  85 C4        	STA	Bpntrh		; save as BASIC execute pointer high byte
0010E0r 2  A5 96        	LDA	Cvarah		; get variable address high byte
0010E2r 2  48           	PHA				; push it
0010E3r 2  A5 95        	LDA	Cvaral		; get variable address low byte
0010E5r 2  48           	PHA				; push it
0010E6r 2  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
0010E9r 2               					; else do type mismatch
0010E9r 2  68           	PLA				; pull variable address low byte
0010EAr 2  85 9C        	STA	func_l		; save variable address low byte
0010ECr 2  68           	PLA				; pull variable address high byte
0010EDr 2  85 9D        	STA	func_h		; save variable address high byte
0010EFr 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
0010F2r 2  F0 03        	BEQ	LAB_2074		; branch if null (should be [EOL] marker)
0010F4r 2               
0010F4r 2  4C rr rr     	JMP	LAB_SNER		; else syntax error then warm start
0010F7r 2               
0010F7r 2               ; restore Bpntrl,Bpntrh and function variable from stack
0010F7r 2               
0010F7r 2               LAB_2074
0010F7r 2  68           	PLA				; pull BASIC execute pointer low byte
0010F8r 2  85 C3        	STA	Bpntrl		; restore BASIC execute pointer low byte
0010FAr 2  68           	PLA				; pull BASIC execute pointer high byte
0010FBr 2  85 C4        	STA	Bpntrh		; restore BASIC execute pointer high byte
0010FDr 2               
0010FDr 2               ; put execute pointer and variable pointer into function
0010FDr 2               
0010FDr 2               LAB_207A
0010FDr 2  A0 00        	LDY	#$00			; clear index
0010FFr 2  68           	PLA				; pull BASIC execute pointer low byte
001100r 2  91 9C        	STA	(func_l),Y		; save to function
001102r 2  C8           	INY				; increment index
001103r 2  68           	PLA				; pull BASIC execute pointer high byte
001104r 2  91 9C        	STA	(func_l),Y		; save to function
001106r 2  C8           	INY				; increment index
001107r 2  68           	PLA				; pull current var address low byte
001108r 2  91 9C        	STA	(func_l),Y		; save to function
00110Ar 2  C8           	INY				; increment index
00110Br 2  68           	PLA				; pull current var address high byte
00110Cr 2  91 9C        	STA	(func_l),Y		; save to function
00110Er 2  60           	RTS
00110Fr 2               
00110Fr 2               ; perform STR$()
00110Fr 2               
00110Fr 2               LAB_STRS
00110Fr 2  20 rr rr     	JSR	LAB_CTNM		; check if source is numeric, else do type mismatch
001112r 2  20 rr rr     	JSR	LAB_296E		; convert FAC1 to string
001115r 2  A9 F0        	LDA	#<Decssp1		; set result string low pointer
001117r 2  A0 00        	LDY	#>Decssp1		; set result string high pointer
001119r 2  F0 12        	BEQ	LAB_20AE		; print null terminated string to Sutill/Sutilh
00111Br 2               
00111Br 2               ; Do string vector
00111Br 2               ; copy des_pl/h to des_2l/h and make string space A bytes long
00111Br 2               
00111Br 2               LAB_209C
00111Br 2  A6 AE        	LDX	des_pl		; get descriptor pointer low byte
00111Dr 2  A4 AF        	LDY	des_ph		; get descriptor pointer high byte
00111Fr 2  86 9E        	STX	des_2l		; save descriptor pointer low byte
001121r 2  84 9F        	STY	des_2h		; save descriptor pointer high byte
001123r 2               
001123r 2               ; make string space A bytes long
001123r 2               ; A=length, X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
001123r 2               
001123r 2               LAB_MSSP
001123r 2  20 rr rr     	JSR	LAB_2115		; make space in string memory for string A long
001126r 2               					; return X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
001126r 2  86 AD        	STX	str_pl		; save string pointer low byte
001128r 2  84 AE        	STY	str_ph		; save string pointer high byte
00112Ar 2  85 AC        	STA	str_ln		; save length
00112Cr 2  60           	RTS
00112Dr 2               
00112Dr 2               ; Scan, set up string
00112Dr 2               ; print " terminated string to Sutill/Sutilh
00112Dr 2               
00112Dr 2               LAB_20AE
00112Dr 2  A2 22        	LDX	#$22			; set terminator to "
00112Fr 2  86 5B        	STX	Srchc			; set search character (terminator 1)
001131r 2  86 5C        	STX	Asrch			; set terminator 2
001133r 2               
001133r 2               ; print [Srchc] or [Asrch] terminated string to Sutill/Sutilh
001133r 2               ; source is AY
001133r 2               
001133r 2               LAB_20B4
001133r 2  85 B8        	STA	ssptr_l		; store string start low byte
001135r 2  84 B9        	STY	ssptr_h		; store string start high byte
001137r 2  85 AD        	STA	str_pl		; save string pointer low byte
001139r 2  84 AE        	STY	str_ph		; save string pointer high byte
00113Br 2  A0 FF        	LDY	#$FF			; set length to -1
00113Dr 2               LAB_20BE
00113Dr 2  C8           	INY				; increment length
00113Er 2  B1 B8        	LDA	(ssptr_l),Y		; get byte from string
001140r 2  F0 0C        	BEQ	LAB_20CF		; exit loop if null byte [EOS]
001142r 2               
001142r 2  C5 5B        	CMP	Srchc			; compare with search character (terminator 1)
001144r 2  F0 04        	BEQ	LAB_20CB		; branch if terminator
001146r 2               
001146r 2  C5 5C        	CMP	Asrch			; compare with terminator 2
001148r 2  D0 F3        	BNE	LAB_20BE		; loop if not terminator 2
00114Ar 2               
00114Ar 2               LAB_20CB
00114Ar 2  C9 22        	CMP	#$22			; compare with "
00114Cr 2  F0 01        	BEQ	LAB_20D0		; branch if " (carry set if = !)
00114Er 2               
00114Er 2               LAB_20CF
00114Er 2  18           	CLC				; clear carry for add (only if [EOL] terminated string)
00114Fr 2               LAB_20D0
00114Fr 2  84 AC        	STY	str_ln		; save length in FAC1 exponent
001151r 2  98           	TYA				; copy length to A
001152r 2  65 B8        	ADC	ssptr_l		; add string start low byte
001154r 2  85 BA        	STA	Sendl			; save string end low byte
001156r 2  A6 B9        	LDX	ssptr_h		; get string start high byte
001158r 2  90 01        	BCC	LAB_20DC		; branch if no low byte overflow
00115Ar 2               
00115Ar 2  E8           	INX				; else increment high byte
00115Br 2               LAB_20DC
00115Br 2  86 BB        	STX	Sendh			; save string end high byte
00115Dr 2  A5 B9        	LDA	ssptr_h		; get string start high byte
00115Fr 2  C9 04        	CMP	#>Ram_base		; compare with start of program memory
001161r 2  B0 0B        	BCS	LAB_RTST		; branch if not in utility area
001163r 2               
001163r 2               					; string in utility area, move to string memory
001163r 2  98           	TYA				; copy length to A
001164r 2  20 rr rr     	JSR	LAB_209C		; copy des_pl/h to des_2l/h and make string space A bytes
001167r 2               					; long
001167r 2  A6 B8        	LDX	ssptr_l		; get string start low byte
001169r 2  A4 B9        	LDY	ssptr_h		; get string start high byte
00116Br 2  20 rr rr     	JSR	LAB_2298		; store string A bytes long from XY to (Sutill)
00116Er 2               
00116Er 2               ; check for space on descriptor stack then ..
00116Er 2               ; put string address and length on descriptor stack and update stack pointers
00116Er 2               
00116Er 2               LAB_RTST
00116Er 2  A6 65        	LDX	next_s		; get string stack pointer
001170r 2  E0 71        	CPX	#des_sk+$09		; compare with max+1
001172r 2  D0 05        	BNE	LAB_20F8		; branch if space on string stack
001174r 2               
001174r 2               					; else do string too complex error
001174r 2  A2 1C        	LDX	#$1C			; error code $1C ("String too complex" error)
001176r 2               LAB_20F5
001176r 2  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
001179r 2               
001179r 2               ; put string address and length on descriptor stack and update stack pointers
001179r 2               
001179r 2               LAB_20F8
001179r 2  A5 AC        	LDA	str_ln		; get string length
00117Br 2  95 00        	STA	PLUS_0,X		; put on string stack
00117Dr 2  A5 AD        	LDA	str_pl		; get string pointer low byte
00117Fr 2  95 01        	STA	PLUS_1,X		; put on string stack
001181r 2  A5 AE        	LDA	str_ph		; get string pointer high byte
001183r 2  95 02        	STA	PLUS_2,X		; put on string stack
001185r 2  A0 00        	LDY	#$00			; clear Y
001187r 2  86 AE        	STX	des_pl		; save string descriptor pointer low byte
001189r 2  84 AF        	STY	des_ph		; save string descriptor pointer high byte (always $00)
00118Br 2  88           	DEY				; Y = $FF
00118Cr 2  84 5F        	STY	Dtypef		; save data type flag, $FF=string
00118Er 2  86 66        	STX	last_sl		; save old stack pointer (current top item)
001190r 2  E8           	INX				; update stack pointer
001191r 2  E8           	INX				; update stack pointer
001192r 2  E8           	INX				; update stack pointer
001193r 2  86 65        	STX	next_s		; save new top item value
001195r 2  60           	RTS
001196r 2               
001196r 2               ; Build descriptor
001196r 2               ; make space in string memory for string A long
001196r 2               ; return X=Sutill=ptr low byte, Y=Sutill=ptr high byte
001196r 2               
001196r 2               LAB_2115
001196r 2  46 60        	LSR	Gclctd		; clear garbage collected flag (b7)
001198r 2               
001198r 2               					; make space for string A long
001198r 2               LAB_2117
001198r 2  48           	PHA				; save string length
001199r 2  49 FF        	EOR	#$FF			; complement it
00119Br 2  38           	SEC				; set carry for subtract (twos comp add)
00119Cr 2  65 81        	ADC	Sstorl		; add bottom of string space low byte (subtract length)
00119Er 2  A4 82        	LDY	Sstorh		; get bottom of string space high byte
0011A0r 2  B0 01        	BCS	LAB_2122		; skip decrement if no underflow
0011A2r 2               
0011A2r 2  88           	DEY				; decrement bottom of string space high byte
0011A3r 2               LAB_2122
0011A3r 2  C4 80        	CPY	Earryh		; compare with array mem end high byte
0011A5r 2  90 11        	BCC	LAB_2137		; do out of memory error if less
0011A7r 2               
0011A7r 2  D0 04        	BNE	LAB_212C		; if not = skip next test
0011A9r 2               
0011A9r 2  C5 7F        	CMP	Earryl		; compare with array mem end low byte
0011ABr 2  90 0B        	BCC	LAB_2137		; do out of memory error if less
0011ADr 2               
0011ADr 2               LAB_212C
0011ADr 2  85 81        	STA	Sstorl		; save bottom of string space low byte
0011AFr 2  84 82        	STY	Sstorh		; save bottom of string space high byte
0011B1r 2  85 83        	STA	Sutill		; save string utility ptr low byte
0011B3r 2  84 84        	STY	Sutilh		; save string utility ptr high byte
0011B5r 2  AA           	TAX				; copy low byte to X
0011B6r 2  68           	PLA				; get string length back
0011B7r 2  60           	RTS
0011B8r 2               
0011B8r 2               LAB_2137
0011B8r 2  A2 0C        	LDX	#$0C			; error code $0C ("Out of memory" error)
0011BAr 2  A5 60        	LDA	Gclctd		; get garbage collected flag
0011BCr 2  30 B8        	BMI	LAB_20F5		; if set then do error code X
0011BEr 2               
0011BEr 2  20 rr rr     	JSR	LAB_GARB		; else go do garbage collection
0011C1r 2  A9 80        	LDA	#$80			; flag for garbage collected
0011C3r 2  85 60        	STA	Gclctd		; set garbage collected flag
0011C5r 2  68           	PLA				; pull length
0011C6r 2  D0 D0        	BNE	LAB_2117		; go try again (loop always, length should never be = $00)
0011C8r 2               
0011C8r 2               ; garbage collection routine
0011C8r 2               
0011C8r 2               LAB_GARB
0011C8r 2  A6 85        	LDX	Ememl			; get end of mem low byte
0011CAr 2  A5 86        	LDA	Ememh			; get end of mem high byte
0011CCr 2               
0011CCr 2               ; re-run routine from last ending
0011CCr 2               
0011CCr 2               LAB_214B
0011CCr 2  86 81        	STX	Sstorl		; set string storage low byte
0011CEr 2  85 82        	STA	Sstorh		; set string storage high byte
0011D0r 2  A0 00        	LDY	#$00			; clear index
0011D2r 2  84 9D        	STY	garb_h		; clear working pointer high byte (flag no strings to move)
0011D4r 2  A5 7F        	LDA	Earryl		; get array mem end low byte
0011D6r 2  A6 80        	LDX	Earryh		; get array mem end high byte
0011D8r 2  85 AA        	STA	Histrl		; save as highest string low byte
0011DAr 2  86 AB        	STX	Histrh		; save as highest string high byte
0011DCr 2  A9 68        	LDA	#des_sk		; set descriptor stack pointer
0011DEr 2  85 71        	STA	ut1_pl		; save descriptor stack pointer low byte
0011E0r 2  84 72        	STY	ut1_ph		; save descriptor stack pointer high byte ($00)
0011E2r 2               LAB_2161
0011E2r 2  C5 65        	CMP	next_s		; compare with descriptor stack pointer
0011E4r 2  F0 05        	BEQ	LAB_216A		; branch if =
0011E6r 2               
0011E6r 2  20 rr rr     	JSR	LAB_21D7		; go garbage collect descriptor stack
0011E9r 2  F0 F7        	BEQ	LAB_2161		; loop always
0011EBr 2               
0011EBr 2               					; done stacked strings, now do string vars
0011EBr 2               LAB_216A
0011EBr 2  06 A0        	ASL	g_step		; set step size = $06
0011EDr 2  A5 7B        	LDA	Svarl			; get start of vars low byte
0011EFr 2  A6 7C        	LDX	Svarh			; get start of vars high byte
0011F1r 2  85 71        	STA	ut1_pl		; save as pointer low byte
0011F3r 2  86 72        	STX	ut1_ph		; save as pointer high byte
0011F5r 2               LAB_2176
0011F5r 2  E4 7E        	CPX	Sarryh		; compare start of arrays high byte
0011F7r 2  D0 04        	BNE	LAB_217E		; branch if no high byte match
0011F9r 2               
0011F9r 2  C5 7D        	CMP	Sarryl		; else compare start of arrays low byte
0011FBr 2  F0 05        	BEQ	LAB_2183		; branch if = var mem end
0011FDr 2               
0011FDr 2               LAB_217E
0011FDr 2  20 rr rr     	JSR	LAB_21D1		; go garbage collect strings
001200r 2  F0 F3        	BEQ	LAB_2176		; loop always
001202r 2               
001202r 2               					; done string vars, now do string arrays
001202r 2               LAB_2183
001202r 2  85 A4        	STA	Nbendl		; save start of arrays low byte as working pointer
001204r 2  86 A5        	STX	Nbendh		; save start of arrays high byte as working pointer
001206r 2  A9 04        	LDA	#$04			; set step size
001208r 2  85 A0        	STA	g_step		; save step size
00120Ar 2               LAB_218B
00120Ar 2  A5 A4        	LDA	Nbendl		; get pointer low byte
00120Cr 2  A6 A5        	LDX	Nbendh		; get pointer high byte
00120Er 2               LAB_218F
00120Er 2  E4 80        	CPX	Earryh		; compare with array mem end high byte
001210r 2  D0 04        	BNE	LAB_219A		; branch if not at end
001212r 2               
001212r 2  C5 7F        	CMP	Earryl		; else compare with array mem end low byte
001214r 2  F0 75        	BEQ	LAB_2216		; tidy up and exit if at end
001216r 2               
001216r 2               LAB_219A
001216r 2  85 71        	STA	ut1_pl		; save pointer low byte
001218r 2  86 72        	STX	ut1_ph		; save pointer high byte
00121Ar 2  A0 02        	LDY	#$02			; set index
00121Cr 2  B1 71        	LDA	(ut1_pl),Y		; get array size low byte
00121Er 2  65 A4        	ADC	Nbendl		; add start of this array low byte
001220r 2  85 A4        	STA	Nbendl		; save start of next array low byte
001222r 2  C8           	INY				; increment index
001223r 2  B1 71        	LDA	(ut1_pl),Y		; get array size high byte
001225r 2  65 A5        	ADC	Nbendh		; add start of this array high byte
001227r 2  85 A5        	STA	Nbendh		; save start of next array high byte
001229r 2  A0 01        	LDY	#$01			; set index
00122Br 2  B1 71        	LDA	(ut1_pl),Y		; get name second byte
00122Dr 2  10 DB        	BPL	LAB_218B		; skip if not string array
00122Fr 2               
00122Fr 2               ; was string array so ..
00122Fr 2               
00122Fr 2  A0 04        	LDY	#$04			; set index
001231r 2  B1 71        	LDA	(ut1_pl),Y		; get # of dimensions
001233r 2  0A           	ASL				; *2
001234r 2  69 05        	ADC	#$05			; +5 (array header size)
001236r 2  20 rr rr     	JSR	LAB_2208		; go set up for first element
001239r 2               LAB_21C4
001239r 2  E4 A5        	CPX	Nbendh		; compare with start of next array high byte
00123Br 2  D0 04        	BNE	LAB_21CC		; branch if <> (go do this array)
00123Dr 2               
00123Dr 2  C5 A4        	CMP	Nbendl		; else compare element pointer low byte with next array
00123Fr 2               					; low byte
00123Fr 2  F0 CD        	BEQ	LAB_218F		; if equal then go do next array
001241r 2               
001241r 2               LAB_21CC
001241r 2  20 rr rr     	JSR	LAB_21D7		; go defrag array strings
001244r 2  F0 F3        	BEQ	LAB_21C4		; go do next array string (loop always)
001246r 2               
001246r 2               ; defrag string variables
001246r 2               ; enter with XA = variable pointer
001246r 2               ; return with XA = next variable pointer
001246r 2               
001246r 2               LAB_21D1
001246r 2  C8           	INY				; increment index (Y was $00)
001247r 2  B1 71        	LDA	(ut1_pl),Y		; get var name byte 2
001249r 2  10 30        	BPL	LAB_2206		; if not string, step pointer to next var and return
00124Br 2               
00124Br 2  C8           	INY				; else increment index
00124Cr 2               LAB_21D7
00124Cr 2  B1 71        	LDA	(ut1_pl),Y		; get string length
00124Er 2  F0 2B        	BEQ	LAB_2206		; if null, step pointer to next string and return
001250r 2               
001250r 2  C8           	INY				; else increment index
001251r 2  B1 71        	LDA	(ut1_pl),Y		; get string pointer low byte
001253r 2  AA           	TAX				; copy to X
001254r 2  C8           	INY				; increment index
001255r 2  B1 71        	LDA	(ut1_pl),Y		; get string pointer high byte
001257r 2  C5 82        	CMP	Sstorh		; compare bottom of string space high byte
001259r 2  90 06        	BCC	LAB_21EC		; branch if less
00125Br 2               
00125Br 2  D0 1E        	BNE	LAB_2206		; if greater, step pointer to next string and return
00125Dr 2               
00125Dr 2               					; high bytes were = so compare low bytes
00125Dr 2  E4 81        	CPX	Sstorl		; compare bottom of string space low byte
00125Fr 2  B0 1A        	BCS	LAB_2206		; if >=, step pointer to next string and return
001261r 2               
001261r 2               					; string pointer is < string storage pointer (pos in mem)
001261r 2               LAB_21EC
001261r 2  C5 AB        	CMP	Histrh		; compare to highest string high byte
001263r 2  90 17        	BCC	LAB_2207		; if <, step pointer to next string and return
001265r 2               
001265r 2  D0 04        	BNE	LAB_21F6		; if > update pointers, step to next and return
001267r 2               
001267r 2               					; high bytes were = so compare low bytes
001267r 2  E4 AA        	CPX	Histrl		; compare to highest string low byte
001269r 2  90 11        	BCC	LAB_2207		; if <, step pointer to next string and return
00126Br 2               
00126Br 2               					; string is in string memory space
00126Br 2               LAB_21F6
00126Br 2  86 AA        	STX	Histrl		; save as new highest string low byte
00126Dr 2  85 AB        	STA	Histrh		; save as new highest string high byte
00126Fr 2  A5 71        	LDA	ut1_pl		; get start of vars(descriptors) low byte
001271r 2  A6 72        	LDX	ut1_ph		; get start of vars(descriptors) high byte
001273r 2  85 9C        	STA	garb_l		; save as working pointer low byte
001275r 2  86 9D        	STX	garb_h		; save as working pointer high byte
001277r 2  88           	DEY				; decrement index DIFFERS
001278r 2  88           	DEY				; decrement index (should point to descriptor start)
001279r 2  84 A2        	STY	g_indx		; save index pointer
00127Br 2               
00127Br 2               					; step pointer to next string
00127Br 2               LAB_2206
00127Br 2  18           	CLC				; clear carry for add
00127Cr 2               LAB_2207
00127Cr 2  A5 A0        	LDA	g_step		; get step size
00127Er 2               LAB_2208
00127Er 2  65 71        	ADC	ut1_pl		; add pointer low byte
001280r 2  85 71        	STA	ut1_pl		; save pointer low byte
001282r 2  90 02        	BCC	LAB_2211		; branch if no overflow
001284r 2               
001284r 2  E6 72        	INC	ut1_ph		; else increment high byte
001286r 2               LAB_2211
001286r 2  A6 72        	LDX	ut1_ph		; get pointer high byte
001288r 2  A0 00        	LDY	#$00			; clear Y
00128Ar 2  60           	RTS
00128Br 2               
00128Br 2               ; search complete, now either exit or set-up and move string
00128Br 2               
00128Br 2               LAB_2216
00128Br 2  C6 A0        	DEC	g_step		; decrement step size (now $03 for descriptor stack)
00128Dr 2  A6 9D        	LDX	garb_h		; get string to move high byte
00128Fr 2  F0 F5        	BEQ	LAB_2211		; exit if nothing to move
001291r 2               
001291r 2  A4 A2        	LDY	g_indx		; get index byte back (points to descriptor)
001293r 2  18           	CLC				; clear carry for add
001294r 2  B1 9C        	LDA	(garb_l),Y		; get string length
001296r 2  65 AA        	ADC	Histrl		; add highest string low byte
001298r 2  85 A6        	STA	Obendl		; save old block end low pointer
00129Ar 2  A5 AB        	LDA	Histrh		; get highest string high byte
00129Cr 2  69 00        	ADC	#$00			; add any carry
00129Er 2  85 A7        	STA	Obendh		; save old block end high byte
0012A0r 2  A5 81        	LDA	Sstorl		; get bottom of string space low byte
0012A2r 2  A6 82        	LDX	Sstorh		; get bottom of string space high byte
0012A4r 2  85 A4        	STA	Nbendl		; save new block end low byte
0012A6r 2  86 A5        	STX	Nbendh		; save new block end high byte
0012A8r 2  20 rr rr     	JSR	LAB_11D6		; open up space in memory, don't set array end
0012ABr 2  A4 A2        	LDY	g_indx		; get index byte
0012ADr 2  C8           	INY				; point to descriptor low byte
0012AEr 2  A5 A4        	LDA	Nbendl		; get string pointer low byte
0012B0r 2  91 9C        	STA	(garb_l),Y		; save new string pointer low byte
0012B2r 2  AA           	TAX				; copy string pointer low byte
0012B3r 2  E6 A5        	INC	Nbendh		; correct high byte (move sets high byte -1)
0012B5r 2  A5 A5        	LDA	Nbendh		; get new string pointer high byte
0012B7r 2  C8           	INY				; point to descriptor high byte
0012B8r 2  91 9C        	STA	(garb_l),Y		; save new string pointer high byte
0012BAr 2  4C rr rr     	JMP	LAB_214B		; re-run routine from last ending
0012BDr 2               					; (but don't collect this string)
0012BDr 2               
0012BDr 2               ; concatenate
0012BDr 2               ; add strings, string 1 is in descriptor des_pl, string 2 is in line
0012BDr 2               
0012BDr 2               LAB_224D
0012BDr 2  A5 AF        	LDA	des_ph		; get descriptor pointer high byte
0012BFr 2  48           	PHA				; put on stack
0012C0r 2  A5 AE        	LDA	des_pl		; get descriptor pointer low byte
0012C2r 2  48           	PHA				; put on stack
0012C3r 2  20 rr rr     	JSR	LAB_GVAL		; get value from line
0012C6r 2  20 rr rr     	JSR	LAB_CTST		; check if source is string, else do type mismatch
0012C9r 2  68           	PLA				; get descriptor pointer low byte back
0012CAr 2  85 B8        	STA	ssptr_l		; set pointer low byte
0012CCr 2  68           	PLA				; get descriptor pointer high byte back
0012CDr 2  85 B9        	STA	ssptr_h		; set pointer high byte
0012CFr 2  A0 00        	LDY	#$00			; clear index
0012D1r 2  B1 B8        	LDA	(ssptr_l),Y		; get length_1 from descriptor
0012D3r 2  18           	CLC				; clear carry for add
0012D4r 2  71 AE        	ADC	(des_pl),Y		; add length_2
0012D6r 2  90 05        	BCC	LAB_226D		; branch if no overflow
0012D8r 2               
0012D8r 2  A2 1A        	LDX	#$1A			; else set error code $1A ("String too long" error)
0012DAr 2  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
0012DDr 2               
0012DDr 2               LAB_226D
0012DDr 2  20 rr rr     	JSR	LAB_209C		; copy des_pl/h to des_2l/h and make string space A bytes
0012E0r 2               					; long
0012E0r 2  20 rr rr     	JSR	LAB_228A		; copy string from descriptor (sdescr) to (Sutill)
0012E3r 2  A5 9E        	LDA	des_2l		; get descriptor pointer low byte
0012E5r 2  A4 9F        	LDY	des_2h		; get descriptor pointer high byte
0012E7r 2  20 rr rr     	JSR	LAB_22BA		; pop (YA) descriptor off stack or from top of string space
0012EAr 2               					; returns with A = length, ut1_pl = pointer low byte,
0012EAr 2               					; ut1_ph = pointer high byte
0012EAr 2  20 rr rr     	JSR	LAB_229C		; store string A bytes long from (ut1_pl) to (Sutill)
0012EDr 2  A5 B8        	LDA	ssptr_l		;.set descriptor pointer low byte
0012EFr 2  A4 B9        	LDY	ssptr_h		;.set descriptor pointer high byte
0012F1r 2  20 rr rr     	JSR	LAB_22BA		; pop (YA) descriptor off stack or from top of string space
0012F4r 2               					; returns with A = length, X=ut1_pl=pointer low byte,
0012F4r 2               					; Y=ut1_ph=pointer high byte
0012F4r 2  20 rr rr     	JSR	LAB_RTST		; check for space on descriptor stack then put string
0012F7r 2               					; address and length on descriptor stack and update stack
0012F7r 2               					; pointers
0012F7r 2  4C rr rr     	JMP	LAB_1ADB		;.continue evaluation
0012FAr 2               
0012FAr 2               ; copy string from descriptor (sdescr) to (Sutill)
0012FAr 2               
0012FAr 2               LAB_228A
0012FAr 2  A0 00        	LDY	#$00			; clear index
0012FCr 2  B1 B8        	LDA	(sdescr),Y		; get string length
0012FEr 2  48           	PHA				; save on stack
0012FFr 2  C8           	INY				; increment index
001300r 2  B1 B8        	LDA	(sdescr),Y		; get source string pointer low byte
001302r 2  AA           	TAX				; copy to X
001303r 2  C8           	INY				; increment index
001304r 2  B1 B8        	LDA	(sdescr),Y		; get source string pointer high byte
001306r 2  A8           	TAY				; copy to Y
001307r 2  68           	PLA				; get length back
001308r 2               
001308r 2               ; store string A bytes long from YX to (Sutill)
001308r 2               
001308r 2               LAB_2298
001308r 2  86 71        	STX	ut1_pl		; save source string pointer low byte
00130Ar 2  84 72        	STY	ut1_ph		; save source string pointer high byte
00130Cr 2               
00130Cr 2               ; store string A bytes long from (ut1_pl) to (Sutill)
00130Cr 2               
00130Cr 2               LAB_229C
00130Cr 2  AA           	TAX				; copy length to index (don't count with Y)
00130Dr 2  F0 14        	BEQ	LAB_22B2		; branch if = $0 (null string) no need to add zero length
00130Fr 2               
00130Fr 2  A0 00        	LDY	#$00			; zero pointer (copy forward)
001311r 2               LAB_22A0
001311r 2  B1 71        	LDA	(ut1_pl),Y		; get source byte
001313r 2  91 83        	STA	(Sutill),Y		; save destination byte
001315r 2               
001315r 2  C8           	INY				; increment index
001316r 2  CA           	DEX				; decrement counter
001317r 2  D0 F8        	BNE	LAB_22A0		; loop while <> 0
001319r 2               
001319r 2  98           	TYA				; restore length from Y
00131Ar 2               LAB_22A9
00131Ar 2  18           	CLC				; clear carry for add
00131Br 2  65 83        	ADC	Sutill		; add string utility ptr low byte
00131Dr 2  85 83        	STA	Sutill		; save string utility ptr low byte
00131Fr 2  90 02        	BCC	LAB_22B2		; branch if no carry
001321r 2               
001321r 2  E6 84        	INC	Sutilh		; else increment string utility ptr high byte
001323r 2               LAB_22B2
001323r 2  60           	RTS
001324r 2               
001324r 2               ; evaluate string
001324r 2               
001324r 2               LAB_EVST
001324r 2  20 rr rr     	JSR	LAB_CTST		; check if source is string, else do type mismatch
001327r 2               
001327r 2               ; pop string off descriptor stack, or from top of string space
001327r 2               ; returns with A = length, X=pointer low byte, Y=pointer high byte
001327r 2               
001327r 2               LAB_22B6
001327r 2  A5 AE        	LDA	des_pl		; get descriptor pointer low byte
001329r 2  A4 AF        	LDY	des_ph		; get descriptor pointer high byte
00132Br 2               
00132Br 2               ; pop (YA) descriptor off stack or from top of string space
00132Br 2               ; returns with A = length, X=ut1_pl=pointer low byte, Y=ut1_ph=pointer high byte
00132Br 2               
00132Br 2               LAB_22BA
00132Br 2  85 71        	STA	ut1_pl		; save descriptor pointer low byte
00132Dr 2  84 72        	STY	ut1_ph		; save descriptor pointer high byte
00132Fr 2  20 rr rr     	JSR	LAB_22EB		; clean descriptor stack, YA = pointer
001332r 2  08           	PHP				; save status flags
001333r 2  A0 00        	LDY	#$00			; clear index
001335r 2  B1 71        	LDA	(ut1_pl),Y		; get length from string descriptor
001337r 2  48           	PHA				; put on stack
001338r 2  C8           	INY				; increment index
001339r 2  B1 71        	LDA	(ut1_pl),Y		; get string pointer low byte from descriptor
00133Br 2  AA           	TAX				; copy to X
00133Cr 2  C8           	INY				; increment index
00133Dr 2  B1 71        	LDA	(ut1_pl),Y		; get string pointer high byte from descriptor
00133Fr 2  A8           	TAY				; copy to Y
001340r 2  68           	PLA				; get string length back
001341r 2  28           	PLP				; restore status
001342r 2  D0 13        	BNE	LAB_22E6		; branch if pointer <> last_sl,last_sh
001344r 2               
001344r 2  C4 82        	CPY	Sstorh		; compare bottom of string space high byte
001346r 2  D0 0F        	BNE	LAB_22E6		; branch if <>
001348r 2               
001348r 2  E4 81        	CPX	Sstorl		; else compare bottom of string space low byte
00134Ar 2  D0 0B        	BNE	LAB_22E6		; branch if <>
00134Cr 2               
00134Cr 2  48           	PHA				; save string length
00134Dr 2  18           	CLC				; clear carry for add
00134Er 2  65 81        	ADC	Sstorl		; add bottom of string space low byte
001350r 2  85 81        	STA	Sstorl		; save bottom of string space low byte
001352r 2  90 02        	BCC	LAB_22E5		; skip increment if no overflow
001354r 2               
001354r 2  E6 82        	INC	Sstorh		; increment bottom of string space high byte
001356r 2               LAB_22E5
001356r 2  68           	PLA				; restore string length
001357r 2               LAB_22E6
001357r 2  86 71        	STX	ut1_pl		; save string pointer low byte
001359r 2  84 72        	STY	ut1_ph		; save string pointer high byte
00135Br 2  60           	RTS
00135Cr 2               
00135Cr 2               ; clean descriptor stack, YA = pointer
00135Cr 2               ; checks if AY is on the descriptor stack, if so does a stack discard
00135Cr 2               
00135Cr 2               LAB_22EB
00135Cr 2  C4 67        	CPY	last_sh		; compare pointer high byte
00135Er 2  D0 0C        	BNE	LAB_22FB		; exit if <>
001360r 2               
001360r 2  C5 66        	CMP	last_sl		; compare pointer low byte
001362r 2  D0 08        	BNE	LAB_22FB		; exit if <>
001364r 2               
001364r 2  85 65        	STA	next_s		; save descriptor stack pointer
001366r 2  E9 03        	SBC	#$03			; -3
001368r 2  85 66        	STA	last_sl		; save low byte -3
00136Ar 2  A0 00        	LDY	#$00			; clear high byte
00136Cr 2               LAB_22FB
00136Cr 2  60           	RTS
00136Dr 2               
00136Dr 2               ; perform CHR$()
00136Dr 2               
00136Dr 2               LAB_CHRS
00136Dr 2  20 rr rr     	JSR	LAB_EVBY		; evaluate byte expression, result in X
001370r 2  8A           	TXA				; copy to A
001371r 2  48           	PHA				; save character
001372r 2  A9 01        	LDA	#$01			; string is single byte
001374r 2  20 rr rr     	JSR	LAB_MSSP		; make string space A bytes long A=$AC=length,
001377r 2               					; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
001377r 2  68           	PLA				; get character back
001378r 2  A0 00        	LDY	#$00			; clear index
00137Ar 2  91 AD        	STA	(str_pl),Y		; save byte in string (byte IS string!)
00137Cr 2  4C rr rr     	JMP	LAB_RTST		; check for space on descriptor stack then put string
00137Fr 2               					; address and length on descriptor stack and update stack
00137Fr 2               					; pointers
00137Fr 2               
00137Fr 2               ; perform LEFT$()
00137Fr 2               
00137Fr 2               LAB_LEFT
00137Fr 2  48           	PHA				; push byte parameter
001380r 2  20 rr rr     	JSR	LAB_236F		; pull string data and byte parameter from stack
001383r 2               					; return pointer in des_2l/h, byte in A (and X), Y=0
001383r 2  D1 9E        	CMP	(des_2l),Y		; compare byte parameter with string length
001385r 2  98           	TYA				; clear A
001386r 2  F0 09        	BEQ	LAB_2316		; go do string copy (branch always)
001388r 2               
001388r 2               ; perform RIGHT$()
001388r 2               
001388r 2               LAB_RIGHT
001388r 2  48           	PHA				; push byte parameter
001389r 2  20 rr rr     	JSR	LAB_236F		; pull string data and byte parameter from stack
00138Cr 2               					; return pointer in des_2l/h, byte in A (and X), Y=0
00138Cr 2  18           	CLC				; clear carry for add-1
00138Dr 2  F1 9E        	SBC	(des_2l),Y		; subtract string length
00138Fr 2  49 FF        	EOR	#$FF			; invert it (A=LEN(expression$)-l)
001391r 2               
001391r 2               LAB_2316
001391r 2  90 04        	BCC	LAB_231C		; branch if string length > byte parameter
001393r 2               
001393r 2  B1 9E        	LDA	(des_2l),Y		; else make parameter = length
001395r 2  AA           	TAX				; copy to byte parameter copy
001396r 2  98           	TYA				; clear string start offset
001397r 2               LAB_231C
001397r 2  48           	PHA				; save string start offset
001398r 2               LAB_231D
001398r 2  8A           	TXA				; copy byte parameter (or string length if <)
001399r 2               LAB_231E
001399r 2  48           	PHA				; save string length
00139Ar 2  20 rr rr     	JSR	LAB_MSSP		; make string space A bytes long A=$AC=length,
00139Dr 2               					; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
00139Dr 2  A5 9E        	LDA	des_2l		; get descriptor pointer low byte
00139Fr 2  A4 9F        	LDY	des_2h		; get descriptor pointer high byte
0013A1r 2  20 rr rr     	JSR	LAB_22BA		; pop (YA) descriptor off stack or from top of string space
0013A4r 2               					; returns with A = length, X=ut1_pl=pointer low byte,
0013A4r 2               					; Y=ut1_ph=pointer high byte
0013A4r 2  68           	PLA				; get string length back
0013A5r 2  A8           	TAY				; copy length to Y
0013A6r 2  68           	PLA				; get string start offset back
0013A7r 2  18           	CLC				; clear carry for add
0013A8r 2  65 71        	ADC	ut1_pl		; add start offset to string start pointer low byte
0013AAr 2  85 71        	STA	ut1_pl		; save string start pointer low byte
0013ACr 2  90 02        	BCC	LAB_2335		; branch if no overflow
0013AEr 2               
0013AEr 2  E6 72        	INC	ut1_ph		; else increment string start pointer high byte
0013B0r 2               LAB_2335
0013B0r 2  98           	TYA				; copy length to A
0013B1r 2  20 rr rr     	JSR	LAB_229C		; store string A bytes long from (ut1_pl) to (Sutill)
0013B4r 2  4C rr rr     	JMP	LAB_RTST		; check for space on descriptor stack then put string
0013B7r 2               					; address and length on descriptor stack and update stack
0013B7r 2               					; pointers
0013B7r 2               
0013B7r 2               ; perform MID$()
0013B7r 2               
0013B7r 2               LAB_MIDS
0013B7r 2  48           	PHA				; push byte parameter
0013B8r 2  A9 FF        	LDA	#$FF			; set default length = 255
0013BAr 2  85 AF        	STA	mids_l		; save default length
0013BCr 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
0013BFr 2  C9 29        	CMP	#')'			; compare with ")"
0013C1r 2  F0 06        	BEQ	LAB_2358		; branch if = ")" (skip second byte get)
0013C3r 2               
0013C3r 2  20 rr rr     	JSR	LAB_1C01		; scan for "," , else do syntax error then warm start
0013C6r 2  20 rr rr     	JSR	LAB_GTBY		; get byte parameter (use copy in mids_l)
0013C9r 2               LAB_2358
0013C9r 2  20 rr rr     	JSR	LAB_236F		; pull string data and byte parameter from stack
0013CCr 2               					; return pointer in des_2l/h, byte in A (and X), Y=0
0013CCr 2  CA           	DEX				; decrement start index
0013CDr 2  8A           	TXA				; copy to A
0013CEr 2  48           	PHA				; save string start offset
0013CFr 2  18           	CLC				; clear carry for sub-1
0013D0r 2  A2 00        	LDX	#$00			; clear output string length
0013D2r 2  F1 9E        	SBC	(des_2l),Y		; subtract string length
0013D4r 2  B0 C2        	BCS	LAB_231D		; if start>string length go do null string
0013D6r 2               
0013D6r 2  49 FF        	EOR	#$FF			; complement -length
0013D8r 2  C5 AF        	CMP	mids_l		; compare byte parameter
0013DAr 2  90 BD        	BCC	LAB_231E		; if length>remaining string go do RIGHT$
0013DCr 2               
0013DCr 2  A5 AF        	LDA	mids_l		; get length byte
0013DEr 2  B0 B9        	BCS	LAB_231E		; go do string copy (branch always)
0013E0r 2               
0013E0r 2               ; pull string data and byte parameter from stack
0013E0r 2               ; return pointer in des_2l/h, byte in A (and X), Y=0
0013E0r 2               
0013E0r 2               LAB_236F
0013E0r 2  20 rr rr     	JSR	LAB_1BFB		; scan for ")" , else do syntax error then warm start
0013E3r 2  68           	PLA				; pull return address low byte (return address)
0013E4r 2  85 A2        	STA	Fnxjpl		; save functions jump vector low byte
0013E6r 2  68           	PLA				; pull return address high byte (return address)
0013E7r 2  85 A3        	STA	Fnxjph		; save functions jump vector high byte
0013E9r 2  68           	PLA				; pull byte parameter
0013EAr 2  AA           	TAX				; copy byte parameter to X
0013EBr 2  68           	PLA				; pull string pointer low byte
0013ECr 2  85 9E        	STA	des_2l		; save it
0013EEr 2  68           	PLA				; pull string pointer high byte
0013EFr 2  85 9F        	STA	des_2h		; save it
0013F1r 2  A0 00        	LDY	#$00			; clear index
0013F3r 2  8A           	TXA				; copy byte parameter
0013F4r 2  F0 79        	BEQ	LAB_23A8		; if null do function call error then warm start
0013F6r 2               
0013F6r 2  E6 A2        	INC	Fnxjpl		; increment function jump vector low byte
0013F8r 2               					; (JSR pushes return addr-1. this is all very nice
0013F8r 2               					; but will go tits up if either call is on a page
0013F8r 2               					; boundary!)
0013F8r 2  6C A2 00     	JMP	(Fnxjpl)		; in effect, RTS
0013FBr 2               
0013FBr 2               ; perform LCASE$()
0013FBr 2               
0013FBr 2               LAB_LCASE
0013FBr 2  20 rr rr     	JSR	LAB_EVST		; evaluate string
0013FEr 2  85 AC        	STA	str_ln		; set string length
001400r 2  A8           	TAY				; copy length to Y
001401r 2  F0 38        	BEQ	NoString		; branch if null string
001403r 2               
001403r 2  20 rr rr     	JSR	LAB_MSSP		; make string space A bytes long A=length,
001406r 2               					; X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
001406r 2  86 AD        	STX	str_pl		; save string pointer low byte
001408r 2  84 AE        	STY	str_ph		; save string pointer high byte
00140Ar 2  A8           	TAY				; get string length back
00140Br 2               
00140Br 2               LC_loop
00140Br 2  88           	DEY				; decrement index
00140Cr 2  B1 71        	LDA	(ut1_pl),Y		; get byte from string
00140Er 2  20 rr rr     	JSR	LAB_1D82		; is character "A" to "Z"
001411r 2  90 02        	BCC	NoUcase		; branch if not upper case alpha
001413r 2               
001413r 2  09 20        	ORA	#$20			; convert upper to lower case
001415r 2               NoUcase
001415r 2  91 83        	STA	(Sutill),Y		; save byte back to string
001417r 2  98           	TYA				; test index
001418r 2  D0 F1        	BNE	LC_loop		; loop if not all done
00141Ar 2               
00141Ar 2  F0 1F        	BEQ	NoString		; tidy up and exit, branch always
00141Cr 2               
00141Cr 2               ; perform UCASE$()
00141Cr 2               
00141Cr 2               LAB_UCASE
00141Cr 2  20 rr rr     	JSR	LAB_EVST		; evaluate string
00141Fr 2  85 AC        	STA	str_ln		; set string length
001421r 2  A8           	TAY				; copy length to Y
001422r 2  F0 17        	BEQ	NoString		; branch if null string
001424r 2               
001424r 2  20 rr rr     	JSR	LAB_MSSP		; make string space A bytes long A=length,
001427r 2               					; X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
001427r 2  86 AD        	STX	str_pl		; save string pointer low byte
001429r 2  84 AE        	STY	str_ph		; save string pointer high byte
00142Br 2  A8           	TAY				; get string length back
00142Cr 2               
00142Cr 2               UC_loop
00142Cr 2  88           	DEY				; decrement index
00142Dr 2  B1 71        	LDA	(ut1_pl),Y		; get byte from string
00142Fr 2  20 rr rr     	JSR	LAB_CASC		; is character "a" to "z" (or "A" to "Z")
001432r 2  90 02        	BCC	NoLcase		; branch if not alpha
001434r 2               
001434r 2  29 DF        	AND	#$DF			; convert lower to upper case
001436r 2               NoLcase
001436r 2  91 83        	STA	(Sutill),Y		; save byte back to string
001438r 2  98           	TYA				; test index
001439r 2  D0 F1        	BNE	UC_loop		; loop if not all done
00143Br 2               
00143Br 2               NoString
00143Br 2  4C rr rr     	JMP	LAB_RTST		; check for space on descriptor stack then put string
00143Er 2               					; address and length on descriptor stack and update stack
00143Er 2               					; pointers
00143Er 2               
00143Er 2               ; perform SADD()
00143Er 2               
00143Er 2               LAB_SADD
00143Er 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
001441r 2  20 rr rr     	JSR	LAB_GVAR		; get var address
001444r 2               
001444r 2  20 rr rr     	JSR	LAB_1BFB		; scan for ")", else do syntax error then warm start
001447r 2  20 rr rr     	JSR	LAB_CTST		; check if source is string, else do type mismatch
00144Ar 2               
00144Ar 2  A0 02        	LDY	#$02			; index to string pointer high byte
00144Cr 2  B1 95        	LDA	(Cvaral),Y		; get string pointer high byte
00144Er 2  AA           	TAX				; copy string pointer high byte to X
00144Fr 2  88           	DEY				; index to string pointer low byte
001450r 2  B1 95        	LDA	(Cvaral),Y		; get string pointer low byte
001452r 2  A8           	TAY				; copy string pointer low byte to Y
001453r 2  8A           	TXA				; copy string pointer high byte to A
001454r 2  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
001457r 2               
001457r 2               ; perform LEN()
001457r 2               
001457r 2               LAB_LENS
001457r 2  20 rr rr     	JSR	LAB_ESGL		; evaluate string, get length in A (and Y)
00145Ar 2  4C rr rr     	JMP	LAB_1FD0		; convert Y to byte in FAC1 and return
00145Dr 2               
00145Dr 2               ; evaluate string, get length in Y
00145Dr 2               
00145Dr 2               LAB_ESGL
00145Dr 2  20 rr rr     	JSR	LAB_EVST		; evaluate string
001460r 2  A8           	TAY				; copy length to Y
001461r 2  60           	RTS
001462r 2               
001462r 2               ; perform ASC()
001462r 2               
001462r 2               LAB_ASC
001462r 2  20 rr rr     	JSR	LAB_ESGL		; evaluate string, get length in A (and Y)
001465r 2  F0 08        	BEQ	LAB_23A8		; if null do function call error then warm start
001467r 2               
001467r 2  A0 00        	LDY	#$00			; set index to first character
001469r 2  B1 71        	LDA	(ut1_pl),Y		; get byte
00146Br 2  A8           	TAY				; copy to Y
00146Cr 2  4C rr rr     	JMP	LAB_1FD0		; convert Y to byte in FAC1 and return
00146Fr 2               
00146Fr 2               ; do function call error then warm start
00146Fr 2               
00146Fr 2               LAB_23A8
00146Fr 2  4C rr rr     	JMP	LAB_FCER		; do function call error then warm start
001472r 2               
001472r 2               ; scan and get byte parameter
001472r 2               
001472r 2               LAB_SGBY
001472r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
001475r 2               
001475r 2               ; get byte parameter
001475r 2               
001475r 2               LAB_GTBY
001475r 2  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
001478r 2               					; else do type mismatch
001478r 2               
001478r 2               ; evaluate byte expression, result in X
001478r 2               
001478r 2               LAB_EVBY
001478r 2  20 rr rr     	JSR	LAB_EVPI		; evaluate integer expression (no check)
00147Br 2               
00147Br 2  A4 AE        	LDY	FAC1_2		; get FAC1 mantissa2
00147Dr 2  D0 F0        	BNE	LAB_23A8		; if top byte <> 0 do function call error then warm start
00147Fr 2               
00147Fr 2  A6 AF        	LDX	FAC1_3		; get FAC1 mantissa3
001481r 2  4C C2 00     	JMP	LAB_GBYT		; scan memory and return
001484r 2               
001484r 2               ; perform VAL()
001484r 2               
001484r 2               LAB_VAL
001484r 2  20 rr rr     	JSR	LAB_ESGL		; evaluate string, get length in A (and Y)
001487r 2  D0 03        	BNE	LAB_23C5		; branch if not null string
001489r 2               
001489r 2               					; string was null so set result = $00
001489r 2  4C rr rr     	JMP	LAB_24F1		; clear FAC1 exponent and sign and return
00148Cr 2               
00148Cr 2               LAB_23C5
00148Cr 2  A6 C3        	LDX	Bpntrl		; get BASIC execute pointer low byte
00148Er 2  A4 C4        	LDY	Bpntrh		; get BASIC execute pointer high byte
001490r 2  86 BA        	STX	Btmpl			; save BASIC execute pointer low byte
001492r 2  84 BB        	STY	Btmph			; save BASIC execute pointer high byte
001494r 2  A6 71        	LDX	ut1_pl		; get string pointer low byte
001496r 2  86 C3        	STX	Bpntrl		; save as BASIC execute pointer low byte
001498r 2  18           	CLC				; clear carry
001499r 2  65 71        	ADC	ut1_pl		; add string length
00149Br 2  85 73        	STA	ut2_pl		; save string end low byte
00149Dr 2  A5 72        	LDA	ut1_ph		; get string pointer high byte
00149Fr 2  85 C4        	STA	Bpntrh		; save as BASIC execute pointer high byte
0014A1r 2  69 00        	ADC	#$00			; add carry to high byte
0014A3r 2  85 74        	STA	ut2_ph		; save string end high byte
0014A5r 2  A0 00        	LDY	#$00			; set index to $00
0014A7r 2  B1 73        	LDA	(ut2_pl),Y		; get string end +1 byte
0014A9r 2  48           	PHA				; push it
0014AAr 2  98           	TYA				; clear A
0014ABr 2  91 73        	STA	(ut2_pl),Y		; terminate string with $00
0014ADr 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
0014B0r 2  20 rr rr     	JSR	LAB_2887		; get FAC1 from string
0014B3r 2  68           	PLA				; restore string end +1 byte
0014B4r 2  A0 00        	LDY	#$00			; set index to zero
0014B6r 2  91 73        	STA	(ut2_pl),Y		; put string end byte back
0014B8r 2               
0014B8r 2               ; restore BASIC execute pointer from temp (Btmpl/Btmph)
0014B8r 2               
0014B8r 2               LAB_23F3
0014B8r 2  A6 BA        	LDX	Btmpl			; get BASIC execute pointer low byte back
0014BAr 2  A4 BB        	LDY	Btmph			; get BASIC execute pointer high byte back
0014BCr 2  86 C3        	STX	Bpntrl		; save BASIC execute pointer low byte
0014BEr 2  84 C4        	STY	Bpntrh		; save BASIC execute pointer high byte
0014C0r 2  60           	RTS
0014C1r 2               
0014C1r 2               ; get two parameters for POKE or WAIT
0014C1r 2               
0014C1r 2               LAB_GADB
0014C1r 2  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
0014C4r 2               					; else do type mismatch
0014C4r 2  20 rr rr     	JSR	LAB_F2FX		; save integer part of FAC1 in temporary integer
0014C7r 2               
0014C7r 2               ; scan for "," and get byte, else do Syntax error then warm start
0014C7r 2               
0014C7r 2               LAB_SCGB
0014C7r 2  20 rr rr     	JSR	LAB_1C01		; scan for "," , else do syntax error then warm start
0014CAr 2  A5 12        	LDA	Itemph		; save temporary integer high byte
0014CCr 2  48           	PHA				; on stack
0014CDr 2  A5 11        	LDA	Itempl		; save temporary integer low byte
0014CFr 2  48           	PHA				; on stack
0014D0r 2  20 rr rr     	JSR	LAB_GTBY		; get byte parameter
0014D3r 2  68           	PLA				; pull low byte
0014D4r 2  85 11        	STA	Itempl		; restore temporary integer low byte
0014D6r 2  68           	PLA				; pull high byte
0014D7r 2  85 12        	STA	Itemph		; restore temporary integer high byte
0014D9r 2  60           	RTS
0014DAr 2               
0014DAr 2               ; convert float to fixed routine. accepts any value that fits in 24 bits, +ve or
0014DAr 2               ; -ve and converts it into a right truncated integer in Itempl and Itemph
0014DAr 2               
0014DAr 2               ; save unsigned 16 bit integer part of FAC1 in temporary integer
0014DAr 2               
0014DAr 2               LAB_F2FX
0014DAr 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
0014DCr 2  C9 98        	CMP	#$98			; compare with exponent = 2^24
0014DEr 2  B0 8F        	BCS	LAB_23A8		; if >= do function call error then warm start
0014E0r 2               
0014E0r 2               LAB_F2FU
0014E0r 2  20 rr rr     	JSR	LAB_2831		; convert FAC1 floating-to-fixed
0014E3r 2  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
0014E5r 2  A4 AF        	LDY	FAC1_3		; get FAC1 mantissa3
0014E7r 2  84 11        	STY	Itempl		; save temporary integer low byte
0014E9r 2  85 12        	STA	Itemph		; save temporary integer high byte
0014EBr 2  60           	RTS
0014ECr 2               
0014ECr 2               ; perform PEEK()
0014ECr 2               
0014ECr 2               LAB_PEEK
0014ECr 2  20 rr rr     	JSR	LAB_F2FX		; save integer part of FAC1 in temporary integer
0014EFr 2  A2 00        	LDX	#$00			; clear index
0014F1r 2  A1 11        	LDA	(Itempl,X)		; get byte via temporary integer (addr)
0014F3r 2  A8           	TAY				; copy byte to Y
0014F4r 2  4C rr rr     	JMP	LAB_1FD0		; convert Y to byte in FAC1 and return
0014F7r 2               
0014F7r 2               ; perform POKE
0014F7r 2               
0014F7r 2               LAB_POKE
0014F7r 2  20 rr rr     	JSR	LAB_GADB		; get two parameters for POKE or WAIT
0014FAr 2  8A           	TXA				; copy byte argument to A
0014FBr 2  A2 00        	LDX	#$00			; clear index
0014FDr 2  81 11        	STA	(Itempl,X)		; save byte via temporary integer (addr)
0014FFr 2  60           	RTS
001500r 2               
001500r 2               ; perform DEEK()
001500r 2               
001500r 2               LAB_DEEK
001500r 2  20 rr rr     	JSR	LAB_F2FX		; save integer part of FAC1 in temporary integer
001503r 2  A2 00        	LDX	#$00			; clear index
001505r 2  A1 11        	LDA	(Itempl,X)		; PEEK low byte
001507r 2  A8           	TAY				; copy to Y
001508r 2  E6 11        	INC	Itempl		; increment pointer low byte
00150Ar 2  D0 02        	BNE	Deekh			; skip high increment if no rollover
00150Cr 2               
00150Cr 2  E6 12        	INC	Itemph		; increment pointer high byte
00150Er 2               Deekh
00150Er 2  A1 11        	LDA	(Itempl,X)		; PEEK high byte
001510r 2  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
001513r 2               
001513r 2               ; perform DOKE
001513r 2               
001513r 2               LAB_DOKE
001513r 2  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
001516r 2               					; else do type mismatch
001516r 2  20 rr rr     	JSR	LAB_F2FX		; convert floating-to-fixed
001519r 2               
001519r 2  84 97        	STY	Frnxtl		; save pointer low byte (float to fixed returns word in AY)
00151Br 2  85 98        	STA	Frnxth		; save pointer high byte
00151Dr 2               
00151Dr 2  20 rr rr     	JSR	LAB_1C01		; scan for "," , else do syntax error then warm start
001520r 2  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
001523r 2               					; else do type mismatch
001523r 2  20 rr rr     	JSR	LAB_F2FX		; convert floating-to-fixed
001526r 2               
001526r 2  98           	TYA				; copy value low byte (float to fixed returns word in AY)
001527r 2  A2 00        	LDX	#$00			; clear index
001529r 2  81 97        	STA	(Frnxtl,X)		; POKE low byte
00152Br 2  E6 97        	INC	Frnxtl		; increment pointer low byte
00152Dr 2  D0 02        	BNE	Dokeh			; skip high increment if no rollover
00152Fr 2               
00152Fr 2  E6 98        	INC	Frnxth		; increment pointer high byte
001531r 2               Dokeh
001531r 2  A5 12        	LDA	Itemph		; get value high byte
001533r 2  81 97        	STA	(Frnxtl,X)		; POKE high byte
001535r 2  4C C2 00     	JMP	LAB_GBYT		; scan memory and return
001538r 2               
001538r 2               ; perform SWAP
001538r 2               
001538r 2               LAB_SWAP
001538r 2  20 rr rr     	JSR	LAB_GVAR		; get var1 address
00153Br 2  85 97        	STA	Lvarpl		; save var1 address low byte
00153Dr 2  84 98        	STY	Lvarph		; save var1 address high byte
00153Fr 2  A5 5F        	LDA	Dtypef		; get data type flag, $FF=string, $00=numeric
001541r 2  48           	PHA				; save data type flag
001542r 2               
001542r 2  20 rr rr     	JSR	LAB_1C01		; scan for "," , else do syntax error then warm start
001545r 2  20 rr rr     	JSR	LAB_GVAR		; get var2 address (pointer in Cvaral/h)
001548r 2  68           	PLA				; pull var1 data type flag
001549r 2  45 5F        	EOR	Dtypef		; compare with var2 data type
00154Br 2  10 10        	BPL	SwapErr		; exit if not both the same type
00154Dr 2               
00154Dr 2  A0 03        	LDY	#$03			; four bytes to swap (either value or descriptor+1)
00154Fr 2               SwapLp
00154Fr 2  B1 97        	LDA	(Lvarpl),Y		; get byte from var1
001551r 2  AA           	TAX				; save var1 byte
001552r 2  B1 95        	LDA	(Cvaral),Y		; get byte from var2
001554r 2  91 97        	STA	(Lvarpl),Y		; save byte to var1
001556r 2  8A           	TXA				; restore var1 byte
001557r 2  91 95        	STA	(Cvaral),Y		; save byte to var2
001559r 2  88           	DEY				; decrement index
00155Ar 2  10 F3        	BPL	SwapLp		; loop until done
00155Cr 2               
00155Cr 2  60           	RTS
00155Dr 2               
00155Dr 2               SwapErr
00155Dr 2  4C rr rr     	JMP	LAB_1ABC		; do "Type mismatch" error then warm start
001560r 2               
001560r 2               ; perform CALL
001560r 2               
001560r 2               LAB_CALL
001560r 2  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
001563r 2               					; else do type mismatch
001563r 2  20 rr rr     	JSR	LAB_F2FX		; convert floating-to-fixed
001566r 2  A9 rr        	LDA	#>CallExit		; set return address high byte
001568r 2  48           	PHA				; put on stack
001569r 2  A9 rr        	LDA	#<CallExit-1	; set return address low byte
00156Br 2  48           	PHA				; put on stack
00156Cr 2  6C 11 00     	JMP	(Itempl)		; do indirect jump to user routine
00156Fr 2               
00156Fr 2               ; if the called routine exits correctly then it will return to here. this will then get
00156Fr 2               ; the next byte for the interpreter and return
00156Fr 2               
00156Fr 2               CallExit
00156Fr 2  4C C2 00     	JMP	LAB_GBYT		; scan memory and return
001572r 2               
001572r 2               ; perform WAIT
001572r 2               
001572r 2               LAB_WAIT
001572r 2  20 rr rr     	JSR	LAB_GADB		; get two parameters for POKE or WAIT
001575r 2  86 97        	STX	Frnxtl		; save byte
001577r 2  A2 00        	LDX	#$00			; clear mask
001579r 2  20 C2 00     	JSR	LAB_GBYT		; scan memory
00157Cr 2  F0 03        	BEQ	LAB_2441		; skip if no third argument
00157Er 2               
00157Er 2  20 rr rr     	JSR	LAB_SCGB		; scan for "," and get byte, else SN error then warm start
001581r 2               LAB_2441
001581r 2  86 98        	STX	Frnxth		; save EOR argument
001583r 2               LAB_2445
001583r 2  B1 11        	LDA	(Itempl),Y		; get byte via temporary integer (addr)
001585r 2  45 98        	EOR	Frnxth		; EOR with second argument (mask)
001587r 2  25 97        	AND	Frnxtl		; AND with first argument (byte)
001589r 2  F0 F8        	BEQ	LAB_2445		; loop if result is zero
00158Br 2               
00158Br 2               LAB_244D
00158Br 2  60           	RTS
00158Cr 2               
00158Cr 2               ; perform subtraction, FAC1 from (AY)
00158Cr 2               
00158Cr 2               LAB_2455
00158Cr 2  20 rr rr     	JSR	LAB_264D		; unpack memory (AY) into FAC2
00158Fr 2               
00158Fr 2               ; perform subtraction, FAC1 from FAC2
00158Fr 2               
00158Fr 2               LAB_SUBTRACT
00158Fr 2  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
001591r 2  49 FF        	EOR	#$FF			; complement it
001593r 2  85 B0        	STA	FAC1_s		; save FAC1 sign (b7)
001595r 2  45 B7        	EOR	FAC2_s		; EOR with FAC2 sign (b7)
001597r 2  85 B8        	STA	FAC_sc		; save sign compare (FAC1 EOR FAC2)
001599r 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
00159Br 2  4C rr rr     	JMP	LAB_ADD		; go add FAC2 to FAC1
00159Er 2               
00159Er 2               ; perform addition
00159Er 2               
00159Er 2               LAB_2467
00159Er 2  20 rr rr     	JSR	LAB_257B		; shift FACX A times right (>8 shifts)
0015A1r 2  90 4D        	BCC	LAB_24A8		;.go subtract mantissas
0015A3r 2               
0015A3r 2               ; add 0.5 to FAC1
0015A3r 2               
0015A3r 2               LAB_244E
0015A3r 2  A9 rr        	LDA	#<LAB_2A96		; set 0.5 pointer low byte
0015A5r 2  A0 rr        	LDY	#>LAB_2A96		; set 0.5 pointer high byte
0015A7r 2               
0015A7r 2               ; add (AY) to FAC1
0015A7r 2               
0015A7r 2               LAB_246C
0015A7r 2  20 rr rr     	JSR	LAB_264D		; unpack memory (AY) into FAC2
0015AAr 2               
0015AAr 2               ; add FAC2 to FAC1
0015AAr 2               
0015AAr 2               LAB_ADD
0015AAr 2  D0 10        	BNE	LAB_2474		; branch if FAC1 was not zero
0015ACr 2               
0015ACr 2               ; copy FAC2 to FAC1
0015ACr 2               
0015ACr 2               LAB_279B
0015ACr 2  A5 B7        	LDA	FAC2_s		; get FAC2 sign (b7)
0015AEr 2               
0015AEr 2               ; save FAC1 sign and copy ABS(FAC2) to FAC1
0015AEr 2               
0015AEr 2               LAB_279D
0015AEr 2  85 B0        	STA	FAC1_s		; save FAC1 sign (b7)
0015B0r 2  A2 04        	LDX	#$04			; 4 bytes to copy
0015B2r 2               LAB_27A1
0015B2r 2  B5 B2        	LDA	FAC1_o,X		; get byte from FAC2,X
0015B4r 2  95 AB        	STA	FAC1_e-1,X		; save byte at FAC1,X
0015B6r 2  CA           	DEX				; decrement count
0015B7r 2  D0 F9        	BNE	LAB_27A1		; loop if not all done
0015B9r 2               
0015B9r 2  86 B9        	STX	FAC1_r		; clear FAC1 rounding byte
0015BBr 2  60           	RTS
0015BCr 2               
0015BCr 2               					; FAC1 is non zero
0015BCr 2               LAB_2474
0015BCr 2  A6 B9        	LDX	FAC1_r		; get FAC1 rounding byte
0015BEr 2  86 A3        	STX	FAC2_r		; save as FAC2 rounding byte
0015C0r 2  A2 B3        	LDX	#FAC2_e		; set index to FAC2 exponent addr
0015C2r 2  A5 B3        	LDA	FAC2_e		; get FAC2 exponent
0015C4r 2               LAB_247C
0015C4r 2  A8           	TAY				; copy exponent
0015C5r 2  F0 C4        	BEQ	LAB_244D		; exit if zero
0015C7r 2               
0015C7r 2  38           	SEC				; set carry for subtract
0015C8r 2  E5 AC        	SBC	FAC1_e		; subtract FAC1 exponent
0015CAr 2  F0 24        	BEQ	LAB_24A8		; branch if = (go add mantissa)
0015CCr 2               
0015CCr 2  90 12        	BCC	LAB_2498		; branch if <
0015CEr 2               
0015CEr 2               					; FAC2>FAC1
0015CEr 2  84 AC        	STY	FAC1_e		; save FAC1 exponent
0015D0r 2  A4 B7        	LDY	FAC2_s		; get FAC2 sign (b7)
0015D2r 2  84 B0        	STY	FAC1_s		; save FAC1 sign (b7)
0015D4r 2  49 FF        	EOR	#$FF			; complement A
0015D6r 2  69 00        	ADC	#$00			; +1 (twos complement, carry is set)
0015D8r 2  A0 00        	LDY	#$00			; clear Y
0015DAr 2  84 A3        	STY	FAC2_r		; clear FAC2 rounding byte
0015DCr 2  A2 AC        	LDX	#FAC1_e		; set index to FAC1 exponent addr
0015DEr 2  D0 04        	BNE	LAB_249C		; branch always
0015E0r 2               
0015E0r 2               LAB_2498
0015E0r 2  A0 00        	LDY	#$00			; clear Y
0015E2r 2  84 B9        	STY	FAC1_r		; clear FAC1 rounding byte
0015E4r 2               LAB_249C
0015E4r 2  C9 F9        	CMP	#$F9			; compare exponent diff with $F9
0015E6r 2  30 B6        	BMI	LAB_2467		; branch if range $79-$F8
0015E8r 2               
0015E8r 2  A8           	TAY				; copy exponent difference to Y
0015E9r 2  A5 B9        	LDA	FAC1_r		; get FAC1 rounding byte
0015EBr 2  56 01        	LSR	PLUS_1,X		; shift FAC? mantissa1
0015EDr 2  20 rr rr     	JSR	LAB_2592		; shift FACX Y times right
0015F0r 2               
0015F0r 2               					; exponents are equal now do mantissa subtract
0015F0r 2               LAB_24A8
0015F0r 2  24 B8        	BIT	FAC_sc		; test sign compare (FAC1 EOR FAC2)
0015F2r 2  10 4C        	BPL	LAB_24F8		; if = add FAC2 mantissa to FAC1 mantissa and return
0015F4r 2               
0015F4r 2  A0 AC        	LDY	#FAC1_e		; set index to FAC1 exponent addr
0015F6r 2  E0 B3        	CPX	#FAC2_e		; compare X to FAC2 exponent addr
0015F8r 2  F0 02        	BEQ	LAB_24B4		; branch if =
0015FAr 2               
0015FAr 2  A0 B3        	LDY	#FAC2_e		; else set index to FAC2 exponent addr
0015FCr 2               
0015FCr 2               					; subtract smaller from bigger (take sign of bigger)
0015FCr 2               LAB_24B4
0015FCr 2  38           	SEC				; set carry for subtract
0015FDr 2  49 FF        	EOR	#$FF			; ones complement A
0015FFr 2  65 A3        	ADC	FAC2_r		; add FAC2 rounding byte
001601r 2  85 B9        	STA	FAC1_r		; save FAC1 rounding byte
001603r 2  B9 03 00     	LDA	PLUS_3,Y		; get FACY mantissa3
001606r 2  F5 03        	SBC	PLUS_3,X		; subtract FACX mantissa3
001608r 2  85 AF        	STA	FAC1_3		; save FAC1 mantissa3
00160Ar 2  B9 02 00     	LDA	PLUS_2,Y		; get FACY mantissa2
00160Dr 2  F5 02        	SBC	PLUS_2,X		; subtract FACX mantissa2
00160Fr 2  85 AE        	STA	FAC1_2		; save FAC1 mantissa2
001611r 2  B9 01 00     	LDA	PLUS_1,Y		; get FACY mantissa1
001614r 2  F5 01        	SBC	PLUS_1,X		; subtract FACX mantissa1
001616r 2  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
001618r 2               
001618r 2               ; do ABS and normalise FAC1
001618r 2               
001618r 2               LAB_24D0
001618r 2  B0 03        	BCS	LAB_24D5		; branch if number is +ve
00161Ar 2               
00161Ar 2  20 rr rr     	JSR	LAB_2537		; negate FAC1
00161Dr 2               
00161Dr 2               ; normalise FAC1
00161Dr 2               
00161Dr 2               LAB_24D5
00161Dr 2  A0 00        	LDY	#$00			; clear Y
00161Fr 2  98           	TYA				; clear A
001620r 2  18           	CLC				; clear carry for add
001621r 2               LAB_24D9
001621r 2  A6 AD        	LDX	FAC1_1		; get FAC1 mantissa1
001623r 2  D0 3E        	BNE	LAB_251B		; if not zero normalise FAC1
001625r 2               
001625r 2  A6 AE        	LDX	FAC1_2		; get FAC1 mantissa2
001627r 2  86 AD        	STX	FAC1_1		; save FAC1 mantissa1
001629r 2  A6 AF        	LDX	FAC1_3		; get FAC1 mantissa3
00162Br 2  86 AE        	STX	FAC1_2		; save FAC1 mantissa2
00162Dr 2  A6 B9        	LDX	FAC1_r		; get FAC1 rounding byte
00162Fr 2  86 AF        	STX	FAC1_3		; save FAC1 mantissa3
001631r 2  84 B9        	STY	FAC1_r		; clear FAC1 rounding byte
001633r 2  69 08        	ADC	#$08			; add x to exponent offset
001635r 2  C9 18        	CMP	#$18			; compare with $18 (max offset, all bits would be =0)
001637r 2  D0 E8        	BNE	LAB_24D9		; loop if not max
001639r 2               
001639r 2               ; clear FAC1 exponent and sign
001639r 2               
001639r 2               LAB_24F1
001639r 2  A9 00        	LDA	#$00			; clear A
00163Br 2               LAB_24F3
00163Br 2  85 AC        	STA	FAC1_e		; set FAC1 exponent
00163Dr 2               
00163Dr 2               ; save FAC1 sign
00163Dr 2               
00163Dr 2               LAB_24F5
00163Dr 2  85 B0        	STA	FAC1_s		; save FAC1 sign (b7)
00163Fr 2  60           	RTS
001640r 2               
001640r 2               ; add FAC2 mantissa to FAC1 mantissa
001640r 2               
001640r 2               LAB_24F8
001640r 2  65 A3        	ADC	FAC2_r		; add FAC2 rounding byte
001642r 2  85 B9        	STA	FAC1_r		; save FAC1 rounding byte
001644r 2  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
001646r 2  65 B6        	ADC	FAC2_3		; add FAC2 mantissa3
001648r 2  85 AF        	STA	FAC1_3		; save FAC1 mantissa3
00164Ar 2  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
00164Cr 2  65 B5        	ADC	FAC2_2		; add FAC2 mantissa2
00164Er 2  85 AE        	STA	FAC1_2		; save FAC1 mantissa2
001650r 2  A5 AD        	LDA	FAC1_1		; get FAC1 mantissa1
001652r 2  65 B4        	ADC	FAC2_1		; add FAC2 mantissa1
001654r 2  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
001656r 2  B0 1A        	BCS	LAB_252A		; if carry then normalise FAC1 for C=1
001658r 2               
001658r 2  60           	RTS				; else just exit
001659r 2               
001659r 2               LAB_2511
001659r 2  69 01        	ADC	#$01			; add 1 to exponent offset
00165Br 2  06 B9        	ASL	FAC1_r		; shift FAC1 rounding byte
00165Dr 2  26 AF        	ROL	FAC1_3		; shift FAC1 mantissa3
00165Fr 2  26 AE        	ROL	FAC1_2		; shift FAC1 mantissa2
001661r 2  26 AD        	ROL	FAC1_1		; shift FAC1 mantissa1
001663r 2               
001663r 2               ; normalise FAC1
001663r 2               
001663r 2               LAB_251B
001663r 2  10 F4        	BPL	LAB_2511		; loop if not normalised
001665r 2               
001665r 2  38           	SEC				; set carry for subtract
001666r 2  E5 AC        	SBC	FAC1_e		; subtract FAC1 exponent
001668r 2  B0 CF        	BCS	LAB_24F1		; branch if underflow (set result = $0)
00166Ar 2               
00166Ar 2  49 FF        	EOR	#$FF			; complement exponent
00166Cr 2  69 01        	ADC	#$01			; +1 (twos complement)
00166Er 2  85 AC        	STA	FAC1_e		; save FAC1 exponent
001670r 2               
001670r 2               ; test and normalise FAC1 for C=0/1
001670r 2               
001670r 2               LAB_2528
001670r 2  90 0C        	BCC	LAB_2536		; exit if no overflow
001672r 2               
001672r 2               ; normalise FAC1 for C=1
001672r 2               
001672r 2               LAB_252A
001672r 2  E6 AC        	INC	FAC1_e		; increment FAC1 exponent
001674r 2  F0 36        	BEQ	LAB_2564		; if zero do overflow error and warm start
001676r 2               
001676r 2  66 AD        	ROR	FAC1_1		; shift FAC1 mantissa1
001678r 2  66 AE        	ROR	FAC1_2		; shift FAC1 mantissa2
00167Ar 2  66 AF        	ROR	FAC1_3		; shift FAC1 mantissa3
00167Cr 2  66 B9        	ROR	FAC1_r		; shift FAC1 rounding byte
00167Er 2               LAB_2536
00167Er 2  60           	RTS
00167Fr 2               
00167Fr 2               ; negate FAC1
00167Fr 2               
00167Fr 2               LAB_2537
00167Fr 2  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
001681r 2  49 FF        	EOR	#$FF			; complement it
001683r 2  85 B0        	STA	FAC1_s		; save FAC1 sign (b7)
001685r 2               
001685r 2               ; twos complement FAC1 mantissa
001685r 2               
001685r 2               LAB_253D
001685r 2  A5 AD        	LDA	FAC1_1		; get FAC1 mantissa1
001687r 2  49 FF        	EOR	#$FF			; complement it
001689r 2  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
00168Br 2  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
00168Dr 2  49 FF        	EOR	#$FF			; complement it
00168Fr 2  85 AE        	STA	FAC1_2		; save FAC1 mantissa2
001691r 2  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
001693r 2  49 FF        	EOR	#$FF			; complement it
001695r 2  85 AF        	STA	FAC1_3		; save FAC1 mantissa3
001697r 2  A5 B9        	LDA	FAC1_r		; get FAC1 rounding byte
001699r 2  49 FF        	EOR	#$FF			; complement it
00169Br 2  85 B9        	STA	FAC1_r		; save FAC1 rounding byte
00169Dr 2  E6 B9        	INC	FAC1_r		; increment FAC1 rounding byte
00169Fr 2  D0 0A        	BNE	LAB_2563		; exit if no overflow
0016A1r 2               
0016A1r 2               ; increment FAC1 mantissa
0016A1r 2               
0016A1r 2               LAB_2559
0016A1r 2  E6 AF        	INC	FAC1_3		; increment FAC1 mantissa3
0016A3r 2  D0 06        	BNE	LAB_2563		; finished if no rollover
0016A5r 2               
0016A5r 2  E6 AE        	INC	FAC1_2		; increment FAC1 mantissa2
0016A7r 2  D0 02        	BNE	LAB_2563		; finished if no rollover
0016A9r 2               
0016A9r 2  E6 AD        	INC	FAC1_1		; increment FAC1 mantissa1
0016ABr 2               LAB_2563
0016ABr 2  60           	RTS
0016ACr 2               
0016ACr 2               ; do overflow error (overflow exit)
0016ACr 2               
0016ACr 2               LAB_2564
0016ACr 2  A2 0A        	LDX	#$0A			; error code $0A ("Overflow" error)
0016AEr 2  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
0016B1r 2               
0016B1r 2               ; shift FCAtemp << A+8 times
0016B1r 2               
0016B1r 2               LAB_2569
0016B1r 2  A2 74        	LDX	#FACt_1-1		; set offset to FACtemp
0016B3r 2               LAB_256B
0016B3r 2  B4 03        	LDY	PLUS_3,X		; get FACX mantissa3
0016B5r 2  84 B9        	STY	FAC1_r		; save as FAC1 rounding byte
0016B7r 2  B4 02        	LDY	PLUS_2,X		; get FACX mantissa2
0016B9r 2  94 03        	STY	PLUS_3,X		; save FACX mantissa3
0016BBr 2  B4 01        	LDY	PLUS_1,X		; get FACX mantissa1
0016BDr 2  94 02        	STY	PLUS_2,X		; save FACX mantissa2
0016BFr 2  A4 B2        	LDY	FAC1_o		; get FAC1 overflow byte
0016C1r 2  94 01        	STY	PLUS_1,X		; save FACX mantissa1
0016C3r 2               
0016C3r 2               ; shift FACX -A times right (> 8 shifts)
0016C3r 2               
0016C3r 2               LAB_257B
0016C3r 2  69 08        	ADC	#$08			; add 8 to shift count
0016C5r 2  30 EC        	BMI	LAB_256B		; go do 8 shift if still -ve
0016C7r 2               
0016C7r 2  F0 EA        	BEQ	LAB_256B		; go do 8 shift if zero
0016C9r 2               
0016C9r 2  E9 08        	SBC	#$08			; else subtract 8 again
0016CBr 2  A8           	TAY				; save count to Y
0016CCr 2  A5 B9        	LDA	FAC1_r		; get FAC1 rounding byte
0016CEr 2  B0 12        	BCS	LAB_259A		;.
0016D0r 2               
0016D0r 2               LAB_2588
0016D0r 2  16 01        	ASL	PLUS_1,X		; shift FACX mantissa1
0016D2r 2  90 02        	BCC	LAB_258E		; branch if +ve
0016D4r 2               
0016D4r 2  F6 01        	INC	PLUS_1,X		; this sets b7 eventually
0016D6r 2               LAB_258E
0016D6r 2  76 01        	ROR	PLUS_1,X		; shift FACX mantissa1 (correct for ASL)
0016D8r 2  76 01        	ROR	PLUS_1,X		; shift FACX mantissa1 (put carry in b7)
0016DAr 2               
0016DAr 2               ; shift FACX Y times right
0016DAr 2               
0016DAr 2               LAB_2592
0016DAr 2  76 02        	ROR	PLUS_2,X		; shift FACX mantissa2
0016DCr 2  76 03        	ROR	PLUS_3,X		; shift FACX mantissa3
0016DEr 2  6A           	ROR				; shift FACX rounding byte
0016DFr 2  C8           	INY				; increment exponent diff
0016E0r 2  D0 EE        	BNE	LAB_2588		; branch if range adjust not complete
0016E2r 2               
0016E2r 2               LAB_259A
0016E2r 2  18           	CLC				; just clear it
0016E3r 2  60           	RTS
0016E4r 2               
0016E4r 2               ; perform LOG()
0016E4r 2               
0016E4r 2               LAB_LOG
0016E4r 2  20 rr rr     	JSR	LAB_27CA		; test sign and zero
0016E7r 2  F0 02        	BEQ	LAB_25C4		; if zero do function call error then warm start
0016E9r 2               
0016E9r 2  10 03        	BPL	LAB_25C7		; skip error if +ve
0016EBr 2               
0016EBr 2               LAB_25C4
0016EBr 2  4C rr rr     	JMP	LAB_FCER		; do function call error then warm start (-ve)
0016EEr 2               
0016EEr 2               LAB_25C7
0016EEr 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
0016F0r 2  E9 7F        	SBC	#$7F			; normalise it
0016F2r 2  48           	PHA				; save it
0016F3r 2  A9 80        	LDA	#$80			; set exponent to zero
0016F5r 2  85 AC        	STA	FAC1_e		; save FAC1 exponent
0016F7r 2  A9 rr        	LDA	#<LAB_25AD		; set 1/root2 pointer low byte
0016F9r 2  A0 rr        	LDY	#>LAB_25AD		; set 1/root2 pointer high byte
0016FBr 2  20 rr rr     	JSR	LAB_246C		; add (AY) to FAC1 (1/root2)
0016FEr 2  A9 rr        	LDA	#<LAB_25B1		; set root2 pointer low byte
001700r 2  A0 rr        	LDY	#>LAB_25B1		; set root2 pointer high byte
001702r 2  20 rr rr     	JSR	LAB_26CA		; convert AY and do (AY)/FAC1 (root2/(x+(1/root2)))
001705r 2  A9 rr        	LDA	#<LAB_259C		; set 1 pointer low byte
001707r 2  A0 rr        	LDY	#>LAB_259C		; set 1 pointer high byte
001709r 2  20 rr rr     	JSR	LAB_2455		; subtract (AY) from FAC1 ((root2/(x+(1/root2)))-1)
00170Cr 2  A9 rr        	LDA	#<LAB_25A0		; set pointer low byte to counter
00170Er 2  A0 rr        	LDY	#>LAB_25A0		; set pointer high byte to counter
001710r 2  20 rr rr     	JSR	LAB_2B6E		; ^2 then series evaluation
001713r 2  A9 rr        	LDA	#<LAB_25B5		; set -0.5 pointer low byte
001715r 2  A0 rr        	LDY	#>LAB_25B5		; set -0.5 pointer high byte
001717r 2  20 rr rr     	JSR	LAB_246C		; add (AY) to FAC1
00171Ar 2  68           	PLA				; restore FAC1 exponent
00171Br 2  20 rr rr     	JSR	LAB_2912		; evaluate new ASCII digit
00171Er 2  A9 rr        	LDA	#<LAB_25B9		; set LOG(2) pointer low byte
001720r 2  A0 rr        	LDY	#>LAB_25B9		; set LOG(2) pointer high byte
001722r 2               
001722r 2               ; do convert AY, FCA1*(AY)
001722r 2               
001722r 2               LAB_25FB
001722r 2  20 rr rr     	JSR	LAB_264D		; unpack memory (AY) into FAC2
001725r 2               LAB_MULTIPLY
001725r 2  F0 4C        	BEQ	LAB_264C		; exit if zero
001727r 2               
001727r 2  20 rr rr     	JSR	LAB_2673		; test and adjust accumulators
00172Ar 2  A9 00        	LDA	#$00			; clear A
00172Cr 2  85 75        	STA	FACt_1		; clear temp mantissa1
00172Er 2  85 76        	STA	FACt_2		; clear temp mantissa2
001730r 2  85 77        	STA	FACt_3		; clear temp mantissa3
001732r 2  A5 B9        	LDA	FAC1_r		; get FAC1 rounding byte
001734r 2  20 rr rr     	JSR	LAB_2622		; go do shift/add FAC2
001737r 2  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
001739r 2  20 rr rr     	JSR	LAB_2622		; go do shift/add FAC2
00173Cr 2  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
00173Er 2  20 rr rr     	JSR	LAB_2622		; go do shift/add FAC2
001741r 2  A5 AD        	LDA	FAC1_1		; get FAC1 mantissa1
001743r 2  20 rr rr     	JSR	LAB_2627		; go do shift/add FAC2
001746r 2  4C rr rr     	JMP	LAB_273C		; copy temp to FAC1, normalise and return
001749r 2               
001749r 2               LAB_2622
001749r 2  D0 03        	BNE	LAB_2627		; branch if byte <> zero
00174Br 2               
00174Br 2  4C rr rr     	JMP	LAB_2569		; shift FCAtemp << A+8 times
00174Er 2               
00174Er 2               					; else do shift and add
00174Er 2               LAB_2627
00174Er 2  4A           	LSR				; shift byte
00174Fr 2  09 80        	ORA	#$80			; set top bit (mark for 8 times)
001751r 2               LAB_262A
001751r 2  A8           	TAY				; copy result
001752r 2  90 13        	BCC	LAB_2640		; skip next if bit was zero
001754r 2               
001754r 2  18           	CLC				; clear carry for add
001755r 2  A5 77        	LDA	FACt_3		; get temp mantissa3
001757r 2  65 B6        	ADC	FAC2_3		; add FAC2 mantissa3
001759r 2  85 77        	STA	FACt_3		; save temp mantissa3
00175Br 2  A5 76        	LDA	FACt_2		; get temp mantissa2
00175Dr 2  65 B5        	ADC	FAC2_2		; add FAC2 mantissa2
00175Fr 2  85 76        	STA	FACt_2		; save temp mantissa2
001761r 2  A5 75        	LDA	FACt_1		; get temp mantissa1
001763r 2  65 B4        	ADC	FAC2_1		; add FAC2 mantissa1
001765r 2  85 75        	STA	FACt_1		; save temp mantissa1
001767r 2               LAB_2640
001767r 2  66 75        	ROR	FACt_1		; shift temp mantissa1
001769r 2  66 76        	ROR	FACt_2		; shift temp mantissa2
00176Br 2  66 77        	ROR	FACt_3		; shift temp mantissa3
00176Dr 2  66 B9        	ROR	FAC1_r		; shift temp rounding byte
00176Fr 2  98           	TYA				; get byte back
001770r 2  4A           	LSR				; shift byte
001771r 2  D0 DE        	BNE	LAB_262A		; loop if all bits not done
001773r 2               
001773r 2               LAB_264C
001773r 2  60           	RTS
001774r 2               
001774r 2               ; unpack memory (AY) into FAC2
001774r 2               
001774r 2               LAB_264D
001774r 2  85 71        	STA	ut1_pl		; save pointer low byte
001776r 2  84 72        	STY	ut1_ph		; save pointer high byte
001778r 2  A0 03        	LDY	#$03			; 4 bytes to get (0-3)
00177Ar 2  B1 71        	LDA	(ut1_pl),Y		; get mantissa3
00177Cr 2  85 B6        	STA	FAC2_3		; save FAC2 mantissa3
00177Er 2  88           	DEY				; decrement index
00177Fr 2  B1 71        	LDA	(ut1_pl),Y		; get mantissa2
001781r 2  85 B5        	STA	FAC2_2		; save FAC2 mantissa2
001783r 2  88           	DEY				; decrement index
001784r 2  B1 71        	LDA	(ut1_pl),Y		; get mantissa1+sign
001786r 2  85 B7        	STA	FAC2_s		; save FAC2 sign (b7)
001788r 2  45 B0        	EOR	FAC1_s		; EOR with FAC1 sign (b7)
00178Ar 2  85 B8        	STA	FAC_sc		; save sign compare (FAC1 EOR FAC2)
00178Cr 2  A5 B7        	LDA	FAC2_s		; recover FAC2 sign (b7)
00178Er 2  09 80        	ORA	#$80			; set 1xxx xxx (set normal bit)
001790r 2  85 B4        	STA	FAC2_1		; save FAC2 mantissa1
001792r 2  88           	DEY				; decrement index
001793r 2  B1 71        	LDA	(ut1_pl),Y		; get exponent byte
001795r 2  85 B3        	STA	FAC2_e		; save FAC2 exponent
001797r 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001799r 2  60           	RTS
00179Ar 2               
00179Ar 2               ; test and adjust accumulators
00179Ar 2               
00179Ar 2               LAB_2673
00179Ar 2  A5 B3        	LDA	FAC2_e		; get FAC2 exponent
00179Cr 2               LAB_2675
00179Cr 2  F0 1D        	BEQ	LAB_2696		; branch if FAC2 = $00 (handle underflow)
00179Er 2               
00179Er 2  18           	CLC				; clear carry for add
00179Fr 2  65 AC        	ADC	FAC1_e		; add FAC1 exponent
0017A1r 2  90 04        	BCC	LAB_2680		; branch if sum of exponents <$0100
0017A3r 2               
0017A3r 2  30 31        	BMI	LAB_269B		; do overflow error
0017A5r 2               
0017A5r 2  18           	CLC				; clear carry for the add
0017A6r 2  2C           	.byte	$2C			; makes next line BIT $1410
0017A7r 2               LAB_2680
0017A7r 2  10 12        	BPL	LAB_2696		; if +ve go handle underflow
0017A9r 2               
0017A9r 2  69 80        	ADC	#$80			; adjust exponent
0017ABr 2  85 AC        	STA	FAC1_e		; save FAC1 exponent
0017ADr 2  D0 03        	BNE	LAB_268B		; branch if not zero
0017AFr 2               
0017AFr 2  4C rr rr     	JMP	LAB_24F5		; save FAC1 sign and return
0017B2r 2               
0017B2r 2               LAB_268B
0017B2r 2  A5 B8        	LDA	FAC_sc		; get sign compare (FAC1 EOR FAC2)
0017B4r 2  85 B0        	STA	FAC1_s		; save FAC1 sign (b7)
0017B6r 2               LAB_268F
0017B6r 2  60           	RTS
0017B7r 2               
0017B7r 2               ; handle overflow and underflow
0017B7r 2               
0017B7r 2               LAB_2690
0017B7r 2  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
0017B9r 2  10 1B        	BPL	LAB_269B		; do overflow error
0017BBr 2               
0017BBr 2               					; handle underflow
0017BBr 2               LAB_2696
0017BBr 2  68           	PLA				; pop return address low byte
0017BCr 2  68           	PLA				; pop return address high byte
0017BDr 2  4C rr rr     	JMP	LAB_24F1		; clear FAC1 exponent and sign and return
0017C0r 2               
0017C0r 2               ; multiply by 10
0017C0r 2               
0017C0r 2               LAB_269E
0017C0r 2  20 rr rr     	JSR	LAB_27AB		; round and copy FAC1 to FAC2
0017C3r 2  AA           	TAX				; copy exponent (set the flags)
0017C4r 2  F0 F0        	BEQ	LAB_268F		; exit if zero
0017C6r 2               
0017C6r 2  18           	CLC				; clear carry for add
0017C7r 2  69 02        	ADC	#$02			; add two to exponent (*4)
0017C9r 2  B0 0B        	BCS	LAB_269B		; do overflow error if > $FF
0017CBr 2               
0017CBr 2  A2 00        	LDX	#$00			; clear byte
0017CDr 2  86 B8        	STX	FAC_sc		; clear sign compare (FAC1 EOR FAC2)
0017CFr 2  20 rr rr     	JSR	LAB_247C		; add FAC2 to FAC1 (*5)
0017D2r 2  E6 AC        	INC	FAC1_e		; increment FAC1 exponent (*10)
0017D4r 2  D0 E0        	BNE	LAB_268F		; if non zero just do RTS
0017D6r 2               
0017D6r 2               LAB_269B
0017D6r 2  4C rr rr     	JMP	LAB_2564		; do overflow error and warm start
0017D9r 2               
0017D9r 2               ; divide by 10
0017D9r 2               
0017D9r 2               LAB_26B9
0017D9r 2  20 rr rr     	JSR	LAB_27AB		; round and copy FAC1 to FAC2
0017DCr 2  A9 rr        	LDA	#<LAB_26B5		; set pointer to 10d low addr
0017DEr 2  A0 rr        	LDY	#>LAB_26B5		; set pointer to 10d high addr
0017E0r 2  A2 00        	LDX	#$00			; clear sign
0017E2r 2               
0017E2r 2               ; divide by (AY) (X=sign)
0017E2r 2               
0017E2r 2               LAB_26C2
0017E2r 2  86 B8        	STX	FAC_sc		; save sign compare (FAC1 EOR FAC2)
0017E4r 2  20 rr rr     	JSR	LAB_UFAC		; unpack memory (AY) into FAC1
0017E7r 2  4C rr rr     	JMP	LAB_DIVIDE		; do FAC2/FAC1
0017EAr 2               
0017EAr 2               					; Perform divide-by
0017EAr 2               ; convert AY and do (AY)/FAC1
0017EAr 2               
0017EAr 2               LAB_26CA
0017EAr 2  20 rr rr     	JSR	LAB_264D		; unpack memory (AY) into FAC2
0017EDr 2               
0017EDr 2               					; Perform divide-into
0017EDr 2               LAB_DIVIDE
0017EDr 2  F0 63        	BEQ	LAB_2737		; if zero go do /0 error
0017EFr 2               
0017EFr 2  20 rr rr     	JSR	LAB_27BA		; round FAC1
0017F2r 2  A9 00        	LDA	#$00			; clear A
0017F4r 2  38           	SEC				; set carry for subtract
0017F5r 2  E5 AC        	SBC	FAC1_e		; subtract FAC1 exponent (2s complement)
0017F7r 2  85 AC        	STA	FAC1_e		; save FAC1 exponent
0017F9r 2  20 rr rr     	JSR	LAB_2673		; test and adjust accumulators
0017FCr 2  E6 AC        	INC	FAC1_e		; increment FAC1 exponent
0017FEr 2  F0 D6        	BEQ	LAB_269B		; if zero do overflow error
001800r 2               
001800r 2  A2 FF        	LDX	#$FF			; set index for pre increment
001802r 2  A9 01        	LDA	#$01			; set bit to flag byte save
001804r 2               LAB_26E4
001804r 2  A4 B4        	LDY	FAC2_1		; get FAC2 mantissa1
001806r 2  C4 AD        	CPY	FAC1_1		; compare FAC1 mantissa1
001808r 2  D0 0A        	BNE	LAB_26F4		; branch if <>
00180Ar 2               
00180Ar 2  A4 B5        	LDY	FAC2_2		; get FAC2 mantissa2
00180Cr 2  C4 AE        	CPY	FAC1_2		; compare FAC1 mantissa2
00180Er 2  D0 04        	BNE	LAB_26F4		; branch if <>
001810r 2               
001810r 2  A4 B6        	LDY	FAC2_3		; get FAC2 mantissa3
001812r 2  C4 AF        	CPY	FAC1_3		; compare FAC1 mantissa3
001814r 2               LAB_26F4
001814r 2  08           	PHP				; save FAC2-FAC1 compare status
001815r 2  2A           	ROL				; shift the result byte
001816r 2  90 0E        	BCC	LAB_2702		; if no carry skip the byte save
001818r 2               
001818r 2  A0 01        	LDY	#$01			; set bit to flag byte save
00181Ar 2  E8           	INX				; else increment the index to FACt
00181Br 2  E0 02        	CPX	#$02			; compare with the index to FACt_3
00181Dr 2  30 04        	BMI	LAB_2701		; if not last byte just go save it
00181Fr 2               
00181Fr 2  D0 28        	BNE	LAB_272B		; if all done go save FAC1 rounding byte, normalise and
001821r 2               					; return
001821r 2               
001821r 2  A0 40        	LDY	#$40			; set bit to flag byte save for the rounding byte
001823r 2               LAB_2701
001823r 2  95 75        	STA	FACt_1,X		; write result byte to FACt_1 + index
001825r 2  98           	TYA				; copy the next save byte flag
001826r 2               LAB_2702
001826r 2  28           	PLP				; restore FAC2-FAC1 compare status
001827r 2  90 14        	BCC	LAB_2704		; if FAC2 < FAC1 then skip the subtract
001829r 2               
001829r 2  A8           	TAY				; save FAC2-FAC1 compare status
00182Ar 2  A5 B6        	LDA	FAC2_3		; get FAC2 mantissa3
00182Cr 2  E5 AF        	SBC	FAC1_3		; subtract FAC1 mantissa3
00182Er 2  85 B6        	STA	FAC2_3		; save FAC2 mantissa3
001830r 2  A5 B5        	LDA	FAC2_2		; get FAC2 mantissa2
001832r 2  E5 AE        	SBC	FAC1_2		; subtract FAC1 mantissa2
001834r 2  85 B5        	STA	FAC2_2		; save FAC2 mantissa2
001836r 2  A5 B4        	LDA	FAC2_1		; get FAC2 mantissa1
001838r 2  E5 AD        	SBC	FAC1_1		; subtract FAC1 mantissa1
00183Ar 2  85 B4        	STA	FAC2_1		; save FAC2 mantissa1
00183Cr 2  98           	TYA				; restore FAC2-FAC1 compare status
00183Dr 2               
00183Dr 2               					; FAC2 = FAC2*2
00183Dr 2               LAB_2704
00183Dr 2  06 B6        	ASL	FAC2_3		; shift FAC2 mantissa3
00183Fr 2  26 B5        	ROL	FAC2_2		; shift FAC2 mantissa2
001841r 2  26 B4        	ROL	FAC2_1		; shift FAC2 mantissa1
001843r 2  B0 CF        	BCS	LAB_26F4		; loop with no compare
001845r 2               
001845r 2  30 BD        	BMI	LAB_26E4		; loop with compare
001847r 2               
001847r 2  10 CB        	BPL	LAB_26F4		; loop always with no compare
001849r 2               
001849r 2               ; do A<<6, save as FAC1 rounding byte, normalise and return
001849r 2               
001849r 2               LAB_272B
001849r 2  4A           	LSR				; shift b1 - b0 ..
00184Ar 2  6A           	ROR				; ..
00184Br 2  6A           	ROR				; .. to b7 - b6
00184Cr 2  85 B9        	STA	FAC1_r		; save FAC1 rounding byte
00184Er 2  28           	PLP				; dump FAC2-FAC1 compare status
00184Fr 2  4C rr rr     	JMP	LAB_273C		; copy temp to FAC1, normalise and return
001852r 2               
001852r 2               ; do "Divide by zero" error
001852r 2               
001852r 2               LAB_2737
001852r 2  A2 14        	LDX	#$14			; error code $14 ("Divide by zero" error)
001854r 2  4C rr rr     	JMP	LAB_XERR		; do error #X, then warm start
001857r 2               
001857r 2               ; copy temp to FAC1 and normalise
001857r 2               
001857r 2               LAB_273C
001857r 2  A5 75        	LDA	FACt_1		; get temp mantissa1
001859r 2  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
00185Br 2  A5 76        	LDA	FACt_2		; get temp mantissa2
00185Dr 2  85 AE        	STA	FAC1_2		; save FAC1 mantissa2
00185Fr 2  A5 77        	LDA	FACt_3		; get temp mantissa3
001861r 2  85 AF        	STA	FAC1_3		; save FAC1 mantissa3
001863r 2  4C rr rr     	JMP	LAB_24D5		; normalise FAC1 and return
001866r 2               
001866r 2               ; unpack memory (AY) into FAC1
001866r 2               
001866r 2               LAB_UFAC
001866r 2  85 71        	STA	ut1_pl		; save pointer low byte
001868r 2  84 72        	STY	ut1_ph		; save pointer high byte
00186Ar 2  A0 03        	LDY	#$03			; 4 bytes to do
00186Cr 2  B1 71        	LDA	(ut1_pl),Y		; get last byte
00186Er 2  85 AF        	STA	FAC1_3		; save FAC1 mantissa3
001870r 2  88           	DEY				; decrement index
001871r 2  B1 71        	LDA	(ut1_pl),Y		; get last-1 byte
001873r 2  85 AE        	STA	FAC1_2		; save FAC1 mantissa2
001875r 2  88           	DEY				; decrement index
001876r 2  B1 71        	LDA	(ut1_pl),Y		; get second byte
001878r 2  85 B0        	STA	FAC1_s		; save FAC1 sign (b7)
00187Ar 2  09 80        	ORA	#$80			; set 1xxx xxxx (add normal bit)
00187Cr 2  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
00187Er 2  88           	DEY				; decrement index
00187Fr 2  B1 71        	LDA	(ut1_pl),Y		; get first byte (exponent)
001881r 2  85 AC        	STA	FAC1_e		; save FAC1 exponent
001883r 2  84 B9        	STY	FAC1_r		; clear FAC1 rounding byte
001885r 2  60           	RTS
001886r 2               
001886r 2               ; pack FAC1 into Adatal
001886r 2               
001886r 2               LAB_276E
001886r 2  A2 A4        	LDX	#<Adatal		; set pointer low byte
001888r 2               LAB_2770
001888r 2  A0 00        	LDY	#>Adatal		; set pointer high byte
00188Ar 2  F0 04        	BEQ	LAB_2778		; pack FAC1 into (XY) and return
00188Cr 2               
00188Cr 2               ; pack FAC1 into (Lvarpl)
00188Cr 2               
00188Cr 2               LAB_PFAC
00188Cr 2  A6 97        	LDX	Lvarpl		; get destination pointer low byte
00188Er 2  A4 98        	LDY	Lvarph		; get destination pointer high byte
001890r 2               
001890r 2               ; pack FAC1 into (XY)
001890r 2               
001890r 2               LAB_2778
001890r 2  20 rr rr     	JSR	LAB_27BA		; round FAC1
001893r 2  86 71        	STX	ut1_pl		; save pointer low byte
001895r 2  84 72        	STY	ut1_ph		; save pointer high byte
001897r 2  A0 03        	LDY	#$03			; set index
001899r 2  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
00189Br 2  91 71        	STA	(ut1_pl),Y		; store in destination
00189Dr 2  88           	DEY				; decrement index
00189Er 2  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
0018A0r 2  91 71        	STA	(ut1_pl),Y		; store in destination
0018A2r 2  88           	DEY				; decrement index
0018A3r 2  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
0018A5r 2  09 7F        	ORA	#$7F			; set bits x111 1111
0018A7r 2  25 AD        	AND	FAC1_1		; AND in FAC1 mantissa1
0018A9r 2  91 71        	STA	(ut1_pl),Y		; store in destination
0018ABr 2  88           	DEY				; decrement index
0018ACr 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
0018AEr 2  91 71        	STA	(ut1_pl),Y		; store in destination
0018B0r 2  84 B9        	STY	FAC1_r		; clear FAC1 rounding byte
0018B2r 2  60           	RTS
0018B3r 2               
0018B3r 2               ; round and copy FAC1 to FAC2
0018B3r 2               
0018B3r 2               LAB_27AB
0018B3r 2  20 rr rr     	JSR	LAB_27BA		; round FAC1
0018B6r 2               
0018B6r 2               ; copy FAC1 to FAC2
0018B6r 2               
0018B6r 2               LAB_27AE
0018B6r 2  A2 05        	LDX	#$05			; 5 bytes to copy
0018B8r 2               LAB_27B0
0018B8r 2  B5 AB        	LDA	FAC1_e-1,X		; get byte from FAC1,X
0018BAr 2  95 B2        	STA	FAC1_o,X		; save byte at FAC2,X
0018BCr 2  CA           	DEX				; decrement count
0018BDr 2  D0 F9        	BNE	LAB_27B0		; loop if not all done
0018BFr 2               
0018BFr 2  86 B9        	STX	FAC1_r		; clear FAC1 rounding byte
0018C1r 2               LAB_27B9
0018C1r 2  60           	RTS
0018C2r 2               
0018C2r 2               ; round FAC1
0018C2r 2               
0018C2r 2               LAB_27BA
0018C2r 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
0018C4r 2  F0 FB        	BEQ	LAB_27B9		; exit if zero
0018C6r 2               
0018C6r 2  06 B9        	ASL	FAC1_r		; shift FAC1 rounding byte
0018C8r 2  90 F7        	BCC	LAB_27B9		; exit if no overflow
0018CAr 2               
0018CAr 2               ; round FAC1 (no check)
0018CAr 2               
0018CAr 2               LAB_27C2
0018CAr 2  20 rr rr     	JSR	LAB_2559		; increment FAC1 mantissa
0018CDr 2  D0 F2        	BNE	LAB_27B9		; branch if no overflow
0018CFr 2               
0018CFr 2  4C rr rr     	JMP	LAB_252A		; normalise FAC1 for C=1 and return
0018D2r 2               
0018D2r 2               ; get FAC1 sign
0018D2r 2               ; return A=FF,C=1/-ve A=01,C=0/+ve
0018D2r 2               
0018D2r 2               LAB_27CA
0018D2r 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
0018D4r 2  F0 09        	BEQ	LAB_27D7		; exit if zero (already correct SGN(0)=0)
0018D6r 2               
0018D6r 2               ; return A=FF,C=1/-ve A=01,C=0/+ve
0018D6r 2               ; no = 0 check
0018D6r 2               
0018D6r 2               LAB_27CE
0018D6r 2  A5 B0        	LDA	FAC1_s		; else get FAC1 sign (b7)
0018D8r 2               
0018D8r 2               ; return A=FF,C=1/-ve A=01,C=0/+ve
0018D8r 2               ; no = 0 check, sign in A
0018D8r 2               
0018D8r 2               LAB_27D0
0018D8r 2  2A           	ROL				; move sign bit to carry
0018D9r 2  A9 FF        	LDA	#$FF			; set byte for -ve result
0018DBr 2  B0 02        	BCS	LAB_27D7		; return if sign was set (-ve)
0018DDr 2               
0018DDr 2  A9 01        	LDA	#$01			; else set byte for +ve result
0018DFr 2               LAB_27D7
0018DFr 2  60           	RTS
0018E0r 2               
0018E0r 2               ; perform SGN()
0018E0r 2               
0018E0r 2               LAB_SGN
0018E0r 2  20 rr rr     	JSR	LAB_27CA		; get FAC1 sign
0018E3r 2               					; return A=$FF/-ve A=$01/+ve
0018E3r 2               ; save A as integer byte
0018E3r 2               
0018E3r 2               LAB_27DB
0018E3r 2  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
0018E5r 2  A9 00        	LDA	#$00			; clear A
0018E7r 2  85 AE        	STA	FAC1_2		; clear FAC1 mantissa2
0018E9r 2  A2 88        	LDX	#$88			; set exponent
0018EBr 2               
0018EBr 2               ; set exp=X, clearFAC1 mantissa3 and normalise
0018EBr 2               
0018EBr 2               LAB_27E3
0018EBr 2  A5 AD        	LDA	FAC1_1		; get FAC1 mantissa1
0018EDr 2  49 FF        	EOR	#$FF			; complement it
0018EFr 2  2A           	ROL				; sign bit into carry
0018F0r 2               
0018F0r 2               ; set exp=X, clearFAC1 mantissa3 and normalise
0018F0r 2               
0018F0r 2               LAB_STFA
0018F0r 2  A9 00        	LDA	#$00			; clear A
0018F2r 2  85 AF        	STA	FAC1_3		; clear FAC1 mantissa3
0018F4r 2  86 AC        	STX	FAC1_e		; set FAC1 exponent
0018F6r 2  85 B9        	STA	FAC1_r		; clear FAC1 rounding byte
0018F8r 2  85 B0        	STA	FAC1_s		; clear FAC1 sign (b7)
0018FAr 2  4C rr rr     	JMP	LAB_24D0		; do ABS and normalise FAC1
0018FDr 2               
0018FDr 2               ; perform ABS()
0018FDr 2               
0018FDr 2               LAB_ABS
0018FDr 2  46 B0        	LSR	FAC1_s		; clear FAC1 sign (put zero in b7)
0018FFr 2  60           	RTS
001900r 2               
001900r 2               ; compare FAC1 with (AY)
001900r 2               ; returns A=$00 if FAC1 = (AY)
001900r 2               ; returns A=$01 if FAC1 > (AY)
001900r 2               ; returns A=$FF if FAC1 < (AY)
001900r 2               
001900r 2               LAB_27F8
001900r 2  85 73        	STA	ut2_pl		; save pointer low byte
001902r 2               LAB_27FA
001902r 2  84 74        	STY	ut2_ph		; save pointer high byte
001904r 2  A0 00        	LDY	#$00			; clear index
001906r 2  B1 73        	LDA	(ut2_pl),Y		; get exponent
001908r 2  C8           	INY				; increment index
001909r 2  AA           	TAX				; copy (AY) exponent to X
00190Ar 2  F0 C6        	BEQ	LAB_27CA		; branch if (AY) exponent=0 and get FAC1 sign
00190Cr 2               					; A=FF,C=1/-ve A=01,C=0/+ve
00190Cr 2               
00190Cr 2  B1 73        	LDA	(ut2_pl),Y		; get (AY) mantissa1 (with sign)
00190Er 2  45 B0        	EOR	FAC1_s		; EOR FAC1 sign (b7)
001910r 2  30 C4        	BMI	LAB_27CE		; if signs <> do return A=FF,C=1/-ve
001912r 2               					; A=01,C=0/+ve and return
001912r 2               
001912r 2  E4 AC        	CPX	FAC1_e		; compare (AY) exponent with FAC1 exponent
001914r 2  D0 1A        	BNE	LAB_2828		; branch if different
001916r 2               
001916r 2  B1 73        	LDA	(ut2_pl),Y		; get (AY) mantissa1 (with sign)
001918r 2  09 80        	ORA	#$80			; normalise top bit
00191Ar 2  C5 AD        	CMP	FAC1_1		; compare with FAC1 mantissa1
00191Cr 2  D0 12        	BNE	LAB_2828		; branch if different
00191Er 2               
00191Er 2  C8           	INY				; increment index
00191Fr 2  B1 73        	LDA	(ut2_pl),Y		; get mantissa2
001921r 2  C5 AE        	CMP	FAC1_2		; compare with FAC1 mantissa2
001923r 2  D0 0B        	BNE	LAB_2828		; branch if different
001925r 2               
001925r 2  C8           	INY				; increment index
001926r 2  A9 7F        	LDA	#$7F			; set for 1/2 value rounding byte
001928r 2  C5 B9        	CMP	FAC1_r		; compare with FAC1 rounding byte (set carry)
00192Ar 2  B1 73        	LDA	(ut2_pl),Y		; get mantissa3
00192Cr 2  E5 AF        	SBC	FAC1_3		; subtract FAC1 mantissa3
00192Er 2  F0 28        	BEQ	LAB_2850		; exit if mantissa3 equal
001930r 2               
001930r 2               ; gets here if number <> FAC1
001930r 2               
001930r 2               LAB_2828
001930r 2  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
001932r 2  90 02        	BCC	LAB_282E		; branch if FAC1 > (AY)
001934r 2               
001934r 2  49 FF        	EOR	#$FF			; else toggle FAC1 sign
001936r 2               LAB_282E
001936r 2  4C rr rr     	JMP	LAB_27D0		; return A=FF,C=1/-ve A=01,C=0/+ve
001939r 2               
001939r 2               ; convert FAC1 floating-to-fixed
001939r 2               
001939r 2               LAB_2831
001939r 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
00193Br 2  F0 4A        	BEQ	LAB_287F		; if zero go clear FAC1 and return
00193Dr 2               
00193Dr 2  38           	SEC				; set carry for subtract
00193Er 2  E9 98        	SBC	#$98			; subtract maximum integer range exponent
001940r 2  24 B0        	BIT	FAC1_s		; test FAC1 sign (b7)
001942r 2  10 09        	BPL	LAB_2845		; branch if FAC1 +ve
001944r 2               
001944r 2               					; FAC1 was -ve
001944r 2  AA           	TAX				; copy subtracted exponent
001945r 2  A9 FF        	LDA	#$FF			; overflow for -ve number
001947r 2  85 B2        	STA	FAC1_o		; set FAC1 overflow byte
001949r 2  20 rr rr     	JSR	LAB_253D		; twos complement FAC1 mantissa
00194Cr 2  8A           	TXA				; restore subtracted exponent
00194Dr 2               LAB_2845
00194Dr 2  A2 AC        	LDX	#FAC1_e		; set index to FAC1
00194Fr 2  C9 F9        	CMP	#$F9			; compare exponent result
001951r 2  10 06        	BPL	LAB_2851		; if < 8 shifts shift FAC1 A times right and return
001953r 2               
001953r 2  20 rr rr     	JSR	LAB_257B		; shift FAC1 A times right (> 8 shifts)
001956r 2  84 B2        	STY	FAC1_o		; clear FAC1 overflow byte
001958r 2               LAB_2850
001958r 2  60           	RTS
001959r 2               
001959r 2               ; shift FAC1 A times right
001959r 2               
001959r 2               LAB_2851
001959r 2  A8           	TAY				; copy shift count
00195Ar 2  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
00195Cr 2  29 80        	AND	#$80			; mask sign bit only (x000 0000)
00195Er 2  46 AD        	LSR	FAC1_1		; shift FAC1 mantissa1
001960r 2  05 AD        	ORA	FAC1_1		; OR sign in b7 FAC1 mantissa1
001962r 2  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
001964r 2  20 rr rr     	JSR	LAB_2592		; shift FAC1 Y times right
001967r 2  84 B2        	STY	FAC1_o		; clear FAC1 overflow byte
001969r 2  60           	RTS
00196Ar 2               
00196Ar 2               ; perform INT()
00196Ar 2               
00196Ar 2               LAB_INT
00196Ar 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
00196Cr 2  C9 98        	CMP	#$98			; compare with max int
00196Er 2  B0 1E        	BCS	LAB_2886		; exit if >= (already int, too big for fractional part!)
001970r 2               
001970r 2  20 rr rr     	JSR	LAB_2831		; convert FAC1 floating-to-fixed
001973r 2  84 B9        	STY	FAC1_r		; save FAC1 rounding byte
001975r 2  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
001977r 2  84 B0        	STY	FAC1_s		; save FAC1 sign (b7)
001979r 2  49 80        	EOR	#$80			; toggle FAC1 sign
00197Br 2  2A           	ROL				; shift into carry
00197Cr 2  A9 98        	LDA	#$98			; set new exponent
00197Er 2  85 AC        	STA	FAC1_e		; save FAC1 exponent
001980r 2  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
001982r 2  85 5B        	STA	Temp3			; save for EXP() function
001984r 2  4C rr rr     	JMP	LAB_24D0		; do ABS and normalise FAC1
001987r 2               
001987r 2               ; clear FAC1 and return
001987r 2               
001987r 2               LAB_287F
001987r 2  85 AD        	STA	FAC1_1		; clear FAC1 mantissa1
001989r 2  85 AE        	STA	FAC1_2		; clear FAC1 mantissa2
00198Br 2  85 AF        	STA	FAC1_3		; clear FAC1 mantissa3
00198Dr 2  A8           	TAY				; clear Y
00198Er 2               LAB_2886
00198Er 2  60           	RTS
00198Fr 2               
00198Fr 2               ; get FAC1 from string
00198Fr 2               ; this routine now handles hex and binary values from strings
00198Fr 2               ; starting with "$" and "%" respectively
00198Fr 2               
00198Fr 2               LAB_2887
00198Fr 2  A0 00        	LDY	#$00			; clear Y
001991r 2  84 5F        	STY	Dtypef		; clear data type flag, $FF=string, $00=numeric
001993r 2  A2 09        	LDX	#$09			; set index
001995r 2               LAB_288B
001995r 2  94 A8        	STY	numexp,X		; clear byte
001997r 2  CA           	DEX				; decrement index
001998r 2  10 FB        	BPL	LAB_288B		; loop until numexp to negnum (and FAC1) = $00
00199Ar 2               
00199Ar 2  90 7F        	BCC	LAB_28FE		; branch if 1st character numeric
00199Cr 2               
00199Cr 2               ; get FAC1 from string .. first character wasn't numeric
00199Cr 2               
00199Cr 2  C9 2D        	CMP	#'-'			; else compare with "-"
00199Er 2  D0 04        	BNE	LAB_289A		; branch if not "-"
0019A0r 2               
0019A0r 2  86 B1        	STX	negnum		; set flag for -ve number (X = $FF)
0019A2r 2  F0 04        	BEQ	LAB_289C		; branch always (go scan and check for hex/bin)
0019A4r 2               
0019A4r 2               ; get FAC1 from string .. first character wasn't numeric or -
0019A4r 2               
0019A4r 2               LAB_289A
0019A4r 2  C9 2B        	CMP	#'+'			; else compare with "+"
0019A6r 2  D0 05        	BNE	LAB_289D		; branch if not "+" (go check for hex/bin)
0019A8r 2               
0019A8r 2               ; was "+" or "-" to start, so get next character
0019A8r 2               
0019A8r 2               LAB_289C
0019A8r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
0019ABr 2  90 6E        	BCC	LAB_28FE		; branch if numeric character
0019ADr 2               
0019ADr 2               ; code here for hex and binary numbers
0019ADr 2               
0019ADr 2               LAB_289D
0019ADr 2  C9 24        	CMP	#'$'			; else compare with "$"
0019AFr 2  D0 03        	BNE	LAB_NHEX		; branch if not "$"
0019B1r 2               
0019B1r 2  4C rr rr     	JMP	LAB_CHEX		; branch if "$"
0019B4r 2               
0019B4r 2               LAB_NHEX
0019B4r 2  C9 25        	CMP	#'%'			; else compare with "%"
0019B6r 2  D0 08        	BNE	LAB_28A3		; branch if not "%" (continue original code)
0019B8r 2               
0019B8r 2  4C rr rr     	JMP	LAB_CBIN		; branch if "%"
0019BBr 2               
0019BBr 2               LAB_289E
0019BBr 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory (ignore + or get next number)
0019BEr 2               LAB_28A1
0019BEr 2  90 5B        	BCC	LAB_28FE		; branch if numeric character
0019C0r 2               
0019C0r 2               ; get FAC1 from string .. character wasn't numeric, -, +, hex or binary
0019C0r 2               
0019C0r 2               LAB_28A3
0019C0r 2  C9 2E        	CMP	#'.'			; else compare with "."
0019C2r 2  F0 2E        	BEQ	LAB_28D5		; branch if "."
0019C4r 2               
0019C4r 2               ; get FAC1 from string .. character wasn't numeric, -, + or .
0019C4r 2               
0019C4r 2  C9 45        	CMP	#'E'			; else compare with "E"
0019C6r 2  D0 30        	BNE	LAB_28DB		; branch if not "E"
0019C8r 2               
0019C8r 2               					; was "E" so evaluate exponential part
0019C8r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
0019CBr 2  90 17        	BCC	LAB_28C7		; branch if numeric character
0019CDr 2               
0019CDr 2  C9 B7        	CMP	#TK_MINUS		; else compare with token for -
0019CFr 2  F0 0E        	BEQ	LAB_28C2		; branch if token for -
0019D1r 2               
0019D1r 2  C9 2D        	CMP	#'-'			; else compare with "-"
0019D3r 2  F0 0A        	BEQ	LAB_28C2		; branch if "-"
0019D5r 2               
0019D5r 2  C9 B6        	CMP	#TK_PLUS		; else compare with token for +
0019D7r 2  F0 08        	BEQ	LAB_28C4		; branch if token for +
0019D9r 2               
0019D9r 2  C9 2B        	CMP	#'+'			; else compare with "+"
0019DBr 2  F0 04        	BEQ	LAB_28C4		; branch if "+"
0019DDr 2               
0019DDr 2  D0 07        	BNE	LAB_28C9		; branch always
0019DFr 2               
0019DFr 2               LAB_28C2
0019DFr 2  66 AB        	ROR	expneg		; set exponent -ve flag (C, which=1, into b7)
0019E1r 2               LAB_28C4
0019E1r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
0019E4r 2               LAB_28C7
0019E4r 2  90 5B        	BCC	LAB_2925		; branch if numeric character
0019E6r 2               
0019E6r 2               LAB_28C9
0019E6r 2  24 AB        	BIT	expneg		; test exponent -ve flag
0019E8r 2  10 0E        	BPL	LAB_28DB		; if +ve go evaluate exponent
0019EAr 2               
0019EAr 2               					; else do exponent = -exponent
0019EAr 2  A9 00        	LDA	#$00			; clear result
0019ECr 2  38           	SEC				; set carry for subtract
0019EDr 2  E5 A9        	SBC	expcnt		; subtract exponent byte
0019EFr 2  4C rr rr     	JMP	LAB_28DD		; go evaluate exponent
0019F2r 2               
0019F2r 2               LAB_28D5
0019F2r 2  66 AA        	ROR	numdpf		; set decimal point flag
0019F4r 2  24 AA        	BIT	numdpf		; test decimal point flag
0019F6r 2  50 C3        	BVC	LAB_289E		; branch if only one decimal point so far
0019F8r 2               
0019F8r 2               					; evaluate exponent
0019F8r 2               LAB_28DB
0019F8r 2  A5 A9        	LDA	expcnt		; get exponent count byte
0019FAr 2               LAB_28DD
0019FAr 2  38           	SEC				; set carry for subtract
0019FBr 2  E5 A8        	SBC	numexp		; subtract numerator exponent
0019FDr 2  85 A9        	STA	expcnt		; save exponent count byte
0019FFr 2  F0 12        	BEQ	LAB_28F6		; branch if no adjustment
001A01r 2               
001A01r 2  10 09        	BPL	LAB_28EF		; else if +ve go do FAC1*10^expcnt
001A03r 2               
001A03r 2               					; else go do FAC1/10^(0-expcnt)
001A03r 2               LAB_28E6
001A03r 2  20 rr rr     	JSR	LAB_26B9		; divide by 10
001A06r 2  E6 A9        	INC	expcnt		; increment exponent count byte
001A08r 2  D0 F9        	BNE	LAB_28E6		; loop until all done
001A0Ar 2               
001A0Ar 2  F0 07        	BEQ	LAB_28F6		; branch always
001A0Cr 2               
001A0Cr 2               LAB_28EF
001A0Cr 2  20 rr rr     	JSR	LAB_269E		; multiply by 10
001A0Fr 2  C6 A9        	DEC	expcnt		; decrement exponent count byte
001A11r 2  D0 F9        	BNE	LAB_28EF		; loop until all done
001A13r 2               
001A13r 2               LAB_28F6
001A13r 2  A5 B1        	LDA	negnum		; get -ve flag
001A15r 2  30 01        	BMI	LAB_28FB		; if -ve do - FAC1 and return
001A17r 2               
001A17r 2  60           	RTS
001A18r 2               
001A18r 2               ; do - FAC1 and return
001A18r 2               
001A18r 2               LAB_28FB
001A18r 2  4C rr rr     	JMP	LAB_GTHAN		; do - FAC1 and return
001A1Br 2               
001A1Br 2               ; do unsigned FAC1*10+number
001A1Br 2               
001A1Br 2               LAB_28FE
001A1Br 2  48           	PHA				; save character
001A1Cr 2  24 AA        	BIT	numdpf		; test decimal point flag
001A1Er 2  10 02        	BPL	LAB_2905		; skip exponent increment if not set
001A20r 2               
001A20r 2  E6 A8        	INC	numexp		; else increment number exponent
001A22r 2               LAB_2905
001A22r 2  20 rr rr     	JSR	LAB_269E		; multiply FAC1 by 10
001A25r 2  68           	PLA				; restore character
001A26r 2  29 0F        	AND	#$0F			; convert to binary
001A28r 2  20 rr rr     	JSR	LAB_2912		; evaluate new ASCII digit
001A2Br 2  4C rr rr     	JMP	LAB_289E		; go do next character
001A2Er 2               
001A2Er 2               ; evaluate new ASCII digit
001A2Er 2               
001A2Er 2               LAB_2912
001A2Er 2  48           	PHA				; save digit
001A2Fr 2  20 rr rr     	JSR	LAB_27AB		; round and copy FAC1 to FAC2
001A32r 2  68           	PLA				; restore digit
001A33r 2  20 rr rr     	JSR	LAB_27DB		; save A as integer byte
001A36r 2  A5 B7        	LDA	FAC2_s		; get FAC2 sign (b7)
001A38r 2  45 B0        	EOR	FAC1_s		; toggle with FAC1 sign (b7)
001A3Ar 2  85 B8        	STA	FAC_sc		; save sign compare (FAC1 EOR FAC2)
001A3Cr 2  A6 AC        	LDX	FAC1_e		; get FAC1 exponent
001A3Er 2  4C rr rr     	JMP	LAB_ADD		; add FAC2 to FAC1 and return
001A41r 2               
001A41r 2               ; evaluate next character of exponential part of number
001A41r 2               
001A41r 2               LAB_2925
001A41r 2  A5 A9        	LDA	expcnt		; get exponent count byte
001A43r 2  C9 0A        	CMP	#$0A			; compare with 10 decimal
001A45r 2  90 09        	BCC	LAB_2934		; branch if less
001A47r 2               
001A47r 2  A9 64        	LDA	#$64			; make all -ve exponents = -100 decimal (causes underflow)
001A49r 2  24 AB        	BIT	expneg		; test exponent -ve flag
001A4Br 2  30 0E        	BMI	LAB_2942		; branch if -ve
001A4Dr 2               
001A4Dr 2  4C rr rr     	JMP	LAB_2564		; else do overflow error
001A50r 2               
001A50r 2               LAB_2934
001A50r 2  0A           	ASL				; * 2
001A51r 2  0A           	ASL				; * 4
001A52r 2  65 A9        	ADC	expcnt		; * 5
001A54r 2  0A           	ASL				; * 10
001A55r 2  A0 00        	LDY	#$00			; set index
001A57r 2  71 C3        	ADC	(Bpntrl),Y		; add character (will be $30 too much!)
001A59r 2  E9 2F        	SBC	#'0'-1		; convert character to binary
001A5Br 2               LAB_2942
001A5Br 2  85 A9        	STA	expcnt		; save exponent count byte
001A5Dr 2  4C rr rr     	JMP	LAB_28C4		; go get next character
001A60r 2               
001A60r 2               ; print " in line [LINE #]"
001A60r 2               
001A60r 2               LAB_2953
001A60r 2  A9 rr        	LDA	#<LAB_LMSG		; point to " in line " message low byte
001A62r 2  A0 rr        	LDY	#>LAB_LMSG		; point to " in line " message high byte
001A64r 2  20 rr rr     	JSR	LAB_18C3		; print null terminated string from memory
001A67r 2               
001A67r 2               					; print Basic line #
001A67r 2  A5 88        	LDA	Clineh		; get current line high byte
001A69r 2  A6 87        	LDX	Clinel		; get current line low byte
001A6Br 2  20 rr rr     	JSR LAB_295E
001A6Er 2  A9 0D        	LDA #$0D
001A70r 2  20 rr rr     	JSR V_OUTP
001A73r 2  A9 0A        	LDA #$0A
001A75r 2  20 rr rr     	JSR V_OUTP
001A78r 2  60           	RTS
001A79r 2               
001A79r 2               ; print XA as unsigned integer
001A79r 2               
001A79r 2               LAB_295E
001A79r 2  85 AD        	STA	FAC1_1		; save low byte as FAC1 mantissa1
001A7Br 2  86 AE        	STX	FAC1_2		; save high byte as FAC1 mantissa2
001A7Dr 2  A2 90        	LDX	#$90			; set exponent to 16d bits
001A7Fr 2  38           	SEC				; set integer is +ve flag
001A80r 2  20 rr rr     	JSR	LAB_STFA		; set exp=X, clearFAC1 mantissa3 and normalise
001A83r 2  A0 00        	LDY	#$00			; clear index
001A85r 2  98           	TYA				; clear A
001A86r 2  20 rr rr     	JSR	LAB_297B		; convert FAC1 to string, skip sign character save
001A89r 2  4C rr rr     	JMP	LAB_18C3		; print null terminated string from memory and return
001A8Cr 2               
001A8Cr 2               ; convert FAC1 to ASCII string result in (AY)
001A8Cr 2               ; not any more, moved scratchpad to page 0
001A8Cr 2               
001A8Cr 2               LAB_296E
001A8Cr 2  A0 01        	LDY	#$01			; set index = 1
001A8Er 2  A9 20        	LDA	#$20			; character = " " (assume +ve)
001A90r 2  24 B0        	BIT	FAC1_s		; test FAC1 sign (b7)
001A92r 2  10 02        	BPL	LAB_2978		; branch if +ve
001A94r 2               
001A94r 2  A9 2D        	LDA	#$2D			; else character = "-"
001A96r 2               LAB_2978
001A96r 2  99 EF 00     	STA	Decss,Y		; save leading character (" " or "-")
001A99r 2               LAB_297B
001A99r 2  85 B0        	STA	FAC1_s		; clear FAC1 sign (b7)
001A9Br 2  84 BA        	STY	Sendl			; save index
001A9Dr 2  C8           	INY				; increment index
001A9Er 2  A6 AC        	LDX	FAC1_e		; get FAC1 exponent
001AA0r 2  D0 05        	BNE	LAB_2989		; branch if FAC1<>0
001AA2r 2               
001AA2r 2               					; exponent was $00 so FAC1 is 0
001AA2r 2  A9 30        	LDA	#'0'			; set character = "0"
001AA4r 2  4C rr rr     	JMP	LAB_2A89		; save last character, [EOT] and exit
001AA7r 2               
001AA7r 2               					; FAC1 is some non zero value
001AA7r 2               LAB_2989
001AA7r 2  A9 00        	LDA	#$00			; clear (number exponent count)
001AA9r 2  E0 81        	CPX	#$81			; compare FAC1 exponent with $81 (>1.00000)
001AABr 2               
001AABr 2  B0 09        	BCS	LAB_299A		; branch if FAC1=>1
001AADr 2               
001AADr 2               					; FAC1<1
001AADr 2  A9 rr        	LDA	#<LAB_294F		; set pointer low byte to 1,000,000
001AAFr 2  A0 rr        	LDY	#>LAB_294F		; set pointer high byte to 1,000,000
001AB1r 2  20 rr rr     	JSR	LAB_25FB		; do convert AY, FCA1*(AY)
001AB4r 2  A9 FA        	LDA	#$FA			; set number exponent count (-6)
001AB6r 2               LAB_299A
001AB6r 2  85 A8        	STA	numexp		; save number exponent count
001AB8r 2               LAB_299C
001AB8r 2  A9 rr        	LDA	#<LAB_294B		; set pointer low byte to 999999.4375 (max before sci note)
001ABAr 2  A0 rr        	LDY	#>LAB_294B		; set pointer high byte to 999999.4375
001ABCr 2  20 rr rr     	JSR	LAB_27F8		; compare FAC1 with (AY)
001ABFr 2  F0 1E        	BEQ	LAB_29C3		; exit if FAC1 = (AY)
001AC1r 2               
001AC1r 2  10 12        	BPL	LAB_29B9		; go do /10 if FAC1 > (AY)
001AC3r 2               
001AC3r 2               					; FAC1 < (AY)
001AC3r 2               LAB_29A7
001AC3r 2  A9 rr        	LDA	#<LAB_2947		; set pointer low byte to 99999.9375
001AC5r 2  A0 rr        	LDY	#>LAB_2947		; set pointer high byte to 99999.9375
001AC7r 2  20 rr rr     	JSR	LAB_27F8		; compare FAC1 with (AY)
001ACAr 2  F0 02        	BEQ	LAB_29B2		; branch if FAC1 = (AY) (allow decimal places)
001ACCr 2               
001ACCr 2  10 0E        	BPL	LAB_29C0		; branch if FAC1 > (AY) (no decimal places)
001ACEr 2               
001ACEr 2               					; FAC1 <= (AY)
001ACEr 2               LAB_29B2
001ACEr 2  20 rr rr     	JSR	LAB_269E		; multiply by 10
001AD1r 2  C6 A8        	DEC	numexp		; decrement number exponent count
001AD3r 2  D0 EE        	BNE	LAB_29A7		; go test again (branch always)
001AD5r 2               
001AD5r 2               LAB_29B9
001AD5r 2  20 rr rr     	JSR	LAB_26B9		; divide by 10
001AD8r 2  E6 A8        	INC	numexp		; increment number exponent count
001ADAr 2  D0 DC        	BNE	LAB_299C		; go test again (branch always)
001ADCr 2               
001ADCr 2               ; now we have just the digits to do
001ADCr 2               
001ADCr 2               LAB_29C0
001ADCr 2  20 rr rr     	JSR	LAB_244E		; add 0.5 to FAC1 (round FAC1)
001ADFr 2               LAB_29C3
001ADFr 2  20 rr rr     	JSR	LAB_2831		; convert FAC1 floating-to-fixed
001AE2r 2  A2 01        	LDX	#$01			; set default digits before dp = 1
001AE4r 2  A5 A8        	LDA	numexp		; get number exponent count
001AE6r 2  18           	CLC				; clear carry for add
001AE7r 2  69 07        	ADC	#$07			; up to 6 digits before point
001AE9r 2  30 09        	BMI	LAB_29D8		; if -ve then 1 digit before dp
001AEBr 2               
001AEBr 2  C9 08        	CMP	#$08			; A>=8 if n>=1E6
001AEDr 2  B0 06        	BCS	LAB_29D9		; branch if >= $08
001AEFr 2               
001AEFr 2               					; carry is clear
001AEFr 2  69 FF        	ADC	#$FF			; take 1 from digit count
001AF1r 2  AA           	TAX				; copy to A
001AF2r 2  A9 02        	LDA	#$02			;.set exponent adjust
001AF4r 2               LAB_29D8
001AF4r 2  38           	SEC				; set carry for subtract
001AF5r 2               LAB_29D9
001AF5r 2  E9 02        	SBC	#$02			; -2
001AF7r 2  85 A9        	STA	expcnt		;.save exponent adjust
001AF9r 2  86 A8        	STX	numexp		; save digits before dp count
001AFBr 2  8A           	TXA				; copy to A
001AFCr 2  F0 02        	BEQ	LAB_29E4		; branch if no digits before dp
001AFEr 2               
001AFEr 2  10 13        	BPL	LAB_29F7		; branch if digits before dp
001B00r 2               
001B00r 2               LAB_29E4
001B00r 2  A4 BA        	LDY	Sendl			; get output string index
001B02r 2  A9 2E        	LDA	#$2E			; character "."
001B04r 2  C8           	INY				; increment index
001B05r 2  99 EF 00     	STA	Decss,Y		; save to output string
001B08r 2  8A           	TXA				;.
001B09r 2  F0 06        	BEQ	LAB_29F5		;.
001B0Br 2               
001B0Br 2  A9 30        	LDA	#'0'			; character "0"
001B0Dr 2  C8           	INY				; increment index
001B0Er 2  99 EF 00     	STA	Decss,Y		; save to output string
001B11r 2               LAB_29F5
001B11r 2  84 BA        	STY	Sendl			; save output string index
001B13r 2               LAB_29F7
001B13r 2  A0 00        	LDY	#$00			; clear index (point to 100,000)
001B15r 2  A2 80        	LDX	#$80			;
001B17r 2               LAB_29FB
001B17r 2  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
001B19r 2  18           	CLC				; clear carry for add
001B1Ar 2  79 rr rr     	ADC	LAB_2A9C,Y		; add -ve LSB
001B1Dr 2  85 AF        	STA	FAC1_3		; save FAC1 mantissa3
001B1Fr 2  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
001B21r 2  79 rr rr     	ADC	LAB_2A9B,Y		; add -ve NMSB
001B24r 2  85 AE        	STA	FAC1_2		; save FAC1 mantissa2
001B26r 2  A5 AD        	LDA	FAC1_1		; get FAC1 mantissa1
001B28r 2  79 rr rr     	ADC	LAB_2A9A,Y		; add -ve MSB
001B2Br 2  85 AD        	STA	FAC1_1		; save FAC1 mantissa1
001B2Dr 2  E8           	INX				;
001B2Er 2  B0 04        	BCS	LAB_2A18		;
001B30r 2               
001B30r 2  10 E5        	BPL	LAB_29FB		; not -ve so try again
001B32r 2               
001B32r 2  30 02        	BMI	LAB_2A1A		;
001B34r 2               
001B34r 2               LAB_2A18
001B34r 2  30 E1        	BMI	LAB_29FB		;
001B36r 2               
001B36r 2               LAB_2A1A
001B36r 2  8A           	TXA				;
001B37r 2  90 04        	BCC	LAB_2A21		;
001B39r 2               
001B39r 2  49 FF        	EOR	#$FF			;
001B3Br 2  69 0A        	ADC	#$0A			;
001B3Dr 2               LAB_2A21
001B3Dr 2  69 2F        	ADC	#'0'-1		; add "0"-1 to result
001B3Fr 2  C8           	INY				; increment index ..
001B40r 2  C8           	INY				; .. to next less ..
001B41r 2  C8           	INY				; .. power of ten
001B42r 2  84 95        	STY	Cvaral		; save as current var address low byte
001B44r 2  A4 BA        	LDY	Sendl			; get output string index
001B46r 2  C8           	INY				; increment output string index
001B47r 2  AA           	TAX				; copy character to X
001B48r 2  29 7F        	AND	#$7F			; mask out top bit
001B4Ar 2  99 EF 00     	STA	Decss,Y		; save to output string
001B4Dr 2  C6 A8        	DEC	numexp		; decrement # of characters before the dp
001B4Fr 2  D0 06        	BNE	LAB_2A3B		; branch if still characters to do
001B51r 2               
001B51r 2               					; else output the point
001B51r 2  A9 2E        	LDA	#$2E			; character "."
001B53r 2  C8           	INY				; increment output string index
001B54r 2  99 EF 00     	STA	Decss,Y		; save to output string
001B57r 2               LAB_2A3B
001B57r 2  84 BA        	STY	Sendl			; save output string index
001B59r 2  A4 95        	LDY	Cvaral		; get current var address low byte
001B5Br 2  8A           	TXA				; get character back
001B5Cr 2  49 FF        	EOR	#$FF			;
001B5Er 2  29 80        	AND	#$80			;
001B60r 2  AA           	TAX				;
001B61r 2  C0 12        	CPY	#$12			; compare index with max
001B63r 2  D0 B2        	BNE	LAB_29FB		; loop if not max
001B65r 2               
001B65r 2               					; now remove trailing zeroes
001B65r 2  A4 BA        	LDY	Sendl			; get output string index
001B67r 2               LAB_2A4B
001B67r 2  B9 EF 00     	LDA	Decss,Y		; get character from output string
001B6Ar 2  88           	DEY				; decrement output string index
001B6Br 2  C9 30        	CMP	#'0'			; compare with "0"
001B6Dr 2  F0 F8        	BEQ	LAB_2A4B		; loop until non "0" character found
001B6Fr 2               
001B6Fr 2  C9 2E        	CMP	#'.'			; compare with "."
001B71r 2  F0 01        	BEQ	LAB_2A58		; branch if was dp
001B73r 2               
001B73r 2               					; restore last character
001B73r 2  C8           	INY				; increment output string index
001B74r 2               LAB_2A58
001B74r 2  A9 2B        	LDA	#$2B			; character "+"
001B76r 2  A6 A9        	LDX	expcnt		; get exponent count
001B78r 2  F0 2E        	BEQ	LAB_2A8C		; if zero go set null terminator and exit
001B7Ar 2               
001B7Ar 2               					; exponent isn't zero so write exponent
001B7Ar 2  10 08        	BPL	LAB_2A68		; branch if exponent count +ve
001B7Cr 2               
001B7Cr 2  A9 00        	LDA	#$00			; clear A
001B7Er 2  38           	SEC				; set carry for subtract
001B7Fr 2  E5 A9        	SBC	expcnt		; subtract exponent count adjust (convert -ve to +ve)
001B81r 2  AA           	TAX				; copy exponent count to X
001B82r 2  A9 2D        	LDA	#'-'			; character "-"
001B84r 2               LAB_2A68
001B84r 2  99 F1 00     	STA	Decss+2,Y		; save to output string
001B87r 2  A9 45        	LDA	#$45			; character "E"
001B89r 2  99 F0 00     	STA	Decss+1,Y		; save exponent sign to output string
001B8Cr 2  8A           	TXA				; get exponent count back
001B8Dr 2  A2 2F        	LDX	#'0'-1		; one less than "0" character
001B8Fr 2  38           	SEC				; set carry for subtract
001B90r 2               LAB_2A74
001B90r 2  E8           	INX				; increment 10's character
001B91r 2  E9 0A        	SBC	#$0A			;.subtract 10 from exponent count
001B93r 2  B0 FB        	BCS	LAB_2A74		; loop while still >= 0
001B95r 2               
001B95r 2  69 3A        	ADC	#':'			; add character ":" ($30+$0A, result is 10 less that value)
001B97r 2  99 F3 00     	STA	Decss+4,Y		; save to output string
001B9Ar 2  8A           	TXA				; copy 10's character
001B9Br 2  99 F2 00     	STA	Decss+3,Y		; save to output string
001B9Er 2  A9 00        	LDA	#$00			; set null terminator
001BA0r 2  99 F4 00     	STA	Decss+5,Y		; save to output string
001BA3r 2  F0 08        	BEQ	LAB_2A91		; go set string pointer (AY) and exit (branch always)
001BA5r 2               
001BA5r 2               					; save last character, [EOT] and exit
001BA5r 2               LAB_2A89
001BA5r 2  99 EF 00     	STA	Decss,Y		; save last character to output string
001BA8r 2               
001BA8r 2               					; set null terminator and exit
001BA8r 2               LAB_2A8C
001BA8r 2  A9 00        	LDA	#$00			; set null terminator
001BAAr 2  99 F0 00     	STA	Decss+1,Y		; save after last character
001BADr 2               
001BADr 2               					; set string pointer (AY) and exit
001BADr 2               LAB_2A91
001BADr 2  A9 F0        	LDA	#<Decssp1		; set result string low pointer
001BAFr 2  A0 00        	LDY	#>Decssp1		; set result string high pointer
001BB1r 2  60           	RTS
001BB2r 2               
001BB2r 2               ; perform power function
001BB2r 2               
001BB2r 2               LAB_POWER
001BB2r 2  F0 42        	BEQ	LAB_EXP		; go do  EXP()
001BB4r 2               
001BB4r 2  A5 B3        	LDA	FAC2_e		; get FAC2 exponent
001BB6r 2  D0 03        	BNE	LAB_2ABF		; branch if FAC2<>0
001BB8r 2               
001BB8r 2  4C rr rr     	JMP	LAB_24F3		; clear FAC1 exponent and sign and return
001BBBr 2               
001BBBr 2               LAB_2ABF
001BBBr 2  A2 9C        	LDX	#<func_l		; set destination pointer low byte
001BBDr 2  A0 00        	LDY	#>func_l		; set destination pointer high byte
001BBFr 2  20 rr rr     	JSR	LAB_2778		; pack FAC1 into (XY)
001BC2r 2  A5 B7        	LDA	FAC2_s		; get FAC2 sign (b7)
001BC4r 2  10 0F        	BPL	LAB_2AD9		; branch if FAC2>0
001BC6r 2               
001BC6r 2               					; else FAC2 is -ve and can only be raised to an
001BC6r 2               					; integer power which gives an x +j0 result
001BC6r 2  20 rr rr     	JSR	LAB_INT		; perform INT
001BC9r 2  A9 9C        	LDA	#<func_l		; set source pointer low byte
001BCBr 2  A0 00        	LDY	#>func_l		; set source pointer high byte
001BCDr 2  20 rr rr     	JSR	LAB_27F8		; compare FAC1 with (AY)
001BD0r 2  D0 03        	BNE	LAB_2AD9		; branch if FAC1 <> (AY) to allow Function Call error
001BD2r 2               					; this will leave FAC1 -ve and cause a Function Call
001BD2r 2               					; error when LOG() is called
001BD2r 2               
001BD2r 2  98           	TYA				; clear sign b7
001BD3r 2  A4 5B        	LDY	Temp3			; save mantissa 3 from INT() function as sign in Y
001BD5r 2               					; for possible later negation, b0
001BD5r 2               LAB_2AD9
001BD5r 2  20 rr rr     	JSR	LAB_279D		; save FAC1 sign and copy ABS(FAC2) to FAC1
001BD8r 2  98           	TYA				; copy sign back ..
001BD9r 2  48           	PHA				; .. and save it
001BDAr 2  20 rr rr     	JSR	LAB_LOG		; do LOG(n)
001BDDr 2  A9 9C        	LDA	#<garb_l		; set pointer low byte
001BDFr 2  A0 00        	LDY	#>garb_l		; set pointer high byte
001BE1r 2  20 rr rr     	JSR	LAB_25FB		; do convert AY, FCA1*(AY) (square the value)
001BE4r 2  20 rr rr     	JSR	LAB_EXP		; go do EXP(n)
001BE7r 2  68           	PLA				; pull sign from stack
001BE8r 2  4A           	LSR				; b0 is to be tested, shift to Cb
001BE9r 2  90 0A        	BCC	LAB_2AF9		; if no bit then exit
001BEBr 2               
001BEBr 2               					; Perform negation
001BEBr 2               ; do - FAC1
001BEBr 2               
001BEBr 2               LAB_GTHAN
001BEBr 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001BEDr 2  F0 06        	BEQ	LAB_2AF9		; exit if FAC1_e = $00
001BEFr 2               
001BEFr 2  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
001BF1r 2  49 FF        	EOR	#$FF			; complement it
001BF3r 2  85 B0        	STA	FAC1_s		; save FAC1 sign (b7)
001BF5r 2               LAB_2AF9
001BF5r 2  60           	RTS
001BF6r 2               
001BF6r 2               ; perform EXP()	(x^e)
001BF6r 2               
001BF6r 2               LAB_EXP
001BF6r 2  A9 rr        	LDA	#<LAB_2AFA		; set 1.443 pointer low byte
001BF8r 2  A0 rr        	LDY	#>LAB_2AFA		; set 1.443 pointer high byte
001BFAr 2  20 rr rr     	JSR	LAB_25FB		; do convert AY, FCA1*(AY)
001BFDr 2  A5 B9        	LDA	FAC1_r		; get FAC1 rounding byte
001BFFr 2  69 50        	ADC	#$50			; +$50/$100
001C01r 2  90 03        	BCC	LAB_2B2B		; skip rounding if no carry
001C03r 2               
001C03r 2  20 rr rr     	JSR	LAB_27C2		; round FAC1 (no check)
001C06r 2               LAB_2B2B
001C06r 2  85 A3        	STA	FAC2_r		; save FAC2 rounding byte
001C08r 2  20 rr rr     	JSR	LAB_27AE		; copy FAC1 to FAC2
001C0Br 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001C0Dr 2  C9 88        	CMP	#$88			; compare with EXP limit (256d)
001C0Fr 2  90 03        	BCC	LAB_2B39		; branch if less
001C11r 2               
001C11r 2               LAB_2B36
001C11r 2  20 rr rr     	JSR	LAB_2690		; handle overflow and underflow
001C14r 2               LAB_2B39
001C14r 2  20 rr rr     	JSR	LAB_INT		; perform INT
001C17r 2  A5 5B        	LDA	Temp3			; get mantissa 3 from INT() function
001C19r 2  18           	CLC				; clear carry for add
001C1Ar 2  69 81        	ADC	#$81			; normalise +1
001C1Cr 2  F0 F3        	BEQ	LAB_2B36		; if $00 go handle overflow
001C1Er 2               
001C1Er 2  38           	SEC				; set carry for subtract
001C1Fr 2  E9 01        	SBC	#$01			; now correct for exponent
001C21r 2  48           	PHA				; save FAC2 exponent
001C22r 2               
001C22r 2               					; swap FAC1 and FAC2
001C22r 2  A2 04        	LDX	#$04			; 4 bytes to do
001C24r 2               LAB_2B49
001C24r 2  B5 B3        	LDA	FAC2_e,X		; get FAC2,X
001C26r 2  B4 AC        	LDY	FAC1_e,X		; get FAC1,X
001C28r 2  95 AC        	STA	FAC1_e,X		; save FAC1,X
001C2Ar 2  94 B3        	STY	FAC2_e,X		; save FAC2,X
001C2Cr 2  CA           	DEX				; decrement count/index
001C2Dr 2  10 F5        	BPL	LAB_2B49		; loop if not all done
001C2Fr 2               
001C2Fr 2  A5 A3        	LDA	FAC2_r		; get FAC2 rounding byte
001C31r 2  85 B9        	STA	FAC1_r		; save as FAC1 rounding byte
001C33r 2  20 rr rr     	JSR	LAB_SUBTRACT	; perform subtraction, FAC2 from FAC1
001C36r 2  20 rr rr     	JSR	LAB_GTHAN		; do - FAC1
001C39r 2  A9 rr        	LDA	#<LAB_2AFE		; set counter pointer low byte
001C3Br 2  A0 rr        	LDY	#>LAB_2AFE		; set counter pointer high byte
001C3Dr 2  20 rr rr     	JSR	LAB_2B84		; go do series evaluation
001C40r 2  A9 00        	LDA	#$00			; clear A
001C42r 2  85 B8        	STA	FAC_sc		; clear sign compare (FAC1 EOR FAC2)
001C44r 2  68           	PLA				;.get saved FAC2 exponent
001C45r 2  4C rr rr     	JMP	LAB_2675		; test and adjust accumulators and return
001C48r 2               
001C48r 2               ; ^2 then series evaluation
001C48r 2               
001C48r 2               LAB_2B6E
001C48r 2  85 BA        	STA	Cptrl			; save count pointer low byte
001C4Ar 2  84 BB        	STY	Cptrh			; save count pointer high byte
001C4Cr 2  20 rr rr     	JSR	LAB_276E		; pack FAC1 into Adatal
001C4Fr 2  A9 A4        	LDA	#<Adatal		; set pointer low byte (Y already $00)
001C51r 2  20 rr rr     	JSR	LAB_25FB		; do convert AY, FCA1*(AY)
001C54r 2  20 rr rr     	JSR	LAB_2B88		; go do series evaluation
001C57r 2  A9 A4        	LDA	#<Adatal		; pointer to original # low byte
001C59r 2  A0 00        	LDY	#>Adatal		; pointer to original # high byte
001C5Br 2  4C rr rr     	JMP	LAB_25FB		; do convert AY, FCA1*(AY) and return
001C5Er 2               
001C5Er 2               ; series evaluation
001C5Er 2               
001C5Er 2               LAB_2B84
001C5Er 2  85 BA        	STA	Cptrl			; save count pointer low byte
001C60r 2  84 BB        	STY	Cptrh			; save count pointer high byte
001C62r 2               LAB_2B88
001C62r 2  A2 A8        	LDX	#<numexp		; set pointer low byte
001C64r 2  20 rr rr     	JSR	LAB_2770		; set pointer high byte and pack FAC1 into numexp
001C67r 2  B1 BA        	LDA	(Cptrl),Y		; get constants count
001C69r 2  85 B1        	STA	numcon		; save constants count
001C6Br 2  A4 BA        	LDY	Cptrl			; get count pointer low byte
001C6Dr 2  C8           	INY				; increment it (now constants pointer)
001C6Er 2  98           	TYA				; copy it
001C6Fr 2  D0 02        	BNE	LAB_2B97		; skip next if no overflow
001C71r 2               
001C71r 2  E6 BB        	INC	Cptrh			; else increment high byte
001C73r 2               LAB_2B97
001C73r 2  85 BA        	STA	Cptrl			; save low byte
001C75r 2  A4 BB        	LDY	Cptrh			; get high byte
001C77r 2               LAB_2B9B
001C77r 2  20 rr rr     	JSR	LAB_25FB		; do convert AY, FCA1*(AY)
001C7Ar 2  A5 BA        	LDA	Cptrl			; get constants pointer low byte
001C7Cr 2  A4 BB        	LDY	Cptrh			; get constants pointer high byte
001C7Er 2  18           	CLC				; clear carry for add
001C7Fr 2  69 04        	ADC	#$04			; +4 to  low pointer (4 bytes per constant)
001C81r 2  90 01        	BCC	LAB_2BA8		; skip next if no overflow
001C83r 2               
001C83r 2  C8           	INY				; increment high byte
001C84r 2               LAB_2BA8
001C84r 2  85 BA        	STA	Cptrl			; save pointer low byte
001C86r 2  84 BB        	STY	Cptrh			; save pointer high byte
001C88r 2  20 rr rr     	JSR	LAB_246C		; add (AY) to FAC1
001C8Br 2  A9 A8        	LDA	#<numexp		; set pointer low byte to partial @ numexp
001C8Dr 2  A0 00        	LDY	#>numexp		; set pointer high byte to partial @ numexp
001C8Fr 2  C6 B1        	DEC	numcon		; decrement constants count
001C91r 2  D0 E4        	BNE	LAB_2B9B		; loop until all done
001C93r 2               
001C93r 2  60           	RTS
001C94r 2               
001C94r 2               ; RND(n), 32 bit Galoise version. make n=0 for 19th next number in sequence or n<>0
001C94r 2               ; to get 19th next number in sequence after seed n. This version of the PRNG uses
001C94r 2               ; the Galois method and a sample of 65536 bytes produced gives the following values.
001C94r 2               
001C94r 2               ; Entropy = 7.997442 bits per byte
001C94r 2               ; Optimum compression would reduce these 65536 bytes by 0 percent
001C94r 2               
001C94r 2               ; Chi square distribution for 65536 samples is 232.01, and
001C94r 2               ; randomly would exceed this value 75.00 percent of the time
001C94r 2               
001C94r 2               ; Arithmetic mean value of data bytes is 127.6724, 127.5 would be random
001C94r 2               ; Monte Carlo value for Pi is 3.122871269, error 0.60 percent
001C94r 2               ; Serial correlation coefficient is -0.000370, totally uncorrelated would be 0.0
001C94r 2               
001C94r 2               LAB_RND
001C94r 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001C96r 2  F0 07        	BEQ	NextPRN		; do next random # if zero
001C98r 2               
001C98r 2               					; else get seed into random number store
001C98r 2  A2 D8        	LDX	#Rbyte4		; set PRNG pointer low byte
001C9Ar 2  A0 00        	LDY	#$00			; set PRNG pointer high byte
001C9Cr 2  20 rr rr     	JSR	LAB_2778		; pack FAC1 into (XY)
001C9Fr 2               NextPRN
001C9Fr 2  A2 AF        	LDX	#$AF			; set EOR byte
001CA1r 2  A0 13        	LDY	#$13			; do this nineteen times
001CA3r 2               LoopPRN
001CA3r 2  06 D9        	ASL	Rbyte1		; shift PRNG most significant byte
001CA5r 2  26 DA        	ROL	Rbyte2		; shift PRNG middle byte
001CA7r 2  26 DB        	ROL	Rbyte3		; shift PRNG least significant byte
001CA9r 2  26 D8        	ROL	Rbyte4		; shift PRNG extra byte
001CABr 2  90 05        	BCC	Ninc1			; branch if bit 32 clear
001CADr 2               
001CADr 2  8A           	TXA				; set EOR byte
001CAEr 2  45 D9        	EOR	Rbyte1		; EOR PRNG extra byte
001CB0r 2  85 D9        	STA	Rbyte1		; save new PRNG extra byte
001CB2r 2               Ninc1
001CB2r 2  88           	DEY				; decrement loop count
001CB3r 2  D0 EE        	BNE	LoopPRN		; loop if not all done
001CB5r 2               
001CB5r 2  A2 02        	LDX	#$02			; three bytes to copy
001CB7r 2               CopyPRNG
001CB7r 2  B5 D9        	LDA	Rbyte1,X		; get PRNG byte
001CB9r 2  95 AD        	STA	FAC1_1,X		; save FAC1 byte
001CBBr 2  CA           	DEX
001CBCr 2  10 F9        	BPL	CopyPRNG		; loop if not complete
001CBEr 2               
001CBEr 2  A9 80        	LDA	#$80			; set the exponent
001CC0r 2  85 AC        	STA	FAC1_e		; save FAC1 exponent
001CC2r 2               
001CC2r 2  0A           	ASL				; clear A
001CC3r 2  85 B0        	STA	FAC1_s		; save FAC1 sign
001CC5r 2               
001CC5r 2  4C rr rr     	JMP	LAB_24D5		; normalise FAC1 and return
001CC8r 2               
001CC8r 2               ; perform COS()
001CC8r 2               
001CC8r 2               LAB_COS
001CC8r 2  A9 rr        	LDA	#<LAB_2C78		; set (pi/2) pointer low byte
001CCAr 2  A0 rr        	LDY	#>LAB_2C78		; set (pi/2) pointer high byte
001CCCr 2  20 rr rr     	JSR	LAB_246C		; add (AY) to FAC1
001CCFr 2               
001CCFr 2               ; perform SIN()
001CCFr 2               
001CCFr 2               LAB_SIN
001CCFr 2  20 rr rr     	JSR	LAB_27AB		; round and copy FAC1 to FAC2
001CD2r 2  A9 rr        	LDA	#<LAB_2C7C		; set (2*pi) pointer low byte
001CD4r 2  A0 rr        	LDY	#>LAB_2C7C		; set (2*pi) pointer high byte
001CD6r 2  A6 B7        	LDX	FAC2_s		; get FAC2 sign (b7)
001CD8r 2  20 rr rr     	JSR	LAB_26C2		; divide by (AY) (X=sign)
001CDBr 2  20 rr rr     	JSR	LAB_27AB		; round and copy FAC1 to FAC2
001CDEr 2  20 rr rr     	JSR	LAB_INT		; perform INT
001CE1r 2  A9 00        	LDA	#$00			; clear byte
001CE3r 2  85 B8        	STA	FAC_sc		; clear sign compare (FAC1 EOR FAC2)
001CE5r 2  20 rr rr     	JSR	LAB_SUBTRACT	; perform subtraction, FAC2 from FAC1
001CE8r 2  A9 rr        	LDA	#<LAB_2C80		; set 0.25 pointer low byte
001CEAr 2  A0 rr        	LDY	#>LAB_2C80		; set 0.25 pointer high byte
001CECr 2  20 rr rr     	JSR	LAB_2455		; perform subtraction, (AY) from FAC1
001CEFr 2  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
001CF1r 2  48           	PHA				; save FAC1 sign
001CF2r 2  10 0D        	BPL	LAB_2C35		; branch if +ve
001CF4r 2               
001CF4r 2               					; FAC1 sign was -ve
001CF4r 2  20 rr rr     	JSR	LAB_244E		; add 0.5 to FAC1
001CF7r 2  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
001CF9r 2  30 09        	BMI	LAB_2C38		; branch if -ve
001CFBr 2               
001CFBr 2  A5 63        	LDA	Cflag			; get comparison evaluation flag
001CFDr 2  49 FF        	EOR	#$FF			; toggle flag
001CFFr 2  85 63        	STA	Cflag			; save comparison evaluation flag
001D01r 2               LAB_2C35
001D01r 2  20 rr rr     	JSR	LAB_GTHAN		; do - FAC1
001D04r 2               LAB_2C38
001D04r 2  A9 rr        	LDA	#<LAB_2C80		; set 0.25 pointer low byte
001D06r 2  A0 rr        	LDY	#>LAB_2C80		; set 0.25 pointer high byte
001D08r 2  20 rr rr     	JSR	LAB_246C		; add (AY) to FAC1
001D0Br 2  68           	PLA				; restore FAC1 sign
001D0Cr 2  10 03        	BPL	LAB_2C45		; branch if was +ve
001D0Er 2               
001D0Er 2               					; else correct FAC1
001D0Er 2  20 rr rr     	JSR	LAB_GTHAN		; do - FAC1
001D11r 2               LAB_2C45
001D11r 2  A9 rr        	LDA	#<LAB_2C84		; set pointer low byte to counter
001D13r 2  A0 rr        	LDY	#>LAB_2C84		; set pointer high byte to counter
001D15r 2  4C rr rr     	JMP	LAB_2B6E		; ^2 then series evaluation and return
001D18r 2               
001D18r 2               ; perform TAN()
001D18r 2               
001D18r 2               LAB_TAN
001D18r 2  20 rr rr     	JSR	LAB_276E		; pack FAC1 into Adatal
001D1Br 2  A9 00        	LDA	#$00			; clear byte
001D1Dr 2  85 63        	STA	Cflag			; clear comparison evaluation flag
001D1Fr 2  20 rr rr     	JSR	LAB_SIN		; go do SIN(n)
001D22r 2  A2 9C        	LDX	#<func_l		; set sin(n) pointer low byte
001D24r 2  A0 00        	LDY	#>func_l		; set sin(n) pointer high byte
001D26r 2  20 rr rr     	JSR	LAB_2778		; pack FAC1 into (XY)
001D29r 2  A9 A4        	LDA	#<Adatal		; set n pointer low addr
001D2Br 2  A0 00        	LDY	#>Adatal		; set n pointer high addr
001D2Dr 2  20 rr rr     	JSR	LAB_UFAC		; unpack memory (AY) into FAC1
001D30r 2  A9 00        	LDA	#$00			; clear byte
001D32r 2  85 B0        	STA	FAC1_s		; clear FAC1 sign (b7)
001D34r 2  A5 63        	LDA	Cflag			; get comparison evaluation flag
001D36r 2  20 rr rr     	JSR	LAB_2C74		; save flag and go do series evaluation
001D39r 2               
001D39r 2  A9 9C        	LDA	#<func_l		; set sin(n) pointer low byte
001D3Br 2  A0 00        	LDY	#>func_l		; set sin(n) pointer high byte
001D3Dr 2  4C rr rr     	JMP	LAB_26CA		; convert AY and do (AY)/FAC1
001D40r 2               
001D40r 2               LAB_2C74
001D40r 2  48           	PHA				; save comparison evaluation flag
001D41r 2  4C rr rr     	JMP	LAB_2C35		; go do series evaluation
001D44r 2               
001D44r 2               ; perform USR()
001D44r 2               
001D44r 2               LAB_USR
001D44r 2  20 0A 00     	JSR	Usrjmp		; call user code
001D47r 2  4C rr rr     	JMP	LAB_1BFB		; scan for ")", else do syntax error then warm start
001D4Ar 2               
001D4Ar 2               ; perform ATN()
001D4Ar 2               
001D4Ar 2               LAB_ATN
001D4Ar 2  A5 B0        	LDA	FAC1_s		; get FAC1 sign (b7)
001D4Cr 2  48           	PHA				; save sign
001D4Dr 2  10 03        	BPL	LAB_2CA1		; branch if +ve
001D4Fr 2               
001D4Fr 2  20 rr rr     	JSR	LAB_GTHAN		; else do - FAC1
001D52r 2               LAB_2CA1
001D52r 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001D54r 2  48           	PHA				; push exponent
001D55r 2  C9 81        	CMP	#$81			; compare with 1
001D57r 2  90 07        	BCC	LAB_2CAF		; branch if FAC1<1
001D59r 2               
001D59r 2  A9 rr        	LDA	#<LAB_259C		; set 1 pointer low byte
001D5Br 2  A0 rr        	LDY	#>LAB_259C		; set 1 pointer high byte
001D5Dr 2  20 rr rr     	JSR	LAB_26CA		; convert AY and do (AY)/FAC1
001D60r 2               LAB_2CAF
001D60r 2  A9 rr        	LDA	#<LAB_2CC9		; set pointer low byte to counter
001D62r 2  A0 rr        	LDY	#>LAB_2CC9		; set pointer high byte to counter
001D64r 2  20 rr rr     	JSR	LAB_2B6E		; ^2 then series evaluation
001D67r 2  68           	PLA				; restore old FAC1 exponent
001D68r 2  C9 81        	CMP	#$81			; compare with 1
001D6Ar 2  90 07        	BCC	LAB_2CC2		; branch if FAC1<1
001D6Cr 2               
001D6Cr 2  A9 rr        	LDA	#<LAB_2C78		; set (pi/2) pointer low byte
001D6Er 2  A0 rr        	LDY	#>LAB_2C78		; set (pi/2) pointer high byte
001D70r 2  20 rr rr     	JSR	LAB_2455		; perform subtraction, (AY) from FAC1
001D73r 2               LAB_2CC2
001D73r 2  68           	PLA				; restore FAC1 sign
001D74r 2  10 16        	BPL	LAB_2D04		; exit if was +ve
001D76r 2               
001D76r 2  4C rr rr     	JMP	LAB_GTHAN		; else do - FAC1 and return
001D79r 2               
001D79r 2               ; perform BITSET
001D79r 2               
001D79r 2               LAB_BITSET
001D79r 2  20 rr rr     	JSR	LAB_GADB		; get two parameters for POKE or WAIT
001D7Cr 2  E0 08        	CPX	#$08			; only 0 to 7 are allowed
001D7Er 2  B0 20        	BCS	FCError		; branch if > 7
001D80r 2               
001D80r 2  A9 00        	LDA	#$00			; clear A
001D82r 2  38           	SEC				; set the carry
001D83r 2               S_Bits
001D83r 2  2A           	ROL				; shift bit
001D84r 2  CA           	DEX				; decrement bit number
001D85r 2  10 FC        	BPL	S_Bits		; loop if still +ve
001D87r 2               
001D87r 2  E8           	INX				; make X = $00
001D88r 2  01 11        	ORA	(Itempl,X)		; or with byte via temporary integer (addr)
001D8Ar 2  81 11        	STA	(Itempl,X)		; save byte via temporary integer (addr)
001D8Cr 2               LAB_2D04
001D8Cr 2  60           	RTS
001D8Dr 2               
001D8Dr 2               ; perform BITCLR
001D8Dr 2               
001D8Dr 2               LAB_BITCLR
001D8Dr 2  20 rr rr     	JSR	LAB_GADB		; get two parameters for POKE or WAIT
001D90r 2  E0 08        	CPX	#$08			; only 0 to 7 are allowed
001D92r 2  B0 0C        	BCS	FCError		; branch if > 7
001D94r 2               
001D94r 2  A9 FF        	LDA	#$FF			; set A
001D96r 2               S_Bitc
001D96r 2  2A           	ROL				; shift bit
001D97r 2  CA           	DEX				; decrement bit number
001D98r 2  10 FC        	BPL	S_Bitc		; loop if still +ve
001D9Ar 2               
001D9Ar 2  E8           	INX				; make X = $00
001D9Br 2  21 11        	AND	(Itempl,X)		; and with byte via temporary integer (addr)
001D9Dr 2  81 11        	STA	(Itempl,X)		; save byte via temporary integer (addr)
001D9Fr 2  60           	RTS
001DA0r 2               
001DA0r 2               FCError
001DA0r 2  4C rr rr     	JMP	LAB_FCER		; do function call error then warm start
001DA3r 2               
001DA3r 2               ; perform BITTST()
001DA3r 2               
001DA3r 2               LAB_BTST
001DA3r 2  20 BC 00     	JSR	LAB_IGBY		; increment BASIC pointer
001DA6r 2  20 rr rr     	JSR	LAB_GADB		; get two parameters for POKE or WAIT
001DA9r 2  E0 08        	CPX	#$08			; only 0 to 7 are allowed
001DABr 2  B0 F3        	BCS	FCError		; branch if > 7
001DADr 2               
001DADr 2  20 C2 00     	JSR	LAB_GBYT		; get next BASIC byte
001DB0r 2  C9 29        	CMP	#')'			; is next character ")"
001DB2r 2  F0 03        	BEQ	TST_OK		; if ")" go do rest of function
001DB4r 2               
001DB4r 2  4C rr rr     	JMP	LAB_SNER		; do syntax error then warm start
001DB7r 2               
001DB7r 2               TST_OK
001DB7r 2  20 BC 00     	JSR	LAB_IGBY		; update BASIC execute pointer (to character past ")")
001DBAr 2  A9 00        	LDA	#$00			; clear A
001DBCr 2  38           	SEC				; set the carry
001DBDr 2               T_Bits
001DBDr 2  2A           	ROL				; shift bit
001DBEr 2  CA           	DEX				; decrement bit number
001DBFr 2  10 FC        	BPL	T_Bits		; loop if still +ve
001DC1r 2               
001DC1r 2  E8           	INX				; make X = $00
001DC2r 2  21 11        	AND	(Itempl,X)		; AND with byte via temporary integer (addr)
001DC4r 2  F0 02        	BEQ	LAB_NOTT		; branch if zero (already correct)
001DC6r 2               
001DC6r 2  A9 FF        	LDA	#$FF			; set for -1 result
001DC8r 2               LAB_NOTT
001DC8r 2  4C rr rr     	JMP	LAB_27DB		; go do SGN tail
001DCBr 2               
001DCBr 2               ; perform BIN$()
001DCBr 2               
001DCBr 2               LAB_BINS
001DCBr 2  E0 19        	CPX	#$19			; max + 1
001DCDr 2  B0 48        	BCS	BinFErr		; exit if too big ( > or = )
001DCFr 2               
001DCFr 2  86 78        	STX	TempB			; save # of characters ($00 = leading zero remove)
001DD1r 2  A9 18        	LDA	#$18			; need A byte long space
001DD3r 2  20 rr rr     	JSR	LAB_MSSP		; make string space A bytes long
001DD6r 2  A0 17        	LDY	#$17			; set index
001DD8r 2  A2 18        	LDX	#$18			; character count
001DDAr 2               NextB1
001DDAr 2  46 11        	LSR	nums_1		; shift highest byte
001DDCr 2  66 12        	ROR	nums_2		; shift middle byte
001DDEr 2  66 13        	ROR	nums_3		; shift lowest byte bit 0 to carry
001DE0r 2  8A           	TXA				; load with "0"/2
001DE1r 2  2A           	ROL				; shift in carry
001DE2r 2  91 AD        	STA	(str_pl),Y		; save to temp string + index
001DE4r 2  88           	DEY				; decrement index
001DE5r 2  10 F3        	BPL	NextB1		; loop if not done
001DE7r 2               
001DE7r 2  A5 78        	LDA	TempB			; get # of characters
001DE9r 2  F0 0A        	BEQ	EndBHS		; branch if truncate
001DEBr 2               
001DEBr 2  AA           	TAX				; copy length to X
001DECr 2  38           	SEC				; set carry for add !
001DEDr 2  49 FF        	EOR	#$FF			; 1's complement
001DEFr 2  69 18        	ADC	#$18			; add 24d
001DF1r 2  F0 1C        	BEQ	GoPr2			; if zero print whole string
001DF3r 2               
001DF3r 2  D0 0F        	BNE	GoPr1			; else go make output string
001DF5r 2               
001DF5r 2               ; this is the exit code and is also used by HEX$()
001DF5r 2               ; truncate string to remove leading "0"s
001DF5r 2               
001DF5r 2               EndBHS
001DF5r 2  A8           	TAY				; clear index (A=0, X=length here)
001DF6r 2               NextB2
001DF6r 2  B1 AD        	LDA	(str_pl),Y		; get character from string
001DF8r 2  C9 30        	CMP	#'0'			; compare with "0"
001DFAr 2  D0 07        	BNE	GoPr			; if not "0" then go print string from here
001DFCr 2               
001DFCr 2  CA           	DEX				; decrement character count
001DFDr 2  F0 03        	BEQ	GoPr3			; if zero then end of string so go print it
001DFFr 2               
001DFFr 2  C8           	INY				; else increment index
001E00r 2  10 F4        	BPL	NextB2		; loop always
001E02r 2               
001E02r 2               ; make fixed length output string - ignore overflows!
001E02r 2               
001E02r 2               GoPr3
001E02r 2  E8           	INX				; need at least 1 character
001E03r 2               GoPr
001E03r 2  98           	TYA				; copy result
001E04r 2               GoPr1
001E04r 2  18           	CLC				; clear carry for add
001E05r 2  65 AD        	ADC	str_pl		; add low address
001E07r 2  85 AD        	STA	str_pl		; save low address
001E09r 2  A9 00        	LDA	#$00			; do high byte
001E0Br 2  65 AE        	ADC	str_ph		; add high address
001E0Dr 2  85 AE        	STA	str_ph		; save high address
001E0Fr 2               GoPr2
001E0Fr 2  86 AC        	STX	str_ln		; X holds string length
001E11r 2  20 BC 00     	JSR	LAB_IGBY		; update BASIC execute pointer (to character past ")")
001E14r 2  4C rr rr     	JMP	LAB_RTST		; check for space on descriptor stack then put address
001E17r 2               					; and length on descriptor stack and update stack pointers
001E17r 2               
001E17r 2               BinFErr
001E17r 2  4C rr rr     	JMP	LAB_FCER		; do function call error then warm start
001E1Ar 2               
001E1Ar 2               ; perform HEX$()
001E1Ar 2               
001E1Ar 2               LAB_HEXS
001E1Ar 2  E0 07        	CPX	#$07			; max + 1
001E1Cr 2  B0 F9        	BCS	BinFErr		; exit if too big ( > or = )
001E1Er 2               
001E1Er 2  86 78        	STX	TempB			; save # of characters
001E20r 2               
001E20r 2  A9 06        	LDA	#$06			; need 6 bytes for string
001E22r 2  20 rr rr     	JSR	LAB_MSSP		; make string space A bytes long
001E25r 2  A0 05        	LDY	#$05			; set string index
001E27r 2               
001E27r 2  F8           	SED				; need decimal mode for nibble convert
001E28r 2  A5 13        	LDA	nums_3		; get lowest byte
001E2Ar 2  20 rr rr     	JSR	LAB_A2HX		; convert A to ASCII hex byte and output
001E2Dr 2  A5 12        	LDA	nums_2		; get middle byte
001E2Fr 2  20 rr rr     	JSR	LAB_A2HX		; convert A to ASCII hex byte and output
001E32r 2  A5 11        	LDA	nums_1		; get highest byte
001E34r 2  20 rr rr     	JSR	LAB_A2HX		; convert A to ASCII hex byte and output
001E37r 2  D8           	CLD				; back to binary
001E38r 2               
001E38r 2  A2 06        	LDX	#$06			; character count
001E3Ar 2  A5 78        	LDA	TempB			; get # of characters
001E3Cr 2  F0 B7        	BEQ	EndBHS		; branch if truncate
001E3Er 2               
001E3Er 2  AA           	TAX				; copy length to X
001E3Fr 2  38           	SEC				; set carry for add !
001E40r 2  49 FF        	EOR	#$FF			; 1's complement
001E42r 2  69 06        	ADC	#$06			; add 6d
001E44r 2  F0 C9        	BEQ	GoPr2			; if zero print whole string
001E46r 2               
001E46r 2  D0 BC        	BNE	GoPr1			; else go make output string (branch always)
001E48r 2               
001E48r 2               ; convert A to ASCII hex byte and output .. note set decimal mode before calling
001E48r 2               
001E48r 2               LAB_A2HX
001E48r 2  AA           	TAX				; save byte
001E49r 2  29 0F        	AND	#$0F			; mask off top bits
001E4Br 2  20 rr rr     	JSR	LAB_AL2X		; convert low nibble to ASCII and output
001E4Er 2  8A           	TXA				; get byte back
001E4Fr 2  4A           	LSR				; /2	shift high nibble to low nibble
001E50r 2  4A           	LSR				; /4
001E51r 2  4A           	LSR				; /8
001E52r 2  4A           	LSR				; /16
001E53r 2               LAB_AL2X
001E53r 2  C9 0A        	CMP	#$0A			; set carry for +1 if >9
001E55r 2  69 30        	ADC	#'0'			; add ASCII "0"
001E57r 2  91 AD        	STA	(str_pl),Y		; save to temp string
001E59r 2  88           	DEY				; decrement counter
001E5Ar 2  60           	RTS
001E5Br 2               
001E5Br 2               LAB_NLTO
001E5Br 2  85 AC        	STA	FAC1_e		; save FAC1 exponent
001E5Dr 2  A9 00        	LDA	#$00			; clear sign compare
001E5Fr 2               LAB_MLTE
001E5Fr 2  85 B8        	STA	FAC_sc		; save sign compare (FAC1 EOR FAC2)
001E61r 2  8A           	TXA				; restore character
001E62r 2  20 rr rr     	JSR	LAB_2912		; evaluate new ASCII digit
001E65r 2               
001E65r 2               ; gets here if the first character was "$" for hex
001E65r 2               ; get hex number
001E65r 2               
001E65r 2               LAB_CHEX
001E65r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
001E68r 2  90 0A        	BCC	LAB_ISHN		; branch if numeric character
001E6Ar 2               
001E6Ar 2  09 20        	ORA	#$20			; case convert, allow "A" to "F" and "a" to "f"
001E6Cr 2  E9 61        	SBC	#'a'			; subtract "a" (carry set here)
001E6Er 2  C9 06        	CMP	#$06			; compare normalised with $06 (max+1)
001E70r 2  B0 2A        	BCS	LAB_EXCH		; exit if >"f" or <"0"
001E72r 2               
001E72r 2  69 0A        	ADC	#$0A			; convert to nibble
001E74r 2               LAB_ISHN
001E74r 2  29 0F        	AND	#$0F			; convert to binary
001E76r 2  AA           	TAX				; save nibble
001E77r 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001E79r 2  F0 E4        	BEQ	LAB_MLTE		; skip multiply if zero
001E7Br 2               
001E7Br 2  69 04        	ADC	#$04			; add four to exponent (*16 - carry clear here)
001E7Dr 2  90 DC        	BCC	LAB_NLTO		; if no overflow do evaluate digit
001E7Fr 2               
001E7Fr 2               LAB_MLTO
001E7Fr 2  4C rr rr     	JMP	LAB_2564		; do overflow error and warm start
001E82r 2               
001E82r 2               LAB_NXCH
001E82r 2  AA           	TAX				; save bit
001E83r 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001E85r 2  F0 06        	BEQ	LAB_MLBT		; skip multiply if zero
001E87r 2               
001E87r 2  E6 AC        	INC	FAC1_e		; increment FAC1 exponent (*2)
001E89r 2  F0 F4        	BEQ	LAB_MLTO		; do overflow error if = $00
001E8Br 2               
001E8Br 2  A9 00        	LDA	#$00			; clear sign compare
001E8Dr 2               LAB_MLBT
001E8Dr 2  85 B8        	STA	FAC_sc		; save sign compare (FAC1 EOR FAC2)
001E8Fr 2  8A           	TXA				; restore bit
001E90r 2  20 rr rr     	JSR	LAB_2912		; evaluate new ASCII digit
001E93r 2               
001E93r 2               ; gets here if the first character was  "%" for binary
001E93r 2               ; get binary number
001E93r 2               
001E93r 2               LAB_CBIN
001E93r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
001E96r 2  49 30        	EOR	#'0'			; convert "0" to 0 etc.
001E98r 2  C9 02        	CMP	#$02			; compare with max+1
001E9Ar 2  90 E6        	BCC	LAB_NXCH		; branch exit if < 2
001E9Cr 2               
001E9Cr 2               LAB_EXCH
001E9Cr 2  4C rr rr     	JMP	LAB_28F6		; evaluate -ve flag and return
001E9Fr 2               
001E9Fr 2               ; ctrl-c check routine. includes limited "life" byte save for INGET routine
001E9Fr 2               ; now also the code that checks to see if an interrupt has occurred
001E9Fr 2               
001E9Fr 2               CTRLC
001E9Fr 2  AD 00 03     	LDA	ccflag		; get [CTRL-C] check flag
001EA2r 2  D0 18        	BNE	LAB_FBA2		; exit if inhibited
001EA4r 2               
001EA4r 2  20 rr rr     	JSR	V_INPT		; scan input device
001EA7r 2  90 0B        	BCC	LAB_FBA0		; exit if buffer empty
001EA9r 2               
001EA9r 2  8D 01 03     	STA	ccbyte		; save received byte
001EACr 2  A2 20        	LDX	#$20			; "life" timer for bytes
001EAEr 2  8E 02 03     	STX	ccnull		; set countdown
001EB1r 2  4C rr rr     	JMP	LAB_1636		; return to BASIC
001EB4r 2               
001EB4r 2               LAB_FBA0
001EB4r 2  AE 02 03     	LDX	ccnull		; get countdown byte
001EB7r 2  F0 03        	BEQ	LAB_FBA2		; exit if finished
001EB9r 2               
001EB9r 2  CE 02 03     	DEC	ccnull		; else decrement countdown
001EBCr 2               LAB_FBA2
001EBCr 2  A2 DC        	LDX	#NmiBase		; set pointer to NMI values
001EBEr 2  20 rr rr     	JSR	LAB_CKIN		; go check interrupt
001EC1r 2  A2 DF        	LDX	#IrqBase		; set pointer to IRQ values
001EC3r 2  20 rr rr     	JSR	LAB_CKIN		; go check interrupt
001EC6r 2               LAB_CRTS
001EC6r 2  60           	RTS
001EC7r 2               
001EC7r 2               ; check whichever interrupt is indexed by X
001EC7r 2               
001EC7r 2               LAB_CKIN
001EC7r 2  B5 00        	LDA	PLUS_0,X		; get interrupt flag byte
001EC9r 2  10 FB        	BPL	LAB_CRTS		; branch if interrupt not enabled
001ECBr 2               
001ECBr 2               ; we disable the interrupt here and make two new commands RETIRQ and RETNMI to
001ECBr 2               ; automatically enable the interrupt when we exit
001ECBr 2               
001ECBr 2  0A           	ASL				; move happened bit to setup bit
001ECCr 2  29 40        	AND	#$40			; mask happened bits
001ECEr 2  F0 F6        	BEQ	LAB_CRTS		; if no interrupt then exit
001ED0r 2               
001ED0r 2  95 00        	STA	PLUS_0,X		; save interrupt flag byte
001ED2r 2               
001ED2r 2  8A           	TXA				; copy index ..
001ED3r 2  A8           	TAY				; .. to Y
001ED4r 2               
001ED4r 2  68           	PLA				; dump return address low byte, call from CTRL-C
001ED5r 2  68           	PLA				; dump return address high byte
001ED6r 2               
001ED6r 2  A9 05        	LDA	#$05			; need 5 bytes for GOSUB
001ED8r 2  20 rr rr     	JSR	LAB_1212		; check room on stack for A bytes
001EDBr 2  A5 C4        	LDA	Bpntrh		; get BASIC execute pointer high byte
001EDDr 2  48           	PHA				; push on stack
001EDEr 2  A5 C3        	LDA	Bpntrl		; get BASIC execute pointer low byte
001EE0r 2  48           	PHA				; push on stack
001EE1r 2  A5 88        	LDA	Clineh		; get current line high byte
001EE3r 2  48           	PHA				; push on stack
001EE4r 2  A5 87        	LDA	Clinel		; get current line low byte
001EE6r 2  48           	PHA				; push on stack
001EE7r 2  A9 8D        	LDA	#TK_GOSUB		; token for GOSUB
001EE9r 2  48           	PHA				; push on stack
001EEAr 2               
001EEAr 2  B9 01 00     	LDA	PLUS_1,Y		; get interrupt code pointer low byte
001EEDr 2  85 C3        	STA	Bpntrl		; save as BASIC execute pointer low byte
001EEFr 2  B9 02 00     	LDA	PLUS_2,Y		; get interrupt code pointer high byte
001EF2r 2  85 C4        	STA	Bpntrh		; save as BASIC execute pointer high byte
001EF4r 2               
001EF4r 2  4C rr rr     	JMP	LAB_15C2		; go do interpreter inner loop
001EF7r 2               					; can't RTS, we used the stack! the RTS from the ctrl-c
001EF7r 2               					; check will be taken when the RETIRQ/RETNMI/RETURN is
001EF7r 2               					; executed at the end of the subroutine
001EF7r 2               
001EF7r 2               ; get byte from input device, no waiting
001EF7r 2               ; returns with carry set if byte in A
001EF7r 2               
001EF7r 2               INGET
001EF7r 2  20 rr rr     	JSR	V_INPT		; call scan input device
001EFAr 2  B0 09        	BCS	LAB_FB95		; if byte go reset timer
001EFCr 2               
001EFCr 2  AD 02 03     	LDA	ccnull		; get countdown
001EFFr 2  F0 09        	BEQ	LAB_FB96		; exit if empty
001F01r 2               
001F01r 2  AD 01 03     	LDA	ccbyte		; get last received byte
001F04r 2  38           	SEC				; flag we got a byte
001F05r 2               LAB_FB95
001F05r 2  A2 00        	LDX	#$00			; clear X
001F07r 2  8E 02 03     	STX	ccnull		; clear timer because we got a byte
001F0Ar 2               LAB_FB96
001F0Ar 2  60           	RTS
001F0Br 2               
001F0Br 2               ; these routines only enable the interrupts if the set-up flag is set
001F0Br 2               ; if not they have no effect
001F0Br 2               
001F0Br 2               ; perform IRQ {ON|OFF|CLEAR}
001F0Br 2               
001F0Br 2               LAB_IRQ
001F0Br 2  A2 DF        	LDX	#IrqBase		; set pointer to IRQ values
001F0Dr 2  2C           	.byte	$2C			; make next line BIT abs.
001F0Er 2               
001F0Er 2               ; perform NMI {ON|OFF|CLEAR}
001F0Er 2               
001F0Er 2               LAB_NMI
001F0Er 2  A2 DC        	LDX	#NmiBase		; set pointer to NMI values
001F10r 2  C9 93        	CMP	#TK_ON		; compare with token for ON
001F12r 2  F0 11        	BEQ	LAB_INON		; go turn on interrupt
001F14r 2               
001F14r 2  C9 B5        	CMP	#TK_OFF		; compare with token for OFF
001F16r 2  F0 07        	BEQ	LAB_IOFF		; go turn off interrupt
001F18r 2               
001F18r 2  49 A2        	EOR	#TK_CLEAR		; compare with token for CLEAR, A = $00 if = TK_CLEAR
001F1Ar 2  F0 0E        	BEQ	LAB_INEX		; go clear interrupt flags and return
001F1Cr 2               
001F1Cr 2  4C rr rr     	JMP	LAB_SNER		; do syntax error then warm start
001F1Fr 2               
001F1Fr 2               LAB_IOFF
001F1Fr 2  A9 7F        	LDA	#$7F			; clear A
001F21r 2  35 00        	AND	PLUS_0,X		; AND with interrupt setup flag
001F23r 2  10 05        	BPL	LAB_INEX		; go clear interrupt enabled flag and return
001F25r 2               
001F25r 2               LAB_INON
001F25r 2  B5 00        	LDA	PLUS_0,X		; get interrupt setup flag
001F27r 2  0A           	ASL				; Shift bit to enabled flag
001F28r 2  15 00        	ORA	PLUS_0,X		; OR with flag byte
001F2Ar 2               LAB_INEX
001F2Ar 2  95 00        	STA	PLUS_0,X		; save interrupt flag byte
001F2Cr 2  4C BC 00     	JMP	LAB_IGBY		; update BASIC execute pointer and return
001F2Fr 2               
001F2Fr 2               ; these routines set up the pointers and flags for the interrupt routines
001F2Fr 2               ; note that the interrupts are also enabled by these commands
001F2Fr 2               
001F2Fr 2               ; perform ON IRQ
001F2Fr 2               
001F2Fr 2               LAB_SIRQ
001F2Fr 2  58           	CLI				; enable interrupts
001F30r 2  A2 DF        	LDX	#IrqBase		; set pointer to IRQ values
001F32r 2  2C           	.byte	$2C			; make next line BIT abs.
001F33r 2               
001F33r 2               ; perform ON NMI
001F33r 2               
001F33r 2               LAB_SNMI
001F33r 2  A2 DC        	LDX	#NmiBase		; set pointer to NMI values
001F35r 2               
001F35r 2  86 78        	STX	TempB			; save interrupt pointer
001F37r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory (past token)
001F3Ar 2  20 rr rr     	JSR	LAB_GFPN		; get fixed-point number into temp integer
001F3Dr 2  A5 79        	LDA	Smeml			; get start of mem low byte
001F3Fr 2  A6 7A        	LDX	Smemh			; get start of mem high byte
001F41r 2  20 rr rr     	JSR	LAB_SHLN		; search Basic for temp integer line number from AX
001F44r 2  B0 03        	BCS	LAB_LFND		; if carry set go set-up interrupt
001F46r 2               
001F46r 2  4C rr rr     	JMP	LAB_16F7		; else go do "Undefined statement" error and warm start
001F49r 2               
001F49r 2               LAB_LFND
001F49r 2  A6 78        	LDX	TempB			; get interrupt pointer
001F4Br 2  A5 AA        	LDA	Baslnl		; get pointer low byte
001F4Dr 2  E9 01        	SBC	#$01			; -1 (carry already set for subtract)
001F4Fr 2  95 01        	STA	PLUS_1,X		; save as interrupt pointer low byte
001F51r 2  A5 AB        	LDA	Baslnh		; get pointer high byte
001F53r 2  E9 00        	SBC	#$00			; subtract carry
001F55r 2  95 02        	STA	PLUS_2,X		; save as interrupt pointer high byte
001F57r 2               
001F57r 2  A9 C0        	LDA	#$C0			; set interrupt enabled/setup bits
001F59r 2  95 00        	STA	PLUS_0,X		; set interrupt flags
001F5Br 2               LAB_IRTS
001F5Br 2  60           	RTS
001F5Cr 2               
001F5Cr 2               ; return from IRQ service, restores the enabled flag.
001F5Cr 2               
001F5Cr 2               ; perform RETIRQ
001F5Cr 2               
001F5Cr 2               LAB_RETIRQ
001F5Cr 2  D0 FD        	BNE	LAB_IRTS		; exit if following token (to allow syntax error)
001F5Er 2               
001F5Er 2  A5 DF        	LDA	IrqBase		; get interrupt flags
001F60r 2  0A           	ASL				; copy setup to enabled (b7)
001F61r 2  05 DF        	ORA	IrqBase		; OR in setup flag
001F63r 2  85 DF        	STA	IrqBase		; save enabled flag
001F65r 2  4C rr rr     	JMP	LAB_16E8		; go do rest of RETURN
001F68r 2               
001F68r 2               ; return from NMI service, restores the enabled flag.
001F68r 2               
001F68r 2               ; perform RETNMI
001F68r 2               
001F68r 2               LAB_RETNMI
001F68r 2  D0 F1        	BNE	LAB_IRTS		; exit if following token (to allow syntax error)
001F6Ar 2               
001F6Ar 2  A5 DC        	LDA	NmiBase		; get set-up flag
001F6Cr 2  0A           	ASL				; copy setup to enabled (b7)
001F6Dr 2  05 DC        	ORA	NmiBase		; OR in setup flag
001F6Fr 2  85 DC        	STA	NmiBase		; save enabled flag
001F71r 2  4C rr rr     	JMP	LAB_16E8		; go do rest of RETURN
001F74r 2               
001F74r 2               ; MAX() MIN() pre process
001F74r 2               
001F74r 2               LAB_MMPP
001F74r 2  20 rr rr     	JSR	LAB_EVEZ		; process expression
001F77r 2  4C rr rr     	JMP	LAB_CTNM		; check if source is numeric, else do type mismatch
001F7Ar 2               
001F7Ar 2               ; perform MAX()
001F7Ar 2               
001F7Ar 2               LAB_MAX
001F7Ar 2  20 rr rr     	JSR	LAB_PHFA		; push FAC1, evaluate expression,
001F7Dr 2               					; pull FAC2 and compare with FAC1
001F7Dr 2  10 FB        	BPL	LAB_MAX		; branch if no swap to do
001F7Fr 2               
001F7Fr 2  A5 B4        	LDA	FAC2_1		; get FAC2 mantissa1
001F81r 2  09 80        	ORA	#$80			; set top bit (clear sign from compare)
001F83r 2  85 B4        	STA	FAC2_1		; save FAC2 mantissa1
001F85r 2  20 rr rr     	JSR	LAB_279B		; copy FAC2 to FAC1
001F88r 2  F0 F0        	BEQ	LAB_MAX		; go do next (branch always)
001F8Ar 2               
001F8Ar 2               ; perform MIN()
001F8Ar 2               
001F8Ar 2               LAB_MIN
001F8Ar 2  20 rr rr     	JSR	LAB_PHFA		; push FAC1, evaluate expression,
001F8Dr 2               					; pull FAC2 and compare with FAC1
001F8Dr 2  30 FB        	BMI	LAB_MIN		; branch if no swap to do
001F8Fr 2               
001F8Fr 2  F0 F9        	BEQ	LAB_MIN		; branch if no swap to do
001F91r 2               
001F91r 2  A5 B4        	LDA	FAC2_1		; get FAC2 mantissa1
001F93r 2  09 80        	ORA	#$80			; set top bit (clear sign from compare)
001F95r 2  85 B4        	STA	FAC2_1		; save FAC2 mantissa1
001F97r 2  20 rr rr     	JSR	LAB_279B		; copy FAC2 to FAC1
001F9Ar 2  F0 EE        	BEQ	LAB_MIN		; go do next (branch always)
001F9Cr 2               
001F9Cr 2               ; exit routine. don't bother returning to the loop code
001F9Cr 2               ; check for correct exit, else so syntax error
001F9Cr 2               
001F9Cr 2               LAB_MMEC
001F9Cr 2  C9 29        	CMP	#')'			; is it end of function?
001F9Er 2  D0 05        	BNE	LAB_MMSE		; if not do MAX MIN syntax error
001FA0r 2               
001FA0r 2  68           	PLA				; dump return address low byte
001FA1r 2  68           	PLA				; dump return address high byte
001FA2r 2  4C BC 00     	JMP	LAB_IGBY		; update BASIC execute pointer (to chr past ")")
001FA5r 2               
001FA5r 2               LAB_MMSE
001FA5r 2  4C rr rr     	JMP	LAB_SNER		; do syntax error then warm start
001FA8r 2               
001FA8r 2               ; check for next, evaluate and return or exit
001FA8r 2               ; this is the routine that does most of the work
001FA8r 2               
001FA8r 2               LAB_PHFA
001FA8r 2  20 C2 00     	JSR	LAB_GBYT		; get next BASIC byte
001FABr 2  C9 2C        	CMP	#','			; is there more ?
001FADr 2  D0 ED        	BNE	LAB_MMEC		; if not go do end check
001FAFr 2               
001FAFr 2               					; push FAC1
001FAFr 2  20 rr rr     	JSR	LAB_27BA		; round FAC1
001FB2r 2  A5 B0        	LDA	FAC1_s		; get FAC1 sign
001FB4r 2  09 7F        	ORA	#$7F			; set all non sign bits
001FB6r 2  25 AD        	AND	FAC1_1		; AND FAC1 mantissa1 (AND in sign bit)
001FB8r 2  48           	PHA				; push on stack
001FB9r 2  A5 AE        	LDA	FAC1_2		; get FAC1 mantissa2
001FBBr 2  48           	PHA				; push on stack
001FBCr 2  A5 AF        	LDA	FAC1_3		; get FAC1 mantissa3
001FBEr 2  48           	PHA				; push on stack
001FBFr 2  A5 AC        	LDA	FAC1_e		; get FAC1 exponent
001FC1r 2  48           	PHA				; push on stack
001FC2r 2               
001FC2r 2  20 BC 00     	JSR	LAB_IGBY		; scan and get next BASIC byte (after ",")
001FC5r 2  20 rr rr     	JSR	LAB_EVNM		; evaluate expression and check is numeric,
001FC8r 2               					; else do type mismatch
001FC8r 2               
001FC8r 2               					; pop FAC2 (MAX/MIN expression so far)
001FC8r 2  68           	PLA				; pop exponent
001FC9r 2  85 B3        	STA	FAC2_e		; save FAC2 exponent
001FCBr 2  68           	PLA				; pop mantissa3
001FCCr 2  85 B6        	STA	FAC2_3		; save FAC2 mantissa3
001FCEr 2  68           	PLA				; pop mantissa1
001FCFr 2  85 B5        	STA	FAC2_2		; save FAC2 mantissa2
001FD1r 2  68           	PLA				; pop sign/mantissa1
001FD2r 2  85 B4        	STA	FAC2_1		; save FAC2 sign/mantissa1
001FD4r 2  85 B7        	STA	FAC2_s		; save FAC2 sign
001FD6r 2               
001FD6r 2               					; compare FAC1 with (packed) FAC2
001FD6r 2  A9 B3        	LDA	#<FAC2_e		; set pointer low byte to FAC2
001FD8r 2  A0 00        	LDY	#>FAC2_e		; set pointer high byte to FAC2
001FDAr 2  4C rr rr     	JMP	LAB_27F8		; compare FAC1 with FAC2 (AY) and return
001FDDr 2               					; returns A=$00 if FAC1 = (AY)
001FDDr 2               					; returns A=$01 if FAC1 > (AY)
001FDDr 2               					; returns A=$FF if FAC1 < (AY)
001FDDr 2               
001FDDr 2               ; perform WIDTH
001FDDr 2               
001FDDr 2               LAB_WDTH
001FDDr 2  60           	RTS
001FDEr 2  C9 2C        	CMP	#','			; is next byte ","
001FE0r 2  F0 1B        	BEQ	LAB_TBSZ		; if so do tab size
001FE2r 2               
001FE2r 2  20 rr rr     	JSR	LAB_GTBY		; get byte parameter
001FE5r 2  8A           	TXA				; copy width to A
001FE6r 2  F0 0A        	BEQ	LAB_NSTT		; branch if set for infinite line
001FE8r 2               
001FE8r 2  E0 10        	CPX	#$10			; else make min width = 16d
001FEAr 2  90 45        	BCC	TabErr		; if less do function call error and exit
001FECr 2               
001FECr 2               ; this next compare ensures that we can't exit WIDTH via an error leaving the
001FECr 2               ; tab size greater than the line length.
001FECr 2               
001FECr 2  E4 64        	CPX	TabSiz		; compare with tab size
001FEEr 2  B0 02        	BCS	LAB_NSTT		; branch if >= tab size
001FF0r 2               
001FF0r 2  86 64        	STX	TabSiz		; else make tab size = terminal width
001FF2r 2               LAB_NSTT
001FF2r 2  86 0F        	STX	TWidth		; set the terminal width
001FF4r 2  20 C2 00     	JSR	LAB_GBYT		; get BASIC byte back
001FF7r 2  F0 1A        	BEQ	WExit			; exit if no following
001FF9r 2               
001FF9r 2  C9 2C        	CMP	#','			; else is it ","
001FFBr 2  D0 A8        	BNE	LAB_MMSE		; if not do syntax error
001FFDr 2               
001FFDr 2               LAB_TBSZ
001FFDr 2  20 rr rr     	JSR	LAB_SGBY		; scan and get byte parameter
002000r 2  8A           	TXA				; copy TAB size
002001r 2  30 2E        	BMI	TabErr		; if >127 do function call error and exit
002003r 2               
002003r 2  E0 01        	CPX	#$01			; compare with min-1
002005r 2  90 2A        	BCC	TabErr		; if <=1 do function call error and exit
002007r 2               
002007r 2  A5 0F        	LDA	TWidth		; set flags for width
002009r 2  F0 06        	BEQ	LAB_SVTB		; skip check if infinite line
00200Br 2               
00200Br 2  E4 0F        	CPX	TWidth		; compare TAB with width
00200Dr 2  F0 02        	BEQ	LAB_SVTB		; ok if =
00200Fr 2               
00200Fr 2  B0 20        	BCS	TabErr		; branch if too big
002011r 2               
002011r 2               LAB_SVTB
002011r 2  86 64        	STX	TabSiz		; save TAB size
002013r 2               
002013r 2               ; calculate tab column limit from TAB size. The Iclim is set to the last tab
002013r 2               ; position on a line that still has at least one whole tab width between it
002013r 2               ; and the end of the line.
002013r 2               
002013r 2               WExit
002013r 2  A5 0F        	LDA	TWidth		; get width
002015r 2  F0 06        	BEQ	LAB_SULP		; branch if infinite line
002017r 2               
002017r 2  C5 64        	CMP	TabSiz		; compare with tab size
002019r 2  B0 03        	BCS	LAB_WDLP		; branch if >= tab size
00201Br 2               
00201Br 2  85 64        	STA	TabSiz		; else make tab size = terminal width
00201Dr 2               LAB_SULP
00201Dr 2  38           	SEC				; set carry for subtract
00201Er 2               LAB_WDLP
00201Er 2  E5 64        	SBC	TabSiz		; subtract tab size
002020r 2  B0 FC        	BCS	LAB_WDLP		; loop while no borrow
002022r 2               
002022r 2  65 64        	ADC	TabSiz		; add tab size back
002024r 2  18           	CLC				; clear carry for add
002025r 2  65 64        	ADC	TabSiz		; add tab size back again
002027r 2  85 10        	STA	Iclim			; save for now
002029r 2  A5 0F        	LDA	TWidth		; get width back
00202Br 2  38           	SEC				; set carry for subtract
00202Cr 2  E5 10        	SBC	Iclim			; subtract remainder
00202Er 2  85 10        	STA	Iclim			; save tab column limit
002030r 2               LAB_NOSQ
002030r 2  60           	RTS
002031r 2               
002031r 2               TabErr
002031r 2  4C rr rr     	JMP	LAB_FCER		; do function call error then warm start
002034r 2               
002034r 2               ; perform SQR()
002034r 2               
002034r 2               LAB_SQR
002034r 2  A5 B0        	LDA	FAC1_s		; get FAC1 sign
002036r 2  30 F9        	BMI	TabErr		; if -ve do function call error
002038r 2               
002038r 2  A5 AC        	LDA	FAC1_e		; get exponent
00203Ar 2  F0 F4        	BEQ	LAB_NOSQ		; if zero just return
00203Cr 2               
00203Cr 2               					; else do root
00203Cr 2  20 rr rr     	JSR	LAB_27AB		; round and copy FAC1 to FAC2
00203Fr 2  A9 00        	LDA	#$00			; clear A
002041r 2               
002041r 2  85 77        	STA	FACt_3		; clear remainder
002043r 2  85 76        	STA	FACt_2		; ..
002045r 2  85 75        	STA	FACt_1		; ..
002047r 2  85 78        	STA	TempB			; ..
002049r 2               
002049r 2  85 AF        	STA	FAC1_3		; clear root
00204Br 2  85 AE        	STA	FAC1_2		; ..
00204Dr 2  85 AD        	STA	FAC1_1		; ..
00204Fr 2               
00204Fr 2  A2 18        	LDX	#$18			; 24 pairs of bits to do
002051r 2  A5 B3        	LDA	FAC2_e		; get exponent
002053r 2  4A           	LSR				; check odd/even
002054r 2  B0 0E        	BCS	LAB_SQE2		; if odd only 1 shift first time
002056r 2               
002056r 2               LAB_SQE1
002056r 2  06 B6        	ASL	FAC2_3		; shift highest bit of number ..
002058r 2  26 B5        	ROL	FAC2_2		; ..
00205Ar 2  26 B4        	ROL	FAC2_1		; ..
00205Cr 2  26 77        	ROL	FACt_3		; .. into remainder
00205Er 2  26 76        	ROL	FACt_2		; ..
002060r 2  26 75        	ROL	FACt_1		; ..
002062r 2  26 78        	ROL	TempB			; .. never overflows
002064r 2               LAB_SQE2
002064r 2  06 B6        	ASL	FAC2_3		; shift highest bit of number ..
002066r 2  26 B5        	ROL	FAC2_2		; ..
002068r 2  26 B4        	ROL	FAC2_1		; ..
00206Ar 2  26 77        	ROL	FACt_3		; .. into remainder
00206Cr 2  26 76        	ROL	FACt_2		; ..
00206Er 2  26 75        	ROL	FACt_1		; ..
002070r 2  26 78        	ROL	TempB			; .. never overflows
002072r 2               
002072r 2  06 AF        	ASL	FAC1_3		; root = root * 2
002074r 2  26 AE        	ROL	FAC1_2		; ..
002076r 2  26 AD        	ROL	FAC1_1		; .. never overflows
002078r 2               
002078r 2  A5 AF        	LDA	FAC1_3		; get root low byte
00207Ar 2  2A           	ROL				; *2
00207Br 2  85 5B        	STA	Temp3			; save partial low byte
00207Dr 2  A5 AE        	LDA	FAC1_2		; get root low mid byte
00207Fr 2  2A           	ROL				; *2
002080r 2  85 5C        	STA	Temp3+1		; save partial low mid byte
002082r 2  A5 AD        	LDA	FAC1_1		; get root high mid byte
002084r 2  2A           	ROL				; *2
002085r 2  85 5D        	STA	Temp3+2		; save partial high mid byte
002087r 2  A9 00        	LDA	#$00			; get root high byte (always $00)
002089r 2  2A           	ROL				; *2
00208Ar 2  85 5E        	STA	Temp3+3		; save partial high byte
00208Cr 2               
00208Cr 2               					; carry clear for subtract +1
00208Cr 2  A5 77        	LDA	FACt_3		; get remainder low byte
00208Er 2  E5 5B        	SBC	Temp3			; subtract partial low byte
002090r 2  85 5B        	STA	Temp3			; save partial low byte
002092r 2               
002092r 2  A5 76        	LDA	FACt_2		; get remainder low mid byte
002094r 2  E5 5C        	SBC	Temp3+1		; subtract partial low mid byte
002096r 2  85 5C        	STA	Temp3+1		; save partial low mid byte
002098r 2               
002098r 2  A5 75        	LDA	FACt_1		; get remainder high mid byte
00209Ar 2  E5 5D        	SBC	Temp3+2		; subtract partial high mid byte
00209Cr 2  A8           	TAY				; copy partial high mid byte
00209Dr 2               
00209Dr 2  A5 78        	LDA	TempB			; get remainder high byte
00209Fr 2  E5 5E        	SBC	Temp3+3		; subtract partial high byte
0020A1r 2  90 0E        	BCC	LAB_SQNS		; skip sub if remainder smaller
0020A3r 2               
0020A3r 2  85 78        	STA	TempB			; save remainder high byte
0020A5r 2               
0020A5r 2  84 75        	STY	FACt_1		; save remainder high mid byte
0020A7r 2               
0020A7r 2  A5 5C        	LDA	Temp3+1		; get remainder low mid byte
0020A9r 2  85 76        	STA	FACt_2		; save remainder low mid byte
0020ABr 2               
0020ABr 2  A5 5B        	LDA	Temp3			; get partial low byte
0020ADr 2  85 77        	STA	FACt_3		; save remainder low byte
0020AFr 2               
0020AFr 2  E6 AF        	INC	FAC1_3		; increment root low byte (never any rollover)
0020B1r 2               LAB_SQNS
0020B1r 2  CA           	DEX				; decrement bit pair count
0020B2r 2  D0 A2        	BNE	LAB_SQE1		; loop if not all done
0020B4r 2               
0020B4r 2  38           	SEC				; set carry for subtract
0020B5r 2  A5 B3        	LDA	FAC2_e		; get exponent
0020B7r 2  E9 80        	SBC	#$80			; normalise
0020B9r 2  6A           	ROR				; /2 and re-bias to $80
0020BAr 2  69 00        	ADC	#$00			; add bit zero back in (allow for half shift)
0020BCr 2  85 AC        	STA	FAC1_e		; save it
0020BEr 2  4C rr rr     	JMP	LAB_24D5		; normalise FAC1 and return
0020C1r 2               
0020C1r 2               ; perform VARPTR()
0020C1r 2               
0020C1r 2               LAB_VARPTR
0020C1r 2  20 BC 00     	JSR	LAB_IGBY		; increment and scan memory
0020C4r 2  20 rr rr     	JSR	LAB_GVAR		; get var address
0020C7r 2  20 rr rr     	JSR	LAB_1BFB		; scan for ")" , else do syntax error then warm start
0020CAr 2  A4 95        	LDY	Cvaral		; get var address low byte
0020CCr 2  A5 96        	LDA	Cvarah		; get var address high byte
0020CEr 2  4C rr rr     	JMP	LAB_AYFC		; save and convert integer AY to FAC1 and return
0020D1r 2               
0020D1r 2               ; perform PI
0020D1r 2               
0020D1r 2               LAB_PI
0020D1r 2  A9 rr        	LDA	#<LAB_2C7C		; set (2*pi) pointer low byte
0020D3r 2  A0 rr        	LDY	#>LAB_2C7C		; set (2*pi) pointer high byte
0020D5r 2  20 rr rr     	JSR	LAB_UFAC		; unpack memory (AY) into FAC1
0020D8r 2  C6 AC        	DEC	FAC1_e		; make result = PI
0020DAr 2  60           	RTS
0020DBr 2               
0020DBr 2               ; perform TWOPI
0020DBr 2               
0020DBr 2               LAB_TWOPI
0020DBr 2  A9 rr        	LDA	#<LAB_2C7C		; set (2*pi) pointer low byte
0020DDr 2  A0 rr        	LDY	#>LAB_2C7C		; set (2*pi) pointer high byte
0020DFr 2  4C rr rr     	JMP	LAB_UFAC		; unpack memory (AY) into FAC1 and return
0020E2r 2               
0020E2r 2               ; system dependant i/o vectors
0020E2r 2               ; these are in RAM and are set by the monitor at start-up
0020E2r 2               
0020E2r 2               V_INPT
0020E2r 2  6C 05 03     	JMP	(VEC_IN)		; non halting scan input device
0020E5r 2               V_OUTP
0020E5r 2  6C 07 03     	JMP	(VEC_OUT)		; send byte to output device
0020E8r 2               V_LOAD
0020E8r 2  6C 09 03     	JMP	(VEC_LD)		; load BASIC program
0020EBr 2               V_SAVE
0020EBr 2  6C 0B 03     	JMP	(VEC_SV)		; save BASIC program
0020EEr 2               
0020EEr 2               ; The rest are tables messages and code for RAM
0020EEr 2               
0020EEr 2               ; the rest of the code is tables and BASIC start-up code
0020EEr 2               
0020EEr 2               PG2_TABS
0020EEr 2  00           	.byte	$00			; ctrl-c flag		-	$00 = enabled
0020EFr 2  00           	.byte	$00			; ctrl-c byte		-	GET needs this
0020F0r 2  00           	.byte	$00			; ctrl-c byte timeout	-	GET needs this
0020F1r 2  rr rr        	.word	CTRLC			; ctrl c check vector
0020F3r 2               ;	.word	xxxx			; non halting key input	-	monitor to set this
0020F3r 2               ;	.word	xxxx			; output vector		-	monitor to set this
0020F3r 2               ;	.word	xxxx			; load vector		-	monitor to set this
0020F3r 2               ;	.word	xxxx			; save vector		-	monitor to set this
0020F3r 2               PG2_TABE
0020F3r 2               
0020F3r 2               ; character get subroutine for zero page
0020F3r 2               
0020F3r 2               ; For a 1.8432MHz 6502 including the JSR and RTS
0020F3r 2               ; fastest (>=":")	=  29 cycles =  15.7uS
0020F3r 2               ; slowest (<":")	=  40 cycles =  21.7uS
0020F3r 2               ; space skip	= +21 cycles = +11.4uS
0020F3r 2               ; inc across page	=  +4 cycles =  +2.2uS
0020F3r 2               
0020F3r 2               ; the target address for the LDA at LAB_2CF4 becomes the BASIC execute pointer once the
0020F3r 2               ; block is copied to it's destination, any non zero page address will do at assembly
0020F3r 2               ; time, to assemble a three byte instruction.
0020F3r 2               
0020F3r 2               ; page 0 initialisation table from $BC
0020F3r 2               ; increment and scan memory
0020F3r 2               
0020F3r 2               LAB_2CEE
0020F3r 2  E6 C3        	INC	Bpntrl		; increment BASIC execute pointer low byte
0020F5r 2  D0 02        	BNE	LAB_2CF4		; branch if no carry
0020F7r 2               					; else
0020F7r 2  E6 C4        	INC	Bpntrh		; increment BASIC execute pointer high byte
0020F9r 2               
0020F9r 2               ; page 0 initialisation table from $C2
0020F9r 2               ; scan memory
0020F9r 2               
0020F9r 2               LAB_2CF4
0020F9r 2  AD FF FF     	LDA	$FFFF			; get byte to scan (addr set by call routine)
0020FCr 2  C9 AC        	CMP	#TK_ELSE		; compare with the token for ELSE
0020FEr 2  F0 0E        	BEQ	LAB_2D05		; exit if ELSE, not numeric, carry set
002100r 2               
002100r 2  C9 3A        	CMP	#':'			; compare with ":"
002102r 2  B0 0A        	BCS	LAB_2D05		; exit if >= ":", not numeric, carry set
002104r 2               
002104r 2  C9 20        	CMP	#' '			; compare with " "
002106r 2  F0 EB        	BEQ	LAB_2CEE		; if " " go do next
002108r 2               
002108r 2  38           	SEC				; set carry for SBC
002109r 2  E9 30        	SBC	#'0'			; subtract "0"
00210Br 2  38           	SEC				; set carry for SBC
00210Cr 2  E9 D0        	SBC	#$D0			; subtract -"0"
00210Er 2               					; clear carry if byte = "0"-"9"
00210Er 2               LAB_2D05
00210Er 2  60           	RTS
00210Fr 2               
00210Fr 2               ; page zero initialisation table $00-$12 inclusive
00210Fr 2               
00210Fr 2               StrTab
00210Fr 2  4C           	.byte	$4C			; JMP opcode
002110r 2  rr rr        	.word LAB_COLD		; initial warm start vector (cold start)
002112r 2               
002112r 2  00           	.byte	$00			; these bytes are not used by BASIC
002113r 2  00 00        	.word	$0000			;
002115r 2  00 00        	.word	$0000			;
002117r 2  00 00        	.word	$0000			;
002119r 2               
002119r 2  4C           	.byte	$4C			; JMP opcode
00211Ar 2  rr rr        	.word	LAB_FCER		; initial user function vector ("Function call" error)
00211Cr 2  00           	.byte	$00			; default NULL count
00211Dr 2  00           	.byte	$00			; clear terminal position
00211Er 2  00           	.byte	$00			; default terminal width byte
00211Fr 2  F2           	.byte	$F2			; default limit for TAB = 14
002120r 2  00 04        	.word	Ram_base		; start of user RAM
002122r 2               EndTab
002122r 2               
002122r 2               LAB_SMSG
002122r 2  20 42 79 74  	.byte	" Bytes",$0D,$0A,$00
002126r 2  65 73 0D 0A  
00212Ar 2  00           
00212Br 2               
00212Br 2               ; numeric constants and series
00212Br 2               
00212Br 2               					; constants and series for LOG(n)
00212Br 2               LAB_25A0
00212Br 2  02           	.byte	$02			; counter
00212Cr 2  80 19 56 62  	.byte	$80,$19,$56,$62	; 0.59898
002130r 2  80 76 22 F3  	.byte	$80,$76,$22,$F3	; 0.96147
002134r 2               ;##	.byte	$80,$76,$22,$F1	; 0.96147
002134r 2  82 38 AA 40  	.byte	$82,$38,$AA,$40	; 2.88539
002138r 2               ;##	.byte	$82,$38,$AA,$45	; 2.88539
002138r 2               
002138r 2               LAB_25AD
002138r 2  80 35 04 F3  	.byte	$80,$35,$04,$F3	; 0.70711	1/root 2
00213Cr 2               LAB_25B1
00213Cr 2  81 35 04 F3  	.byte	$81,$35,$04,$F3	; 1.41421	root 2
002140r 2               LAB_25B5
002140r 2  80 80 00 00  	.byte	$80,$80,$00,$00	; -0.5
002144r 2               LAB_25B9
002144r 2  80 31 72 18  	.byte	$80,$31,$72,$18	; 0.69315	LOG(2)
002148r 2               
002148r 2               					; numeric PRINT constants
002148r 2               LAB_2947
002148r 2  91 43 4F F8  	.byte	$91,$43,$4F,$F8	; 99999.9375 (max value with at least one decimal)
00214Cr 2               LAB_294B
00214Cr 2  94 74 23 F7  	.byte	$94,$74,$23,$F7	; 999999.4375 (max value before scientific notation)
002150r 2               LAB_294F
002150r 2  94 74 24 00  	.byte	$94,$74,$24,$00	; 1000000
002154r 2               
002154r 2               					; EXP(n) constants and series
002154r 2               LAB_2AFA
002154r 2  81 38 AA 3B  	.byte	$81,$38,$AA,$3B	; 1.4427	(1/LOG base 2 e)
002158r 2               LAB_2AFE
002158r 2  06           	.byte	$06			; counter
002159r 2  74 63 90 8C  	.byte	$74,$63,$90,$8C	; 2.17023e-4
00215Dr 2  77 23 0C AB  	.byte	$77,$23,$0C,$AB	; 0.00124
002161r 2  7A 1E 94 00  	.byte	$7A,$1E,$94,$00	; 0.00968
002165r 2  7C 63 42 80  	.byte	$7C,$63,$42,$80	; 0.05548
002169r 2  7E 75 FE D0  	.byte	$7E,$75,$FE,$D0	; 0.24023
00216Dr 2  80 31 72 15  	.byte	$80,$31,$72,$15	; 0.69315
002171r 2  81 00 00 00  	.byte	$81,$00,$00,$00	; 1.00000
002175r 2               
002175r 2               ;##	.byte	$07			; counter
002175r 2               ;##	.byte	$74,$94,$2E,$40	; -1/7! (-1/5040)
002175r 2               ;##	.byte	$77,$2E,$4F,$70	;  1/6! ( 1/720)
002175r 2               ;##	.byte	$7A,$88,$02,$6E	; -1/5! (-1/120)
002175r 2               ;##	.byte	$7C,$2A,$A0,$E6	;  1/4! ( 1/24)
002175r 2               ;##	.byte	$7E,$AA,$AA,$50	; -1/3! (-1/6)
002175r 2               ;##	.byte	$7F,$7F,$FF,$FF	;  1/2! ( 1/2)
002175r 2               ;##	.byte	$81,$80,$00,$00	; -1/1! (-1/1)
002175r 2               ;##	.byte	$81,$00,$00,$00	;  1/0! ( 1/1)
002175r 2               
002175r 2               					; trigonometric constants and series
002175r 2               LAB_2C78
002175r 2  81 49 0F DB  	.byte	$81,$49,$0F,$DB	; 1.570796371 (pi/2) as floating #
002179r 2               LAB_2C84
002179r 2  04           	.byte	$04			; counter
00217Ar 2  86 1E D7 FB  	.byte	$86,$1E,$D7,$FB	; 39.7109
00217Er 2               ;##	.byte	$86,$1E,$D7,$BA	; 39.7109
00217Er 2  87 99 26 65  	.byte	$87,$99,$26,$65	;-76.575
002182r 2               ;##	.byte	$87,$99,$26,$64	;-76.575
002182r 2  87 23 34 58  	.byte	$87,$23,$34,$58	; 81.6022
002186r 2  86 A5 5D E1  	.byte	$86,$A5,$5D,$E1	;-41.3417
00218Ar 2               ;##	.byte	$86,$A5,$5D,$E0	;-41.3417
00218Ar 2               LAB_2C7C
00218Ar 2  83 49 0F DB  	.byte	$83,$49,$0F,$DB	; 6.28319 (2*pi) as floating #
00218Er 2               ;##	.byte	$83,$49,$0F,$DA	; 6.28319 (2*pi) as floating #
00218Er 2               
00218Er 2               LAB_2CC9
00218Er 2  08           	.byte	$08			; counter
00218Fr 2  78 3A C5 37  	.byte	$78,$3A,$C5,$37	; 0.00285
002193r 2  7B 83 A2 5C  	.byte	$7B,$83,$A2,$5C	;-0.0160686
002197r 2  7C 2E DD 4D  	.byte	$7C,$2E,$DD,$4D	; 0.0426915
00219Br 2  7D 99 B0 1E  	.byte	$7D,$99,$B0,$1E	;-0.0750429
00219Fr 2  7D 59 ED 24  	.byte	$7D,$59,$ED,$24	; 0.106409
0021A3r 2  7E 91 72 00  	.byte	$7E,$91,$72,$00	;-0.142036
0021A7r 2  7E 4C B9 73  	.byte	$7E,$4C,$B9,$73	; 0.199926
0021ABr 2  7F AA AA 53  	.byte	$7F,$AA,$AA,$53	;-0.333331
0021AFr 2               
0021AFr 2               ;##	.byte	$08			; counter
0021AFr 2               ;##	.byte	$78,$3B,$D7,$4A	; 1/17
0021AFr 2               ;##	.byte	$7B,$84,$6E,$02	;-1/15
0021AFr 2               ;##	.byte	$7C,$2F,$C1,$FE	; 1/13
0021AFr 2               ;##	.byte	$7D,$9A,$31,$74	;-1/11
0021AFr 2               ;##	.byte	$7D,$5A,$3D,$84	; 1/9
0021AFr 2               ;##	.byte	$7E,$91,$7F,$C8	;-1/7
0021AFr 2               ;##	.byte	$7E,$4C,$BB,$E4	; 1/5
0021AFr 2               ;##	.byte	$7F,$AA,$AA,$6C	;-1/3
0021AFr 2               
0021AFr 2               LAB_1D96	= *+1			; $00,$00 used for undefined variables
0021AFr 2               LAB_259C
0021AFr 2  81 00 00 00  	.byte	$81,$00,$00,$00	; 1.000000, used for INC
0021B3r 2               LAB_2AFD
0021B3r 2  81 80 00 00  	.byte	$81,$80,$00,$00	; -1.00000, used for DEC. must be on the same page as +1.00
0021B7r 2               
0021B7r 2               					; misc constants
0021B7r 2               LAB_1DF7
0021B7r 2  90           	.byte	$90			;-32768 (uses first three bytes from 0.5)
0021B8r 2               LAB_2A96
0021B8r 2  80 00 00 00  	.byte	$80,$00,$00,$00	; 0.5
0021BCr 2               LAB_2C80
0021BCr 2  7F 00 00 00  	.byte	$7F,$00,$00,$00	; 0.25
0021C0r 2               LAB_26B5
0021C0r 2  84 20 00 00  	.byte	$84,$20,$00,$00	; 10.0000 divide by 10 constant
0021C4r 2               
0021C4r 2               ; This table is used in converting numbers to ASCII.
0021C4r 2               
0021C4r 2               LAB_2A9A
0021C4r 2               LAB_2A9B = LAB_2A9A+1
0021C4r 2               LAB_2A9C = LAB_2A9B+1
0021C4r 2  FE 79 60     	.byte	$FE,$79,$60		; -100000
0021C7r 2  00 27 10     	.byte	$00,$27,$10		; 10000
0021CAr 2  FF FC 18     	.byte	$FF,$FC,$18		; -1000
0021CDr 2  00 00 64     	.byte	$00,$00,$64		; 100
0021D0r 2  FF FF F6     	.byte	$FF,$FF,$F6		; -10
0021D3r 2  00 00 01     	.byte	$00,$00,$01		; 1
0021D6r 2               
0021D6r 2               LAB_CTBL
0021D6r 2  rr rr        	.word	LAB_END-1		; END
0021D8r 2  rr rr        	.word	LAB_FOR-1		; FOR
0021DAr 2  rr rr        	.word	LAB_NEXT-1		; NEXT
0021DCr 2  rr rr        	.word	LAB_DATA-1		; DATA
0021DEr 2  rr rr        	.word	LAB_INPUT-1		; INPUT
0021E0r 2  rr rr        	.word	LAB_DIM-1		; DIM
0021E2r 2  rr rr        	.word	LAB_READ-1		; READ
0021E4r 2  rr rr        	.word	LAB_LET-1		; LET
0021E6r 2  rr rr        	.word	LAB_DEC-1		; DEC			new command
0021E8r 2  rr rr        	.word	LAB_GOTO-1		; GOTO
0021EAr 2  rr rr        	.word	LAB_RUN-1		; RUN
0021ECr 2  rr rr        	.word	LAB_IF-1		; IF
0021EEr 2  rr rr        	.word	LAB_RESTORE-1	; RESTORE		modified command
0021F0r 2  rr rr        	.word	LAB_GOSUB-1		; GOSUB
0021F2r 2  rr rr        	.word	LAB_RETIRQ-1	; RETIRQ		new command
0021F4r 2  rr rr        	.word	LAB_RETNMI-1	; RETNMI		new command
0021F6r 2  rr rr        	.word	LAB_RETURN-1	; RETURN
0021F8r 2  rr rr        	.word	LAB_REM-1		; REM
0021FAr 2  rr rr        	.word	LAB_STOP-1		; STOP
0021FCr 2  rr rr        	.word	LAB_ON-1		; ON			modified command
0021FEr 2  rr rr        	.word	LAB_NULL-1		; NULL		modified command
002200r 2  rr rr        	.word	LAB_INC-1		; INC			new command
002202r 2  rr rr        	.word	LAB_WAIT-1		; WAIT
002204r 2  rr rr        	.word	V_LOAD-1		; LOAD
002206r 2  rr rr        	.word	V_SAVE-1		; SAVE
002208r 2  rr rr        	.word	LAB_DEF-1		; DEF
00220Ar 2  rr rr        	.word	LAB_POKE-1		; POKE
00220Cr 2  rr rr        	.word	LAB_DOKE-1		; DOKE		new command
00220Er 2  rr rr        	.word	LAB_CALL-1		; CALL		new command
002210r 2  rr rr        	.word	LAB_DO-1		; DO			new command
002212r 2  rr rr        	.word	LAB_LOOP-1		; LOOP		new command
002214r 2  rr rr        	.word	LAB_PRINT-1		; PRINT
002216r 2  rr rr        	.word	LAB_CONT-1		; CONT
002218r 2  rr rr        	.word	LAB_LIST-1		; LIST
00221Ar 2  rr rr        	.word	LAB_CLEAR-1		; CLEAR
00221Cr 2  rr rr        	.word	LAB_NEW-1		; NEW
00221Er 2  rr rr        	.word	LAB_WDTH-1		; WIDTH		new command
002220r 2  rr rr        	.word	LAB_GET-1		; GET			new command
002222r 2  rr rr        	.word	LAB_SWAP-1		; SWAP		new command
002224r 2  rr rr        	.word	LAB_BITSET-1	; BITSET		new command
002226r 2  rr rr        	.word	LAB_BITCLR-1	; BITCLR		new command
002228r 2  rr rr        	.word	LAB_IRQ-1		; IRQ			new command
00222Ar 2  rr rr        	.word	LAB_NMI-1		; NMI			new command
00222Cr 2               
00222Cr 2               ; function pre process routine table
00222Cr 2               
00222Cr 2               LAB_FTPL
00222Cr 2               LAB_FTPM	= LAB_FTPL+$01
00222Cr 2  rr rr        	.word	LAB_PPFN-1		; SGN(n)	process numeric expression in ()
00222Er 2  rr rr        	.word	LAB_PPFN-1		; INT(n)		"
002230r 2  rr rr        	.word	LAB_PPFN-1		; ABS(n)		"
002232r 2  rr rr        	.word	LAB_EVEZ-1		; USR(x)	process any expression
002234r 2  rr rr        	.word	LAB_1BF7-1		; FRE(x)		"
002236r 2  rr rr        	.word	LAB_1BF7-1		; POS(x)		"
002238r 2  rr rr        	.word	LAB_PPFN-1		; SQR(n)	process numeric expression in ()
00223Ar 2  rr rr        	.word	LAB_PPFN-1		; RND(n)		"
00223Cr 2  rr rr        	.word	LAB_PPFN-1		; LOG(n)		"
00223Er 2  rr rr        	.word	LAB_PPFN-1		; EXP(n)		"
002240r 2  rr rr        	.word	LAB_PPFN-1		; COS(n)		"
002242r 2  rr rr        	.word	LAB_PPFN-1		; SIN(n)		"
002244r 2  rr rr        	.word	LAB_PPFN-1		; TAN(n)		"
002246r 2  rr rr        	.word	LAB_PPFN-1		; ATN(n)		"
002248r 2  rr rr        	.word	LAB_PPFN-1		; PEEK(n)		"
00224Ar 2  rr rr        	.word	LAB_PPFN-1		; DEEK(n)		"
00224Cr 2  00 00        	.word	$0000			; SADD()	none
00224Er 2  rr rr        	.word	LAB_PPFS-1		; LEN($)	process string expression in ()
002250r 2  rr rr        	.word	LAB_PPFN-1		; STR$(n)	process numeric expression in ()
002252r 2  rr rr        	.word	LAB_PPFS-1		; VAL($)	process string expression in ()
002254r 2  rr rr        	.word	LAB_PPFS-1		; ASC($)		"
002256r 2  rr rr        	.word	LAB_PPFS-1		; UCASE$($)		"
002258r 2  rr rr        	.word	LAB_PPFS-1		; LCASE$($)		"
00225Ar 2  rr rr        	.word	LAB_PPFN-1		; CHR$(n)	process numeric expression in ()
00225Cr 2  rr rr        	.word	LAB_BHSS-1		; HEX$(n)		"
00225Er 2  rr rr        	.word	LAB_BHSS-1		; BIN$(n)		"
002260r 2  00 00        	.word	$0000			; BITTST()	none
002262r 2  rr rr        	.word	LAB_MMPP-1		; MAX()	process numeric expression
002264r 2  rr rr        	.word	LAB_MMPP-1		; MIN()		"
002266r 2  rr rr        	.word	LAB_PPBI-1		; PI		advance pointer
002268r 2  rr rr        	.word	LAB_PPBI-1		; TWOPI		"
00226Ar 2  00 00        	.word	$0000			; VARPTR()	none
00226Cr 2  rr rr        	.word	LAB_LRMS-1		; LEFT$()	process string expression
00226Er 2  rr rr        	.word	LAB_LRMS-1		; RIGHT$()		"
002270r 2  rr rr        	.word	LAB_LRMS-1		; MID$()		"
002272r 2               
002272r 2               ; action addresses for functions
002272r 2               
002272r 2               LAB_FTBL
002272r 2               LAB_FTBM	= LAB_FTBL+$01
002272r 2  rr rr        	.word	LAB_SGN-1		; SGN()
002274r 2  rr rr        	.word	LAB_INT-1		; INT()
002276r 2  rr rr        	.word	LAB_ABS-1		; ABS()
002278r 2  rr rr        	.word	LAB_USR-1		; USR()
00227Ar 2  rr rr        	.word	LAB_FRE-1		; FRE()
00227Cr 2  rr rr        	.word	LAB_POS-1		; POS()
00227Er 2  rr rr        	.word	LAB_SQR-1		; SQR()
002280r 2  rr rr        	.word	LAB_RND-1		; RND()		modified function
002282r 2  rr rr        	.word	LAB_LOG-1		; LOG()
002284r 2  rr rr        	.word	LAB_EXP-1		; EXP()
002286r 2  rr rr        	.word	LAB_COS-1		; COS()
002288r 2  rr rr        	.word	LAB_SIN-1		; SIN()
00228Ar 2  rr rr        	.word	LAB_TAN-1		; TAN()
00228Cr 2  rr rr        	.word	LAB_ATN-1		; ATN()
00228Er 2  rr rr        	.word	LAB_PEEK-1		; PEEK()
002290r 2  rr rr        	.word	LAB_DEEK-1		; DEEK()		new function
002292r 2  rr rr        	.word	LAB_SADD-1		; SADD()		new function
002294r 2  rr rr        	.word	LAB_LENS-1		; LEN()
002296r 2  rr rr        	.word	LAB_STRS-1		; STR$()
002298r 2  rr rr        	.word	LAB_VAL-1		; VAL()
00229Ar 2  rr rr        	.word	LAB_ASC-1		; ASC()
00229Cr 2  rr rr        	.word	LAB_UCASE-1		; UCASE$()		new function
00229Er 2  rr rr        	.word	LAB_LCASE-1		; LCASE$()		new function
0022A0r 2  rr rr        	.word	LAB_CHRS-1		; CHR$()
0022A2r 2  rr rr        	.word	LAB_HEXS-1		; HEX$()		new function
0022A4r 2  rr rr        	.word	LAB_BINS-1		; BIN$()		new function
0022A6r 2  rr rr        	.word	LAB_BTST-1		; BITTST()		new function
0022A8r 2  rr rr        	.word	LAB_MAX-1		; MAX()		new function
0022AAr 2  rr rr        	.word	LAB_MIN-1		; MIN()		new function
0022ACr 2  rr rr        	.word	LAB_PI-1		; PI			new function
0022AEr 2  rr rr        	.word	LAB_TWOPI-1		; TWOPI		new function
0022B0r 2  rr rr        	.word	LAB_VARPTR-1	; VARPTR()		new function
0022B2r 2  rr rr        	.word	LAB_LEFT-1		; LEFT$()
0022B4r 2  rr rr        	.word	LAB_RIGHT-1		; RIGHT$()
0022B6r 2  rr rr        	.word	LAB_MIDS-1		; MID$()
0022B8r 2               
0022B8r 2               ; hierarchy and action addresses for operator
0022B8r 2               
0022B8r 2               LAB_OPPT
0022B8r 2  79           	.byte	$79			; +
0022B9r 2  rr rr        	.word	LAB_ADD-1
0022BBr 2  79           	.byte	$79			; -
0022BCr 2  rr rr        	.word	LAB_SUBTRACT-1
0022BEr 2  7B           	.byte	$7B			; *
0022BFr 2  rr rr        	.word	LAB_MULTIPLY-1
0022C1r 2  7B           	.byte	$7B			; /
0022C2r 2  rr rr        	.word	LAB_DIVIDE-1
0022C4r 2  7F           	.byte	$7F			; ^
0022C5r 2  rr rr        	.word	LAB_POWER-1
0022C7r 2  50           	.byte	$50			; AND
0022C8r 2  rr rr        	.word	LAB_AND-1
0022CAr 2  46           	.byte	$46			; EOR			new operator
0022CBr 2  rr rr        	.word	LAB_EOR-1
0022CDr 2  46           	.byte	$46			; OR
0022CEr 2  rr rr        	.word	LAB_OR-1
0022D0r 2  56           	.byte	$56			; >>			new operator
0022D1r 2  rr rr        	.word	LAB_RSHIFT-1
0022D3r 2  56           	.byte	$56			; <<			new operator
0022D4r 2  rr rr        	.word	LAB_LSHIFT-1
0022D6r 2  7D           	.byte	$7D			; >
0022D7r 2  rr rr        	.word	LAB_GTHAN-1
0022D9r 2  5A           	.byte	$5A			; =
0022DAr 2  rr rr        	.word	LAB_EQUAL-1
0022DCr 2  64           	.byte	$64			; <
0022DDr 2  rr rr        	.word	LAB_LTHAN-1
0022DFr 2               
0022DFr 2               ; keywords start with ..
0022DFr 2               ; this is the first character table and must be in alphabetic order
0022DFr 2               
0022DFr 2               TAB_1STC
0022DFr 2  2A           	.byte	"*"
0022E0r 2  2B           	.byte	"+"
0022E1r 2  2D           	.byte	"-"
0022E2r 2  2F           	.byte	"/"
0022E3r 2  3C           	.byte	"<"
0022E4r 2  3D           	.byte	"="
0022E5r 2  3E           	.byte	">"
0022E6r 2  3F           	.byte	"?"
0022E7r 2  41           	.byte	"A"
0022E8r 2  42           	.byte	"B"
0022E9r 2  43           	.byte	"C"
0022EAr 2  44           	.byte	"D"
0022EBr 2  45           	.byte	"E"
0022ECr 2  46           	.byte	"F"
0022EDr 2  47           	.byte	"G"
0022EEr 2  48           	.byte	"H"
0022EFr 2  49           	.byte	"I"
0022F0r 2  4C           	.byte	"L"
0022F1r 2  4D           	.byte	"M"
0022F2r 2  4E           	.byte	"N"
0022F3r 2  4F           	.byte	"O"
0022F4r 2  50           	.byte	"P"
0022F5r 2  52           	.byte	"R"
0022F6r 2  53           	.byte	"S"
0022F7r 2  54           	.byte	"T"
0022F8r 2  55           	.byte	"U"
0022F9r 2  56           	.byte	"V"
0022FAr 2  57           	.byte	"W"
0022FBr 2  5E           	.byte	"^"
0022FCr 2  00           	.byte	$00			; table terminator
0022FDr 2               
0022FDr 2               ; pointers to keyword tables
0022FDr 2               
0022FDr 2               TAB_CHRT
0022FDr 2  rr rr        	.word	TAB_STAR		; table for "*"
0022FFr 2  rr rr        	.word	TAB_PLUS		; table for "+"
002301r 2  rr rr        	.word	TAB_MNUS		; table for "-"
002303r 2  rr rr        	.word	TAB_SLAS		; table for "/"
002305r 2  rr rr        	.word	TAB_LESS		; table for "<"
002307r 2  rr rr        	.word	TAB_EQUL		; table for "="
002309r 2  rr rr        	.word	TAB_MORE		; table for ">"
00230Br 2  rr rr        	.word	TAB_QEST		; table for "?"
00230Dr 2  rr rr        	.word	TAB_ASCA		; table for "A"
00230Fr 2  rr rr        	.word	TAB_ASCB		; table for "B"
002311r 2  rr rr        	.word	TAB_ASCC		; table for "C"
002313r 2  rr rr        	.word	TAB_ASCD		; table for "D"
002315r 2  rr rr        	.word	TAB_ASCE		; table for "E"
002317r 2  rr rr        	.word	TAB_ASCF		; table for "F"
002319r 2  rr rr        	.word	TAB_ASCG		; table for "G"
00231Br 2  rr rr        	.word	TAB_ASCH		; table for "H"
00231Dr 2  rr rr        	.word	TAB_ASCI		; table for "I"
00231Fr 2  rr rr        	.word	TAB_ASCL		; table for "L"
002321r 2  rr rr        	.word	TAB_ASCM		; table for "M"
002323r 2  rr rr        	.word	TAB_ASCN		; table for "N"
002325r 2  rr rr        	.word	TAB_ASCO		; table for "O"
002327r 2  rr rr        	.word	TAB_ASCP		; table for "P"
002329r 2  rr rr        	.word	TAB_ASCR		; table for "R"
00232Br 2  rr rr        	.word	TAB_ASCS		; table for "S"
00232Dr 2  rr rr        	.word	TAB_ASCT		; table for "T"
00232Fr 2  rr rr        	.word	TAB_ASCU		; table for "U"
002331r 2  rr rr        	.word	TAB_ASCV		; table for "V"
002333r 2  rr rr        	.word	TAB_ASCW		; table for "W"
002335r 2  rr rr        	.word	TAB_POWR		; table for "^"
002337r 2               
002337r 2               ; tables for each start character, note if a longer keyword with the same start
002337r 2               ; letters as a shorter one exists then it must come first, else the list is in
002337r 2               ; alphabetical order as follows ..
002337r 2               
002337r 2               ; [keyword,token
002337r 2               ; [keyword,token]]
002337r 2               ; end marker (#$00)
002337r 2               
002337r 2               TAB_STAR
002337r 2  B8 00        	.byte TK_MUL,$00		; *
002339r 2               TAB_PLUS
002339r 2  B6 00        	.byte TK_PLUS,$00		; +
00233Br 2               TAB_MNUS
00233Br 2  B7 00        	.byte TK_MINUS,$00	; -
00233Dr 2               TAB_SLAS
00233Dr 2  B9 00        	.byte TK_DIV,$00		; /
00233Fr 2               TAB_LESS
00233Fr 2               LBB_LSHIFT
00233Fr 2  3C BF        	.byte	"<",TK_LSHIFT	; <<	note - "<<" must come before "<"
002341r 2  C2           	.byte TK_LT			; <
002342r 2  00           	.byte	$00
002343r 2               TAB_EQUL
002343r 2  C1 00        	.byte TK_EQUAL,$00	; =
002345r 2               TAB_MORE
002345r 2               LBB_RSHIFT
002345r 2  3E BE        	.byte	">",TK_RSHIFT	; >>	note - ">>" must come before ">"
002347r 2  C0           	.byte TK_GT			; >
002348r 2  00           	.byte	$00
002349r 2               TAB_QEST
002349r 2  9F 00        	.byte TK_PRINT,$00	; ?
00234Br 2               TAB_ASCA
00234Br 2               LBB_ABS
00234Br 2  42 53 28 C5  	.byte	"BS(",TK_ABS	; ABS(
00234Fr 2               LBB_AND
00234Fr 2  4E 44 BB     	.byte	"ND",TK_AND		; AND
002352r 2               LBB_ASC
002352r 2  53 43 28 D7  	.byte	"SC(",TK_ASC	; ASC(
002356r 2               LBB_ATN
002356r 2  54 4E 28 D0  	.byte	"TN(",TK_ATN	; ATN(
00235Ar 2  00           	.byte	$00
00235Br 2               TAB_ASCB
00235Br 2               LBB_BINS
00235Br 2  49 4E 24 28  	.byte	"IN$(",TK_BINS	; BIN$(
00235Fr 2  DC           
002360r 2               LBB_BITCLR
002360r 2  49 54 43 4C  	.byte	"ITCLR",TK_BITCLR	; BITCLR
002364r 2  52 A8        
002366r 2               LBB_BITSET
002366r 2  49 54 53 45  	.byte	"ITSET",TK_BITSET	; BITSET
00236Ar 2  54 A7        
00236Cr 2               LBB_BITTST
00236Cr 2  49 54 54 53  	.byte	"ITTST(",TK_BITTST
002370r 2  54 28 DD     
002373r 2               					; BITTST(
002373r 2  00           	.byte	$00
002374r 2               TAB_ASCC
002374r 2               LBB_CALL
002374r 2  41 4C 4C 9C  	.byte	"ALL",TK_CALL	; CALL
002378r 2               LBB_CHRS
002378r 2  48 52 24 28  	.byte	"HR$(",TK_CHRS	; CHR$(
00237Cr 2  DA           
00237Dr 2               LBB_CLEAR
00237Dr 2  4C 45 41 52  	.byte	"LEAR",TK_CLEAR	; CLEAR
002381r 2  A2           
002382r 2               LBB_CONT
002382r 2  4F 4E 54 A0  	.byte	"ONT",TK_CONT	; CONT
002386r 2               LBB_COS
002386r 2  4F 53 28 CD  	.byte	"OS(",TK_COS	; COS(
00238Ar 2  00           	.byte	$00
00238Br 2               TAB_ASCD
00238Br 2               LBB_DATA
00238Br 2  41 54 41 83  	.byte	"ATA",TK_DATA	; DATA
00238Fr 2               LBB_DEC
00238Fr 2  45 43 88     	.byte	"EC",TK_DEC		; DEC
002392r 2               LBB_DEEK
002392r 2  45 45 4B 28  	.byte	"EEK(",TK_DEEK	; DEEK(
002396r 2  D2           
002397r 2               LBB_DEF
002397r 2  45 46 99     	.byte	"EF",TK_DEF		; DEF
00239Ar 2               LBB_DIM
00239Ar 2  49 4D 85     	.byte	"IM",TK_DIM		; DIM
00239Dr 2               LBB_DOKE
00239Dr 2  4F 4B 45 9B  	.byte	"OKE",TK_DOKE	; DOKE note - "DOKE" must come before "DO"
0023A1r 2               LBB_DO
0023A1r 2  4F 9D        	.byte	"O",TK_DO		; DO
0023A3r 2  00           	.byte	$00
0023A4r 2               TAB_ASCE
0023A4r 2               LBB_ELSE
0023A4r 2  4C 53 45 AC  	.byte	"LSE",TK_ELSE	; ELSE
0023A8r 2               LBB_END
0023A8r 2  4E 44 80     	.byte	"ND",TK_END		; END
0023ABr 2               LBB_EOR
0023ABr 2  4F 52 BC     	.byte	"OR",TK_EOR		; EOR
0023AEr 2               LBB_EXP
0023AEr 2  58 50 28 CC  	.byte	"XP(",TK_EXP	; EXP(
0023B2r 2  00           	.byte	$00
0023B3r 2               TAB_ASCF
0023B3r 2               LBB_FN
0023B3r 2  4E AE        	.byte	"N",TK_FN		; FN
0023B5r 2               LBB_FOR
0023B5r 2  4F 52 81     	.byte	"OR",TK_FOR		; FOR
0023B8r 2               LBB_FRE
0023B8r 2  52 45 28 C7  	.byte	"RE(",TK_FRE	; FRE(
0023BCr 2  00           	.byte	$00
0023BDr 2               TAB_ASCG
0023BDr 2               LBB_GET
0023BDr 2  45 54 A5     	.byte	"ET",TK_GET		; GET
0023C0r 2               LBB_GOSUB
0023C0r 2  4F 53 55 42  	.byte	"OSUB",TK_GOSUB	; GOSUB
0023C4r 2  8D           
0023C5r 2               LBB_GOTO
0023C5r 2  4F 54 4F 89  	.byte	"OTO",TK_GOTO	; GOTO
0023C9r 2  00           	.byte	$00
0023CAr 2               TAB_ASCH
0023CAr 2               LBB_HEXS
0023CAr 2  45 58 24 28  	.byte	"EX$(",TK_HEXS	; HEX$(
0023CEr 2  DB           
0023CFr 2  00           	.byte	$00
0023D0r 2               TAB_ASCI
0023D0r 2               LBB_IF
0023D0r 2  46 8B        	.byte	"F",TK_IF		; IF
0023D2r 2               LBB_INC
0023D2r 2  4E 43 95     	.byte	"NC",TK_INC		; INC
0023D5r 2               LBB_INPUT
0023D5r 2  4E 50 55 54  	.byte	"NPUT",TK_INPUT	; INPUT
0023D9r 2  84           
0023DAr 2               LBB_INT
0023DAr 2  4E 54 28 C4  	.byte	"NT(",TK_INT	; INT(
0023DEr 2               LBB_IRQ
0023DEr 2  52 51 A9     	.byte	"RQ",TK_IRQ		; IRQ
0023E1r 2  00           	.byte	$00
0023E2r 2               TAB_ASCL
0023E2r 2               LBB_LCASES
0023E2r 2  43 41 53 45  	.byte	"CASE$(",TK_LCASES
0023E6r 2  24 28 D9     
0023E9r 2               					; LCASE$(
0023E9r 2               LBB_LEFTS
0023E9r 2  45 46 54 24  	.byte	"EFT$(",TK_LEFTS	; LEFT$(
0023EDr 2  28 E3        
0023EFr 2               LBB_LEN
0023EFr 2  45 4E 28 D4  	.byte	"EN(",TK_LEN	; LEN(
0023F3r 2               LBB_LET
0023F3r 2  45 54 87     	.byte	"ET",TK_LET		; LET
0023F6r 2               LBB_LIST
0023F6r 2  49 53 54 A1  	.byte	"IST",TK_LIST	; LIST
0023FAr 2               LBB_LOAD
0023FAr 2  4F 41 44 97  	.byte	"OAD",TK_LOAD	; LOAD
0023FEr 2               LBB_LOG
0023FEr 2  4F 47 28 CB  	.byte	"OG(",TK_LOG	; LOG(
002402r 2               LBB_LOOP
002402r 2  4F 4F 50 9E  	.byte	"OOP",TK_LOOP	; LOOP
002406r 2  00           	.byte	$00
002407r 2               TAB_ASCM
002407r 2               LBB_MAX
002407r 2  41 58 28 DE  	.byte	"AX(",TK_MAX	; MAX(
00240Br 2               LBB_MIDS
00240Br 2  49 44 24 28  	.byte	"ID$(",TK_MIDS	; MID$(
00240Fr 2  E5           
002410r 2               LBB_MIN
002410r 2  49 4E 28 DF  	.byte	"IN(",TK_MIN	; MIN(
002414r 2  00           	.byte	$00
002415r 2               TAB_ASCN
002415r 2               LBB_NEW
002415r 2  45 57 A3     	.byte	"EW",TK_NEW		; NEW
002418r 2               LBB_NEXT
002418r 2  45 58 54 82  	.byte	"EXT",TK_NEXT	; NEXT
00241Cr 2               LBB_NMI
00241Cr 2  4D 49 AA     	.byte	"MI",TK_NMI		; NMI
00241Fr 2               LBB_NOT
00241Fr 2  4F 54 B1     	.byte	"OT",TK_NOT		; NOT
002422r 2               LBB_NULL
002422r 2  55 4C 4C 94  	.byte	"ULL",TK_NULL	; NULL
002426r 2  00           	.byte	$00
002427r 2               TAB_ASCO
002427r 2               LBB_OFF
002427r 2  46 46 B5     	.byte	"FF",TK_OFF		; OFF
00242Ar 2               LBB_ON
00242Ar 2  4E 93        	.byte	"N",TK_ON		; ON
00242Cr 2               LBB_OR
00242Cr 2  52 BD        	.byte	"R",TK_OR		; OR
00242Er 2  00           	.byte	$00
00242Fr 2               TAB_ASCP
00242Fr 2               LBB_PEEK
00242Fr 2  45 45 4B 28  	.byte	"EEK(",TK_PEEK	; PEEK(
002433r 2  D1           
002434r 2               LBB_PI
002434r 2  49 E0        	.byte	"I",TK_PI		; PI
002436r 2               LBB_POKE
002436r 2  4F 4B 45 9A  	.byte	"OKE",TK_POKE	; POKE
00243Ar 2               LBB_POS
00243Ar 2  4F 53 28 C8  	.byte	"OS(",TK_POS	; POS(
00243Er 2               LBB_PRINT
00243Er 2  52 49 4E 54  	.byte	"RINT",TK_PRINT	; PRINT
002442r 2  9F           
002443r 2  00           	.byte	$00
002444r 2               TAB_ASCR
002444r 2               LBB_READ
002444r 2  45 41 44 86  	.byte	"EAD",TK_READ	; READ
002448r 2               LBB_REM
002448r 2  45 4D 91     	.byte	"EM",TK_REM		; REM
00244Br 2               LBB_RESTORE
00244Br 2  45 53 54 4F  	.byte	"ESTORE",TK_RESTORE
00244Fr 2  52 45 8C     
002452r 2               					; RESTORE
002452r 2               LBB_RETIRQ
002452r 2  45 54 49 52  	.byte	"ETIRQ",TK_RETIRQ	; RETIRQ
002456r 2  51 8E        
002458r 2               LBB_RETNMI
002458r 2  45 54 4E 4D  	.byte	"ETNMI",TK_RETNMI	; RETNMI
00245Cr 2  49 8F        
00245Er 2               LBB_RETURN
00245Er 2  45 54 55 52  	.byte	"ETURN",TK_RETURN	; RETURN
002462r 2  4E 90        
002464r 2               LBB_RIGHTS
002464r 2  49 47 48 54  	.byte	"IGHT$(",TK_RIGHTS
002468r 2  24 28 E4     
00246Br 2               					; RIGHT$(
00246Br 2               LBB_RND
00246Br 2  4E 44 28 CA  	.byte	"ND(",TK_RND	; RND(
00246Fr 2               LBB_RUN
00246Fr 2  55 4E 8A     	.byte	"UN",TK_RUN		; RUN
002472r 2  00           	.byte	$00
002473r 2               TAB_ASCS
002473r 2               LBB_SADD
002473r 2  41 44 44 28  	.byte	"ADD(",TK_SADD	; SADD(
002477r 2  D3           
002478r 2               LBB_SAVE
002478r 2  41 56 45 98  	.byte	"AVE",TK_SAVE	; SAVE
00247Cr 2               LBB_SGN
00247Cr 2  47 4E 28 C3  	.byte	"GN(",TK_SGN	; SGN(
002480r 2               LBB_SIN
002480r 2  49 4E 28 CE  	.byte	"IN(",TK_SIN	; SIN(
002484r 2               LBB_SPC
002484r 2  50 43 28 AF  	.byte	"PC(",TK_SPC	; SPC(
002488r 2               LBB_SQR
002488r 2  51 52 28 C9  	.byte	"QR(",TK_SQR	; SQR(
00248Cr 2               LBB_STEP
00248Cr 2  54 45 50 B2  	.byte	"TEP",TK_STEP	; STEP
002490r 2               LBB_STOP
002490r 2  54 4F 50 92  	.byte	"TOP",TK_STOP	; STOP
002494r 2               LBB_STRS
002494r 2  54 52 24 28  	.byte	"TR$(",TK_STRS	; STR$(
002498r 2  D5           
002499r 2               LBB_SWAP
002499r 2  57 41 50 A6  	.byte	"WAP",TK_SWAP	; SWAP
00249Dr 2  00           	.byte	$00
00249Er 2               TAB_ASCT
00249Er 2               LBB_TAB
00249Er 2  41 42 28 AB  	.byte	"AB(",TK_TAB	; TAB(
0024A2r 2               LBB_TAN
0024A2r 2  41 4E 28 CF  	.byte	"AN(",TK_TAN	; TAN(
0024A6r 2               LBB_THEN
0024A6r 2  48 45 4E B0  	.byte	"HEN",TK_THEN	; THEN
0024AAr 2               LBB_TO
0024AAr 2  4F AD        	.byte	"O",TK_TO		; TO
0024ACr 2               LBB_TWOPI
0024ACr 2  57 4F 50 49  	.byte	"WOPI",TK_TWOPI	; TWOPI
0024B0r 2  E1           
0024B1r 2  00           	.byte	$00
0024B2r 2               TAB_ASCU
0024B2r 2               LBB_UCASES
0024B2r 2  43 41 53 45  	.byte	"CASE$(",TK_UCASES
0024B6r 2  24 28 D8     
0024B9r 2               					; UCASE$(
0024B9r 2               LBB_UNTIL
0024B9r 2  4E 54 49 4C  	.byte	"NTIL",TK_UNTIL	; UNTIL
0024BDr 2  B3           
0024BEr 2               LBB_USR
0024BEr 2  53 52 28 C6  	.byte	"SR(",TK_USR	; USR(
0024C2r 2  00           	.byte	$00
0024C3r 2               TAB_ASCV
0024C3r 2               LBB_VAL
0024C3r 2  41 4C 28 D6  	.byte	"AL(",TK_VAL	; VAL(
0024C7r 2               LBB_VPTR
0024C7r 2  41 52 50 54  	.byte	"ARPTR(",TK_VPTR	; VARPTR(
0024CBr 2  52 28 E2     
0024CEr 2  00           	.byte	$00
0024CFr 2               TAB_ASCW
0024CFr 2               LBB_WAIT
0024CFr 2  41 49 54 96  	.byte	"AIT",TK_WAIT	; WAIT
0024D3r 2               LBB_WHILE
0024D3r 2  48 49 4C 45  	.byte	"HILE",TK_WHILE	; WHILE
0024D7r 2  B4           
0024D8r 2               LBB_WIDTH
0024D8r 2  49 44 54 48  	.byte	"IDTH",TK_WIDTH	; WIDTH
0024DCr 2  A4           
0024DDr 2  00           	.byte	$00
0024DEr 2               TAB_POWR
0024DEr 2  BA 00        	.byte	TK_POWER,$00	; ^
0024E0r 2               
0024E0r 2               ; new decode table for LIST
0024E0r 2               ; Table is ..
0024E0r 2               ; byte - keyword length, keyword first character
0024E0r 2               ; word - pointer to rest of keyword from dictionary
0024E0r 2               
0024E0r 2               ; note if length is 1 then the pointer is ignored
0024E0r 2               
0024E0r 2               LAB_KEYT
0024E0r 2  03 45        	.byte	3,'E'
0024E2r 2  rr rr        	.word	LBB_END		; END
0024E4r 2  03 46        	.byte	3,'F'
0024E6r 2  rr rr        	.word	LBB_FOR		; FOR
0024E8r 2  04 4E        	.byte	4,'N'
0024EAr 2  rr rr        	.word	LBB_NEXT		; NEXT
0024ECr 2  04 44        	.byte	4,'D'
0024EEr 2  rr rr        	.word	LBB_DATA		; DATA
0024F0r 2  05 49        	.byte	5,'I'
0024F2r 2  rr rr        	.word	LBB_INPUT		; INPUT
0024F4r 2  03 44        	.byte	3,'D'
0024F6r 2  rr rr        	.word	LBB_DIM		; DIM
0024F8r 2  04 52        	.byte	4,'R'
0024FAr 2  rr rr        	.word	LBB_READ		; READ
0024FCr 2  03 4C        	.byte	3,'L'
0024FEr 2  rr rr        	.word	LBB_LET		; LET
002500r 2  03 44        	.byte	3,'D'
002502r 2  rr rr        	.word	LBB_DEC		; DEC
002504r 2  04 47        	.byte	4,'G'
002506r 2  rr rr        	.word	LBB_GOTO		; GOTO
002508r 2  03 52        	.byte	3,'R'
00250Ar 2  rr rr        	.word	LBB_RUN		; RUN
00250Cr 2  02 49        	.byte	2,'I'
00250Er 2  rr rr        	.word	LBB_IF		; IF
002510r 2  07 52        	.byte	7,'R'
002512r 2  rr rr        	.word	LBB_RESTORE		; RESTORE
002514r 2  05 47        	.byte	5,'G'
002516r 2  rr rr        	.word	LBB_GOSUB		; GOSUB
002518r 2  06 52        	.byte	6,'R'
00251Ar 2  rr rr        	.word	LBB_RETIRQ		; RETIRQ
00251Cr 2  06 52        	.byte	6,'R'
00251Er 2  rr rr        	.word	LBB_RETNMI		; RETNMI
002520r 2  06 52        	.byte	6,'R'
002522r 2  rr rr        	.word	LBB_RETURN		; RETURN
002524r 2  03 52        	.byte	3,'R'
002526r 2  rr rr        	.word	LBB_REM		; REM
002528r 2  04 53        	.byte	4,'S'
00252Ar 2  rr rr        	.word	LBB_STOP		; STOP
00252Cr 2  02 4F        	.byte	2,'O'
00252Er 2  rr rr        	.word	LBB_ON		; ON
002530r 2  04 4E        	.byte	4,'N'
002532r 2  rr rr        	.word	LBB_NULL		; NULL
002534r 2  03 49        	.byte	3,'I'
002536r 2  rr rr        	.word	LBB_INC		; INC
002538r 2  04 57        	.byte	4,'W'
00253Ar 2  rr rr        	.word	LBB_WAIT		; WAIT
00253Cr 2  04 4C        	.byte	4,'L'
00253Er 2  rr rr        	.word	LBB_LOAD		; LOAD
002540r 2  04 53        	.byte	4,'S'
002542r 2  rr rr        	.word	LBB_SAVE		; SAVE
002544r 2  03 44        	.byte	3,'D'
002546r 2  rr rr        	.word	LBB_DEF		; DEF
002548r 2  04 50        	.byte	4,'P'
00254Ar 2  rr rr        	.word	LBB_POKE		; POKE
00254Cr 2  04 44        	.byte	4,'D'
00254Er 2  rr rr        	.word	LBB_DOKE		; DOKE
002550r 2  04 43        	.byte	4,'C'
002552r 2  rr rr        	.word	LBB_CALL		; CALL
002554r 2  02 44        	.byte	2,'D'
002556r 2  rr rr        	.word	LBB_DO		; DO
002558r 2  04 4C        	.byte	4,'L'
00255Ar 2  rr rr        	.word	LBB_LOOP		; LOOP
00255Cr 2  05 50        	.byte	5,'P'
00255Er 2  rr rr        	.word	LBB_PRINT		; PRINT
002560r 2  04 43        	.byte	4,'C'
002562r 2  rr rr        	.word	LBB_CONT		; CONT
002564r 2  04 4C        	.byte	4,'L'
002566r 2  rr rr        	.word	LBB_LIST		; LIST
002568r 2  05 43        	.byte	5,'C'
00256Ar 2  rr rr        	.word	LBB_CLEAR		; CLEAR
00256Cr 2  03 4E        	.byte	3,'N'
00256Er 2  rr rr        	.word	LBB_NEW		; NEW
002570r 2  05 57        	.byte	5,'W'
002572r 2  rr rr        	.word	LBB_WIDTH		; WIDTH
002574r 2  03 47        	.byte	3,'G'
002576r 2  rr rr        	.word	LBB_GET		; GET
002578r 2  04 53        	.byte	4,'S'
00257Ar 2  rr rr        	.word	LBB_SWAP		; SWAP
00257Cr 2  06 42        	.byte	6,'B'
00257Er 2  rr rr        	.word	LBB_BITSET		; BITSET
002580r 2  06 42        	.byte	6,'B'
002582r 2  rr rr        	.word	LBB_BITCLR		; BITCLR
002584r 2  03 49        	.byte	3,'I'
002586r 2  rr rr        	.word	LBB_IRQ		; IRQ
002588r 2  03 4E        	.byte	3,'N'
00258Ar 2  rr rr        	.word	LBB_NMI		; NMI
00258Cr 2               
00258Cr 2               ; secondary commands (can't start a statement)
00258Cr 2               
00258Cr 2  04 54        	.byte	4,'T'
00258Er 2  rr rr        	.word	LBB_TAB		; TAB
002590r 2  04 45        	.byte	4,'E'
002592r 2  rr rr        	.word	LBB_ELSE		; ELSE
002594r 2  02 54        	.byte	2,'T'
002596r 2  rr rr        	.word	LBB_TO		; TO
002598r 2  02 46        	.byte	2,'F'
00259Ar 2  rr rr        	.word	LBB_FN		; FN
00259Cr 2  04 53        	.byte	4,'S'
00259Er 2  rr rr        	.word	LBB_SPC		; SPC
0025A0r 2  04 54        	.byte	4,'T'
0025A2r 2  rr rr        	.word	LBB_THEN		; THEN
0025A4r 2  03 4E        	.byte	3,'N'
0025A6r 2  rr rr        	.word	LBB_NOT		; NOT
0025A8r 2  04 53        	.byte	4,'S'
0025AAr 2  rr rr        	.word	LBB_STEP		; STEP
0025ACr 2  05 55        	.byte	5,'U'
0025AEr 2  rr rr        	.word	LBB_UNTIL		; UNTIL
0025B0r 2  05 57        	.byte	5,'W'
0025B2r 2  rr rr        	.word	LBB_WHILE		; WHILE
0025B4r 2  03 4F        	.byte	3,'O'
0025B6r 2  rr rr        	.word	LBB_OFF		; OFF
0025B8r 2               
0025B8r 2               ; opperators
0025B8r 2               
0025B8r 2  01 2B        	.byte	1,'+'
0025BAr 2  00 00        	.word	$0000			; +
0025BCr 2  01 2D        	.byte	1,'-'
0025BEr 2  00 00        	.word	$0000			; -
0025C0r 2  01 2A        	.byte	1,'*'
0025C2r 2  00 00        	.word	$0000			; *
0025C4r 2  01 2F        	.byte	1,'/'
0025C6r 2  00 00        	.word	$0000			; /
0025C8r 2  01 5E        	.byte	1,'^'
0025CAr 2  00 00        	.word	$0000			; ^
0025CCr 2  03 41        	.byte	3,'A'
0025CEr 2  rr rr        	.word	LBB_AND		; AND
0025D0r 2  03 45        	.byte	3,'E'
0025D2r 2  rr rr        	.word	LBB_EOR		; EOR
0025D4r 2  02 4F        	.byte	2,'O'
0025D6r 2  rr rr        	.word	LBB_OR		; OR
0025D8r 2  02 3E        	.byte	2,'>'
0025DAr 2  rr rr        	.word	LBB_RSHIFT		; >>
0025DCr 2  02 3C        	.byte	2,'<'
0025DEr 2  rr rr        	.word	LBB_LSHIFT		; <<
0025E0r 2  01 3E        	.byte	1,'>'
0025E2r 2  00 00        	.word	$0000			; >
0025E4r 2  01 3D        	.byte	1,'='
0025E6r 2  00 00        	.word	$0000			; =
0025E8r 2  01 3C        	.byte	1,'<'
0025EAr 2  00 00        	.word	$0000			; <
0025ECr 2               
0025ECr 2               ; functions
0025ECr 2               
0025ECr 2  04 53        	.byte	4,'S'			;
0025EEr 2  rr rr        	.word	LBB_SGN		; SGN
0025F0r 2  04 49        	.byte	4,'I'			;
0025F2r 2  rr rr        	.word	LBB_INT		; INT
0025F4r 2  04 41        	.byte	4,'A'			;
0025F6r 2  rr rr        	.word	LBB_ABS		; ABS
0025F8r 2  04 55        	.byte	4,'U'			;
0025FAr 2  rr rr        	.word	LBB_USR		; USR
0025FCr 2  04 46        	.byte	4,'F'			;
0025FEr 2  rr rr        	.word	LBB_FRE		; FRE
002600r 2  04 50        	.byte	4,'P'			;
002602r 2  rr rr        	.word	LBB_POS		; POS
002604r 2  04 53        	.byte	4,'S'			;
002606r 2  rr rr        	.word	LBB_SQR		; SQR
002608r 2  04 52        	.byte	4,'R'			;
00260Ar 2  rr rr        	.word	LBB_RND		; RND
00260Cr 2  04 4C        	.byte	4,'L'			;
00260Er 2  rr rr        	.word	LBB_LOG		; LOG
002610r 2  04 45        	.byte	4,'E'			;
002612r 2  rr rr        	.word	LBB_EXP		; EXP
002614r 2  04 43        	.byte	4,'C'			;
002616r 2  rr rr        	.word	LBB_COS		; COS
002618r 2  04 53        	.byte	4,'S'			;
00261Ar 2  rr rr        	.word	LBB_SIN		; SIN
00261Cr 2  04 54        	.byte	4,'T'			;
00261Er 2  rr rr        	.word	LBB_TAN		; TAN
002620r 2  04 41        	.byte	4,'A'			;
002622r 2  rr rr        	.word	LBB_ATN		; ATN
002624r 2  05 50        	.byte	5,'P'			;
002626r 2  rr rr        	.word	LBB_PEEK		; PEEK
002628r 2  05 44        	.byte	5,'D'			;
00262Ar 2  rr rr        	.word	LBB_DEEK		; DEEK
00262Cr 2  05 53        	.byte	5,'S'			;
00262Er 2  rr rr        	.word	LBB_SADD		; SADD
002630r 2  04 4C        	.byte	4,'L'			;
002632r 2  rr rr        	.word	LBB_LEN		; LEN
002634r 2  05 53        	.byte	5,'S'			;
002636r 2  rr rr        	.word	LBB_STRS		; STR$
002638r 2  04 56        	.byte	4,'V'			;
00263Ar 2  rr rr        	.word	LBB_VAL		; VAL
00263Cr 2  04 41        	.byte	4,'A'			;
00263Er 2  rr rr        	.word	LBB_ASC		; ASC
002640r 2  07 55        	.byte	7,'U'			;
002642r 2  rr rr        	.word	LBB_UCASES		; UCASE$
002644r 2  07 4C        	.byte	7,'L'			;
002646r 2  rr rr        	.word	LBB_LCASES		; LCASE$
002648r 2  05 43        	.byte	5,'C'			;
00264Ar 2  rr rr        	.word	LBB_CHRS		; CHR$
00264Cr 2  05 48        	.byte	5,'H'			;
00264Er 2  rr rr        	.word	LBB_HEXS		; HEX$
002650r 2  05 42        	.byte	5,'B'			;
002652r 2  rr rr        	.word	LBB_BINS		; BIN$
002654r 2  07 42        	.byte	7,'B'			;
002656r 2  rr rr        	.word	LBB_BITTST		; BITTST
002658r 2  04 4D        	.byte	4,'M'			;
00265Ar 2  rr rr        	.word	LBB_MAX		; MAX
00265Cr 2  04 4D        	.byte	4,'M'			;
00265Er 2  rr rr        	.word	LBB_MIN		; MIN
002660r 2  02 50        	.byte	2,'P'			;
002662r 2  rr rr        	.word	LBB_PI		; PI
002664r 2  05 54        	.byte	5,'T'			;
002666r 2  rr rr        	.word	LBB_TWOPI		; TWOPI
002668r 2  07 56        	.byte	7,'V'			;
00266Ar 2  rr rr        	.word	LBB_VPTR		; VARPTR
00266Cr 2  06 4C        	.byte	6,'L'			;
00266Er 2  rr rr        	.word	LBB_LEFTS		; LEFT$
002670r 2  07 52        	.byte	7,'R'			;
002672r 2  rr rr        	.word	LBB_RIGHTS		; RIGHT$
002674r 2  05 4D        	.byte	5,'M'			;
002676r 2  rr rr        	.word	LBB_MIDS		; MID$
002678r 2               
002678r 2               ; BASIC messages, mostly error messages
002678r 2               
002678r 2               LAB_BAER
002678r 2  rr rr        	.word	ERR_SN		;$00 NEXT without FOR
00267Ar 2  rr rr        	.word	ERR_SN		;$02 syntax
00267Cr 2  rr rr        	.word	ERR_SN		;$04 RETURN without GOSUB
00267Er 2  rr rr        	.word	ERR_OD		;$06 out of data
002680r 2  rr rr        	.word	ERR_FC		;$08 function call
002682r 2  rr rr        	.word	ERR_OV		;$0A overflow
002684r 2  rr rr        	.word	ERR_OM		;$0C out of memory
002686r 2  rr rr        	.word	ERR_US		;$0E undefined statement
002688r 2  rr rr        	.word	ERR_BS		;$10 array bounds
00268Ar 2  rr rr        	.word	ERR_BS		;$12 double dimension array
00268Cr 2  rr rr        	.word	ERR_D0		;$14 divide by 0
00268Er 2  rr rr        	.word	ERR_ID		;$16 illegal direct
002690r 2  rr rr        	.word	ERR_TM		;$18 type mismatch
002692r 2  rr rr        	.word	ERR_LS		;$1A long string
002694r 2  rr rr        	.word	ERR_LS		;$1C string too complex
002696r 2  rr rr        	.word	ERR_CN		;$1E continue error
002698r 2  rr rr        	.word	ERR_UF		;$20 undefined function
00269Ar 2  rr rr        	.word 	ERR_SN		;$22 LOOP without DO
00269Cr 2               
00269Cr 2               ; I may implement these two errors to force definition of variables and
00269Cr 2               ; dimensioning of arrays before use.
00269Cr 2               
00269Cr 2               ;	.word ERR_UV		;$24 undefined variable
00269Cr 2               
00269Cr 2               ; the above error has been tested and works (see code and comments below LAB_1D8B)
00269Cr 2               
00269Cr 2               ;	.word ERR_UA		;$26 undimensioned array
00269Cr 2               
00269Cr 2  3F 53 79 6E  ERR_SN	.byte	"?Syntax",$00
0026A0r 2  74 61 78 00  
0026A4r 2  3F 44 61 74  ERR_OD	.byte	"?Data",$00
0026A8r 2  61 00        
0026AAr 2  3F 46 75 6E  ERR_FC	.byte	"?Function",$00
0026AEr 2  63 74 69 6F  
0026B2r 2  6E 00        
0026B4r 2  3F 4F 76 65  ERR_OV	.byte	"?Overflow",$00
0026B8r 2  72 66 6C 6F  
0026BCr 2  77 00        
0026BEr 2  3F 4F 75 74  ERR_OM	.byte	"?Out of Memory",$00
0026C2r 2  20 6F 66 20  
0026C6r 2  4D 65 6D 6F  
0026CDr 2  3F 47 6F 73  ERR_US	.byte	"?Gosub",$00
0026D1r 2  75 62 00     
0026D4r 2  3F 41 72 72  ERR_BS	.byte	"?Array",$00
0026D8r 2  61 79 00     
0026DBr 2  3F 5A 65 72  ERR_D0	.byte	"?Zero",$00
0026DFr 2  6F 00        
0026E1r 2  3F 49 6C 6C  ERR_ID	.byte	"?Illegal Direct",$00
0026E5r 2  65 67 61 6C  
0026E9r 2  20 44 69 72  
0026F1r 2  3F 54 79 70  ERR_TM	.byte	"?Type",$00
0026F5r 2  65 00        
0026F7r 2  3F 53 74 72  ERR_LS	.byte	"?String",$00
0026FBr 2  69 6E 67 00  
0026FFr 2  3F 48 61 75  ERR_CN	.byte	"?Hault",$00
002703r 2  6C 74 00     
002706r 2  3F 4E 75 6C  ERR_UF	.byte	"?Null Function",$00
00270Ar 2  6C 20 46 75  
00270Er 2  6E 63 74 69  
002715r 2               
002715r 2               ;ERR_UV	.byte	"Undefined variable",$00
002715r 2               
002715r 2               ; the above error has been tested and works (see code and comments below LAB_1D8B)
002715r 2               
002715r 2               ;ERR_UA	.byte	"Undimensioned array",$00
002715r 2               
002715r 2  0D 0A 42 72  LAB_BMSG	.byte	$0D,$0A,"Break",$0D,$0A,$00
002719r 2  65 61 6B 0D  
00271Dr 2  0A 00        
00271Fr 2  20 45 72 72  LAB_EMSG	.byte	" Error",$0D,$0A,$00
002723r 2  6F 72 0D 0A  
002727r 2  00           
002728r 2  20 69 6E 20  LAB_LMSG	.byte	" in line ",$00
00272Cr 2  6C 69 6E 65  
002730r 2  20 00        
002732r 2  52 65 61 64  LAB_RMSG	.byte	"Ready",$0D,$0A,$00					; $0D,$0A,"Ready",$0D,$0A,$00
002736r 2  79 0D 0A 00  
00273Ar 2               
00273Ar 2  20 45 78 74  LAB_IMSG	.byte	" Extra ignored",$0D,$0A,$00
00273Er 2  72 61 20 69  
002742r 2  67 6E 6F 72  
00274Br 2  20 52 65 64  LAB_REDO	.byte	" Redo from start",$0D,$0A,$00
00274Fr 2  6F 20 66 72  
002753r 2  6F 6D 20 73  
00275Er 2               
00275Er 2               AA_end_basic
00275Er 2               
00275Er 1               
00275Er 1               ; put the IRQ and MNI code in RAM so that it can be changed
00275Er 1               
00275Er 1               IRQ_vec	= VEC_SV+2		; IRQ code vector
00275Er 1               NMI_vec	= IRQ_vec+$0A	; NMI code vector
00275Er 1               
00275Er 1               ; setup for the 6502 simulator environment
00275Er 1               
00275Er 1               IO_AREA = $8800
00275Er 1               ACIAdata	= IO_AREA		; simulated ACIA r/w port
00275Er 1               ACIAstatus  = IO_AREA+1
00275Er 1               ACIAcommand = IO_AREA+2
00275Er 1               ACIAcontrol = IO_AREA+3
00275Er 1               
00275Er 1               ; now the code. all this does is set up the vectors and interrupt code
00275Er 1               ; and wait for the user to select [C]old or [W]arm start. nothing else
00275Er 1               ; fits in less than 128 bytes
00275Er 1               
00275Er 1               .segment "MONITOR"
000000r 1               	;.org	$FF00			; pretend this is in a 1/8K ROM
000000r 1               
000000r 1               ; reset vector points here
000000r 1               BOOT
000000r 1               RES_vec
000000r 1  D8           	CLD				; clear decimal mode
000001r 1  A2 FF        	LDX	#$FF			; empty stack
000003r 1  9A           	TXS				; set the stack
000004r 1               
000004r 1               ; set up vectors and interrupt code, copy them to page 2
000004r 1               
000004r 1  A0 0A        	LDY	#END_CODE-LAB_vec	; set index/count
000006r 1               LAB_stlp
000006r 1  B9 rr rr     	LDA	LAB_vec-1,Y		; get byte from interrupt code
000009r 1  99 04 03     	STA	VEC_IN-1,Y		; save to RAM
00000Cr 1  88           	DEY				; decrement index/count
00000Dr 1  D0 F7        	BNE	LAB_stlp		; loop if more to do
00000Fr 1               
00000Fr 1               ; now do the signon message, Y = $00 here
00000Fr 1  20 18 C0     	JSR $C018
000012r 1               LAB_signon
000012r 1  B9 rr rr     	LDA	LAB_mess,Y		; get byte from sign on message
000015r 1  F0 06        	BEQ	LAB_nokey		; exit loop if done
000017r 1               
000017r 1  20 rr rr     	JSR	V_OUTP		; output character
00001Ar 1  C8           	INY				; increment index
00001Br 1  D0 F5        	BNE	LAB_signon		; loop, branch always
00001Dr 1               
00001Dr 1               LAB_nokey
00001Dr 1  20 rr rr     	JSR	V_INPT		; call scan input device
000020r 1  90 FB        	BCC	LAB_nokey		; loop if no key
000022r 1               
000022r 1  29 DF        	AND	#$DF			; mask xx0x xxxx, ensure upper case
000024r 1  C9 57        	CMP	#'W'			; compare with [W]arm start
000026r 1  F0 07        	BEQ	LAB_dowarm		; branch if [W]arm start
000028r 1               
000028r 1  C9 43        	CMP	#'C'			; compare with [C]old start
00002Ar 1  D0 F1        	BNE	LAB_nokey		; loop if not [C]old start
00002Cr 1               
00002Cr 1  4C rr rr     	JMP	LAB_COLD		; do EhBASIC cold start
00002Fr 1               
00002Fr 1               LAB_dowarm
00002Fr 1  4C 00 00     	JMP	LAB_WARM		; do EhBASIC warm start
000032r 1               
000032r 1               ; byte out to ACIA
000032r 1               ACIAout
000032r 1               ;	PHA
000032r 1               ;A0
000032r 1               ;	LDA $8801
000032r 1               ;	AND #$10
000032r 1               ;	BEQ A0
000032r 1               ;	PLA
000032r 1               ;	STA $8800
000032r 1               ;	RTS
000032r 1               
000032r 1               
000032r 1  C9 0A        	CMP #$0A
000034r 1  F0 0A        	BEQ A2
000036r 1  C9 0D        	CMP #$0D
000038r 1  F0 03        	BEQ A1
00003Ar 1  4C 09 C0     	JMP $C009
00003Dr 1               A1
00003Dr 1  4C 1E C0     	JMP $C01E
000040r 1               A2
000040r 1  60           	RTS
000041r 1               
000041r 1               ;
000041r 1               ; byte in from ACIA. This subroutine will also force
000041r 1               ; all lowercase letters to be uppercase.
000041r 1               ;
000041r 1               ACIAin
000041r 1               	;LDA $8801
000041r 1               	;AND #$08
000041r 1               	;BEQ LAB_nobyw
000041r 1               	;LDA $8800
000041r 1  A9 90        	LDA #$90
000043r 1  20 2D C0     	JSR $C02D
000046r 1  20 21 C0     	JSR $C021
000049r 1               
000049r 1  C9 03        	CMP #$03
00004Br 1  D0 03        	BNE A4
00004Dr 1  4C 00 C0     	JMP $C000
000050r 1               A4
000050r 1  C9 FF        	CMP #$FF
000052r 1  F0 0C        	BEQ LAB_nobyw
000054r 1               
000054r 1  C9 61        	CMP	#'a'			; Is it < 'a'?
000056r 1  90 06        	BCC	@done			; Yes, we're done
000058r 1  C9 7B        	CMP	#'{'			; Is it >= '{'?
00005Ar 1  B0 02        	BCS	@done			; Yes, we're done
00005Cr 1  29 5F        	AND	#$5f			; Otherwise, mask to uppercase
00005Er 1               @done
00005Er 1  38           	SEC				; Flag byte received
00005Fr 1  60           	RTS
000060r 1               
000060r 1               LAB_nobyw
000060r 1  18           	CLC				; flag no byte received
000061r 1               no_load				; empty load vector for EhBASIC
000061r 1               no_save				; empty save vector for EhBASIC
000061r 1  60           	RTS
000062r 1               
000062r 1               ; vector tables
000062r 1               
000062r 1               LAB_vec
000062r 1  rr rr        	.word	ACIAin		; byte in from simulated ACIA
000064r 1  rr rr        	.word	ACIAout		; byte out to simulated ACIA
000066r 1  rr rr        	.word	no_load		; null load vector for EhBASIC
000068r 1  rr rr        	.word	no_save		; null save vector for EhBASIC
00006Ar 1               
00006Ar 1               ; EhBASIC IRQ support
00006Ar 1               
00006Ar 1               IRQ_CODE
00006Ar 1  40           	RTI
00006Br 1               
00006Br 1               ; EhBASIC NMI support
00006Br 1               
00006Br 1               NMI_CODE
00006Br 1  40           	RTI
00006Cr 1               
00006Cr 1               END_CODE
00006Cr 1               
00006Cr 1               ; sign on string
00006Cr 1               
00006Cr 1               LAB_mess
00006Cr 1  45 68 42 41  	.byte	"EhBASIC 2.2", $0D, $0A, "[C]old/[W]arm?", $00
000070r 1  53 49 43 20  
000074r 1  32 2E 32 0D  
000088r 1               
000088r 1               
000088r 1               ; system vectors
000088r 1               
000088r 1               .segment "VECTORS"
000000r 1               	;.org	$FFFA
000000r 1               
000000r 1  17 03        	.word	NMI_vec		; NMI vector
000002r 1  rr rr        	.word	RES_vec		; RESET vector
000004r 1  0D 03        	.word	IRQ_vec		; IRQ vector
000006r 1               
000006r 1               
